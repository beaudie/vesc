{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f3d09b_92917903",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-10T19:41:41Z",
      "side": 1,
      "message": "Why is this marked \"Debug\"?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 7
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb22a79f_75e2bf62",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "This CL will be merged into first CL.  \nhttps://chromium-review.googlesource.com/c/angle/angle/+/3266146\nI sent out for review simply because the diff is already hugfe in first CL. This is to make diffs smaller so that easier to review.",
      "parentUuid": "d0f3d09b_92917903",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 7
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90c1dc3a_567eba64",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-10T19:41:41Z",
      "side": 1,
      "message": "Why is this better than using the more deterministic rule of number of swapBuffer calls?\n\nAs Shabi pointed out, this will make it more difficult to assign \"random\" overhead to this code, and is complicated by apps going into the background.\n\nWhat about things like 30fps vs 120fps apps? The number of frames where an app could be freeing buffers and building up a larger list of buffers to be freed is faster in the 120fps case, which is more painful since there\u0027s less time each frame to do that work.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4fd4e76_033fa326",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "But how about offscreen rendering where there is fps? I did wall clock based mainly try to capture both on screen and off screen case. The app goes to background (and gets minimized), I think we should have a separate trigger that tie to OS\u0027s event and immediately prune out all empty buffers.\n\nBut again, I think some of these logics are subject to future improvement. Any other ideas for future improvement are welcomed.",
      "parentUuid": "90c1dc3a_567eba64",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cef19616_34d0f1a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-21T19:42:12Z",
      "side": 1,
      "message": "Sorry I was recycling the old change-id for this. Probably should not do this.",
      "parentUuid": "a4fd4e76_033fa326",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 11,
        "endChar": 38
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23ba43d1_1a6cc5fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-10T02:02:45Z",
      "side": 1,
      "message": "Will merge into the first CL. Figured this may easier for you guys to review.",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc75a81_23d524f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-10T14:41:36Z",
      "side": 1,
      "message": "Seems reasonable, maybe also include a sentence in the commit description on how this helps debugging.",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc76f896_9aa4c6c2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5625,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-10T05:47:57Z",
      "side": 1,
      "message": "This was purely a debug feature until now. Why only flush/finish/swap? Why not client wait sync for example? I suggest enumerating all three reasons instead of a range check, in case the enum gets reordered later.",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e241b0b_c4c34088",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 5625,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "You were foreseeing what\u0027s needed in future, apparently :-).\n\nThe reason I am checking on flush/finish/swap is try to find frame boundary for both on screen and offscreen (and single buffer) usage. If I just check swap, then we will never trigger this for offscreen rendering.\n\nChanged to enumerate all three enums.",
      "parentUuid": "bc76f896_9aa4c6c2",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16b00b4e_156391de",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 385,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-10T05:47:57Z",
      "side": 1,
      "message": "nit: This makes pruning actually less than 1Hz. You can both make the frequency more precise and save yourself a gettime call by keeping `mNextPruneTime` and doing `mNextPruneTime +\u003d kTimeElapsedForPruneDefaultBufferPool` here.\n\nIn `isDueForBufferPoolPrune`, you\u0027d reuse the gettime results to also account for time discrepancies (like wake up after suspend etc):\n\n    bool ShareGroupVk::isDueForBufferPoolPrune()\n    {\n        double currentTime \u003d angle::GetCurrentSystemTime()\n        double timeLeft \u003d mNextPruneTime - currentTime;\n\n        // Account for jumps in time due to suspend\n        if (timeLeft \u003c -kTimeElapsedForPruneDefaultBufferPool)\n        {\n            mNextPruneTime \u003d currentTime;\n            timeLeft \u003d 0;\n        }\n\n        return timeLeft \u003c\u003d 0;\n    }\n\nNot a big deal, as the 1Hz frequency is arbitrary anyway, but the precision might help us with debugging later if a report comes in that there\u0027s a hitch every second (vs every more-or-less second!)",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ffb275_7848104d",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 385,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "yea, not just 1hz is arbitrary, the swap call timing may also vary. Precision here really is not an issue. This is just making sure we periodically do the clean up. \n\nWe should not expect a hitch with this as well (if yes, we should think about ways to mitigate). \n\nThe minor reason I prefer mLastPruneTime is that it is more intuitive to debug that when I look at debugger, this is the time actually happened instead of have to do math. \n\nWe also have other stuff that needs periodically maintained. Things like compress the blob cache. Command buffer garbage collection etc. I think one direction for future improvement is to consolidate all these together.",
      "parentUuid": "16b00b4e_156391de",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "051a8c4d_9f97b293",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 385,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-21T19:42:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c1ffb275_7848104d",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99b227c2_1f4921ac",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2666,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-10T19:41:41Z",
      "side": 1,
      "message": "While this may have been useful while you were debugging this code, I suggest removing it since the value is never read/logged/etc.\n\nOn its own the value doesn\u0027t seem to provide much information anyway, since we can\u0027t tell if a particular bufferBlock was empty too much (an error), or if we are allocating/destroying bufferBlocks every other frame so it should be incrementing a lot normally (working as intended).\n\nIf you want to keep it, it should be wrapped in a ANGLE_PERF_WARNING() call to indicate to the user that they are allocating/freeing a lot of buffers and reusing them would be better.",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20a7642b_01bbc6a9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2666,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99b227c2_1f4921ac",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c479f9cd_f130af6d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 4
      },
      "lineNbr": 986,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-10T19:41:41Z",
      "side": 1,
      "message": "This isn\u0027t measuring the number of frames since it\u0027s only checked once a second.",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "510af2ef_4b72a524",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 4
      },
      "lineNbr": 986,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c479f9cd_f130af6d",
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76940f7b_b1832b31",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 960,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-10T14:41:36Z",
      "side": 1,
      "message": "wording nit: I\u0027d rename these to make it clearer what they\u0027re doing, like\n\nmEmptyCounter\n\nint32_t getAndIncrementEmptyCounter()",
      "range": {
        "startLine": 960,
        "startChar": 12,
        "endLine": 960,
        "endChar": 26
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5bcb7bd_633de71b",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 960,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-12-11T01:07:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76940f7b_b1832b31",
      "range": {
        "startLine": 960,
        "startChar": 12,
        "endLine": 960,
        "endChar": 26
      },
      "revId": "adc629a3cb3436124871ed4feb36cede1be319ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}