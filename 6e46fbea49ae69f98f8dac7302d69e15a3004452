{
  "comments": [
    {
      "key": {
        "uuid": "90b46fdf_c9285d71",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-12T20:06:59Z",
      "side": 1,
      "message": "Should we ASSERT here that the sampler count is within the allowable range? I assume we\u0027ve checked it before streaming it out, but theoretically it\u0027s possible that someone screwed with the binary before we\u0027re reloading it...",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30a663d4_a20fa094",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-16T21:03:09Z",
      "side": 1,
      "message": "It could be a useful assertion but we can\u0027t without passing a caps object to the load function.  There are a few other places where we resize containers based on values we read from the binary so I don\u0027t think it\u0027s possible to protect against everything here.",
      "parentUuid": "90b46fdf_c9285d71",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50ef57ff_13feae77",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-17T15:46:40Z",
      "side": 1,
      "message": "Is it possible for the caps to change between save and load without rendering the binary format incompatible? Would someone possibly try to load a binary under different caps than it was saved? (Note that we shouldn\u0027t rely entirely on Chrome\u0027s shader cache to validate this.) Given that the caps do influence the binary format directly, I\u0027m not sure it\u0027s unreasonable to need to pass it in to the function...",
      "parentUuid": "30a663d4_a20fa094",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50a117b9_c75bcd2e",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-17T20:23:22Z",
      "side": 1,
      "message": "Chrome\u0027s shader cache would actually catch this I think.  The texture unit sizes are part of the compiler resources struct.\n\nIt would be possible to load a shader under different caps than it was initially compiled with but there are many parameters of the shader that could change between saving/loading such as if an extension was available or max varyings.  We may have to serialize some hash of the caps to verify they haven\u0027t changed and verify all the counts for varyings/textures/samplers/etc are within the caps to protect ourselves.",
      "parentUuid": "50ef57ff_13feae77",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "901c6ffc_3deddb94",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-18T14:22:58Z",
      "side": 1,
      "message": "What I meant by saying that we shouldn\u0027t rely entirely on Chrome\u0027s shader cache is that Chrome isn\u0027t the only thing using ANGLE, so we can\u0027t assume that this is entirely handled outside of our implementation. The spec states that loading \"may fail\" if the hardware or software config has changed since the binary was compiled-- if we\u0027re not already handling that gracefully, shouldn\u0027t we? What currently happens if a non-Chrome app, compiles a binary with, say, the DX11 Renderer, but then tries to load it with the DX9 one? Or compiles with a discrete GPU, and then loads it later with an integrated one? Do we already have a way to fail out?",
      "parentUuid": "50a117b9_c75bcd2e",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10307f7d_99f2ff00",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-18T14:28:18Z",
      "side": 1,
      "message": "Yea, we certainly need to handle it better, there isn\u0027t any protection in the program binary load/save for limits, renderers or GPUs changing.",
      "parentUuid": "901c6ffc_3deddb94",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3042e3dc_5906a3af",
        "filename": "src/libGLESv2/ProgramBinary.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1162,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-18T14:32:44Z",
      "side": 1,
      "message": "I\u0027ll open an issue for it; I can be OK with this in the meantime as it doesn\u0027t represent a regression.",
      "parentUuid": "10307f7d_99f2ff00",
      "range": {
        "startLine": 1162,
        "startChar": 0,
        "endLine": 1162,
        "endChar": 71
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9099cf85_f84b293b",
        "filename": "src/libGLESv2/ProgramBinary.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-12T20:06:59Z",
      "side": 1,
      "message": "It feels really strange to be passing container classes around by pointers. Did we run into this issue before? It feels like a conversation we\u0027ve already had recently, but this miiiiight be an acceptable case for non-const references. (Although for all I know I thought the opposite last time...)",
      "range": {
        "startLine": 227,
        "startChar": 31,
        "endLine": 227,
        "endChar": 61
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30a663d4_0211acba",
        "filename": "src/libGLESv2/ProgramBinary.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-16T21:03:09Z",
      "side": 1,
      "message": "We\u0027ve done it in a couple places before.  You\u0027ve gone and open the flood gates now :D\n\nDone.",
      "parentUuid": "9099cf85_f84b293b",
      "range": {
        "startLine": 227,
        "startChar": 31,
        "endLine": 227,
        "endChar": 61
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70ea9bf0_1738dc51",
        "filename": "src/libGLESv2/ProgramBinary.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-17T15:46:40Z",
      "side": 1,
      "message": "Are there analogous places where we\u0027re doing it via pointer? I also don\u0027t want to fragment style, and I don\u0027t want to open the floodgates without consensus, so it would be good for others to weigh in here on preference.",
      "parentUuid": "30a663d4_0211acba",
      "range": {
        "startLine": 227,
        "startChar": 31,
        "endLine": 227,
        "endChar": 61
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7021bb30_3932cf25",
        "filename": "src/libGLESv2/ProgramBinary.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-09-18T14:24:47Z",
      "side": 1,
      "message": "Also-- added Jamie \u0026 Nicolas to bring their attention to this open question to everyone.",
      "parentUuid": "70ea9bf0_1738dc51",
      "range": {
        "startLine": 227,
        "startChar": 31,
        "endLine": 227,
        "endChar": 61
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3042e3dc_742cce83",
        "filename": "src/libGLESv2/ProgramBinary.h",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-09-18T16:27:51Z",
      "side": 1,
      "message": "InsertD3DFormatInfo() is an existing example of passing in an STL container that\u0027s going to be modified, by pointer. That said I\u0027m perfectly OK with non-const references, contrary to the Google style guidelines. They advise against non-const references due to potential confusion about side-effects of the function. Personally I don\u0027t pointers make it a whole lot clearer, and it kind of forces you to always have to check for NULL every time you pass them into any function, which references should not require. ANGLE is not the average C++ application, and we all understand references really well.\n\nI do believe that adding \u0027out\u0027 or \u0027output\u0027 to the parameter name, and having it as either the first or last parameter, helps avoid confusion.",
      "parentUuid": "7021bb30_3932cf25",
      "range": {
        "startLine": 227,
        "startChar": 31,
        "endLine": 227,
        "endChar": 61
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0f7b398_cbbaf5a2",
        "filename": "src/libGLESv2/ResourceManager.cpp",
        "patchSetId": 6
      },
      "lineNbr": 369,
      "author": {
        "id": 1111944
      },
      "writtenOn": "2014-09-09T19:21:00Z",
      "side": 1,
      "message": "Big fan of using the standard enums here!",
      "range": {
        "startLine": 369,
        "startChar": 61,
        "endLine": 369,
        "endChar": 67
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b04973a6_ed28a770",
        "filename": "src/libGLESv2/ResourceManager.h",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1111944
      },
      "writtenOn": "2014-09-09T19:21:00Z",
      "side": 1,
      "message": "If you make any revisions to this CL, mind taking out this bit of whitespace while you\u0027re there? Thanks!",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 4
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10ab1f9f_e14fe07d",
        "filename": "src/libGLESv2/ResourceManager.h",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-16T21:03:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b04973a6_ed28a770",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 4
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b04973a6_90f2d879",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 337,
      "author": {
        "id": 1111944
      },
      "writtenOn": "2014-09-09T19:21:00Z",
      "side": 1,
      "message": "Same here. Please clean up this unrelated whitespace if you update the CL.",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 337,
        "endChar": 4
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30a663d4_02e88c5a",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 6
      },
      "lineNbr": 337,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-09-16T21:03:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b04973a6_90f2d879",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 337,
        "endChar": 4
      },
      "revId": "6e46fbea49ae69f98f8dac7302d69e15a3004452",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}