{
  "comments": [
    {
      "key": {
        "uuid": "328df904_42f5401d",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T14:31:18Z",
      "side": 1,
      "message": "You can avoid some code duplication. Unfortunately, `using Serial::operator\u003d\u003d` doesn\u0027t work, otherwise it would have become much simpler (also there\u0027s ASSERT here, so maybe it\u0027s good that it\u0027s overloaded):\n\n    class Type##Serial final : protected Serial\n    {\n    public:\n        Type##Serial() {}\n        Type##Serial(uint64_t serial) : Serial(serial) {}\n\n        using Serial::getValue;\n        using Serial::valid;\n\n        constexpr bool operator\u003d\u003d(const Type##Serial \u0026other) const\n        {\n            ASSERT(mValue !\u003d kInvalid);\n            return mValue \u003d\u003d other.mValue;\n        }\n        constexpr bool operator!\u003d(const Type##Serial \u0026other) const\n        {\n            return !(*this \u003d\u003d other);\n        }\n    };\n\nRequires that `Serial` is not `final` and private stuff are `protected` instead. Also:\n\n- Used kInvalid instead of 0 in the ASSERT.\n- Kept serial 64-bit.\n- Could we ASSERT that other.mValue is also valid?",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 136,
        "endChar": 9
      },
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51fabdf1_95444c04",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-13T16:27:10Z",
      "side": 1,
      "message": "I changed to 32 uint32_t because the texture descriptor cache is forcing to 32 bit for performance reasons anyway. This has nothing to do with QueueSerial which is 64 bit and could exceed UINT32_MAX. I would not expect the number of objects exceed UINT32_MAX. Since we are actually relying on it been 32 bit so no point to make it 64 bit in the first place.\n\nMy intention is to make it not tie to QueueSerial as much as possible to reduce confusion. Given these two version does not have much line copunt differences, I incline to keep what I have.\n\nI will fix the ASSERT part.",
      "parentUuid": "328df904_42f5401d",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 136,
        "endChar": 9
      },
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beda1d07_b3491d7b",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 136,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T18:20:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "51fabdf1_95444c04",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 136,
        "endChar": 9
      },
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20cac4bf_dcb3f5c1",
        "filename": "src/libANGLE/renderer/vulkan/DisplayVk.h",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T14:31:18Z",
      "side": 1,
      "message": "uint64_t in accordance to inheriting Type##Serial from Serial",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 12
      },
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8164cb05_788a320a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 834,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T14:31:18Z",
      "side": 1,
      "message": "Looks like this is for a future CL. It could be moved to that CL for the context to be apparent.",
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32ca86a7_f2605169",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 834,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-13T16:41:30Z",
      "side": 1,
      "message": "This actually was originally the whole reason to have this CL, but end up doing more to convert other object serial to have its own type as well to make it consistent. I tried to move this to another CL but worried touching too much lines of code here in both CLs, not really worth it at this point of time.",
      "parentUuid": "8164cb05_788a320a",
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb958e05_0cdb003d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 10
      },
      "lineNbr": 834,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-13T18:20:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32ca86a7_f2605169",
      "revId": "fa6c9b37dce4585fc8e2507fd6cc2762e134a697",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}