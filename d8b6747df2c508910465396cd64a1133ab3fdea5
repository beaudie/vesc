{
  "comments": [
    {
      "key": {
        "uuid": "30ec67f9_d19229ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-16T21:25:13Z",
      "side": 1,
      "message": "PTAL",
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "659807c5_5e2ea8b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-16T22:02:04Z",
      "side": 1,
      "message": "Also curious what if program gets deleted, does PPO observer automatically removed?",
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e943f19_3a238f44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-16T23:17:02Z",
      "side": 1,
      "message": "When a user calls glUseProgramStages() to bind a Program to a PPO, the PPO increments the ref count for the Program:\n\n    void ProgramPipelineState::useProgramStage(const Context *context,\n                                               const ShaderType shaderType,\n                                               Program *shaderProgram)\n    {\n    ...\n        if (shaderProgram \u0026\u0026 (shaderProgram-\u003eid().value !\u003d 0) \u0026\u0026\n            shaderProgram-\u003egetExecutable().hasLinkedShaderStage(shaderType))\n        {\n            mPrograms[shaderType] \u003d shaderProgram;\n            shaderProgram-\u003eaddRef();           \u003c\u003c--- here\n        }\n\nLater, when the user calls glDeleteProgram(), ANGLE won\u0027t actually delete the program internally since the PPO has a reference too it:\n\n    void ShaderProgramManager::deleteObject(const Context *context,\n                                            ResourceMap\u003cObjectType, IDType\u003e *objectMap,\n                                            IDType id)\n    {\n...\n        if (object-\u003egetRefCount() \u003d\u003d 0)  \u003c\u003c--- this guy is non-zero\n        {\n            mHandleAllocator.release(id.value);\n            object-\u003eonDestroy(context);\n            objectMap-\u003eerase(id, \u0026object);\n        }\n        else\n        {\n            object-\u003eflagForDeletion();  \u003c\u003c--- so it\u0027s just flagged\n        }\n    }\n\nThe Program will be deleted once the ref count goes to zero, either by binding a new Program to the PPO or deleting the PPO(s) itself.",
      "parentUuid": "659807c5_5e2ea8b2",
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d29009e7_bbaaddd6",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-16T22:02:04Z",
      "side": 1,
      "message": "This can be gl::ShaderMap, right?",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d8d124a_be99a346",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-16T23:17:02Z",
      "side": 1,
      "message": "Yeah, it should be able to.   All of the uses of lists of ObserverBinding are in vectors though, so I just followed those examples.   I\u0027m fine either, so let me know if you\u0027d like it converted to a ShaderMap.",
      "parentUuid": "d29009e7_bbaaddd6",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b546f501_66025b90",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-07-16T23:58:16Z",
      "side": 1,
      "message": "My understanding is that if possible ShaderMap is the preferred choice since it is fixed sized array.",
      "parentUuid": "1d8d124a_be99a346",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6ad52f6_1da61ada",
        "filename": "src/libANGLE/ProgramPipeline.h",
        "patchSetId": 4
      },
      "lineNbr": 79,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-17T01:53:39Z",
      "side": 1,
      "message": "Turns out this doesn\u0027t work.\n\nUsing a ShaderMap:\n\n    ShaderMap\u003cangle::ObserverBinding\u003e mProgramObserverBindings;\n\nGives the following compile error:\n\n    ../../src/libANGLE/ProgramPipeline.cpp:30:23: error: call to implicitly-deleted default constructor of \u0027ShaderMap\u003cangle::ObserverBinding\u003e\u0027 (aka \u0027PackedEnumMap\u003cgl::ShaderType, angle::ObserverBinding\u003e\u0027)\n    ProgramPipelineState::ProgramPipelineState()\n                          ^\n    ../../src/common/PackedEnums.h:79:15: note: explicitly defaulted function was implicitly deleted here\n        constexpr PackedEnumMap() \u003d default;\n                  ^\n    ../../src/common/PackedEnums.h:160:13: note: default constructor of \u0027PackedEnumMap\u003cgl::ShaderType, angle::ObserverBinding, 4\u003e\u0027 is implicitly deleted because field \u0027mPrivateData\u0027 has a deleted default constructor\n        Storage mPrivateData;\n                ^\n    ../../build/linux/debian_sid_amd64-sysroot/usr/lib/gcc/x86_64-linux-gnu/7/../../../../include/c++/7/debug/array:60:56: note: default constructor of \u0027array\u003cangle::ObserverBinding, 4\u003e\u0027 is implicitly deleted because field \u0027_M_elems\u0027 has no default constructor\n          typename _AT_Type::_Type                         _M_elems;\n                                                           ^\n    1 error generated.\n\nThat explains why everyone is using a vector: so they can emplace_back() using the ObserverBinding(ObserverInterface *observer, SubjectIndex index) constructor.",
      "parentUuid": "b546f501_66025b90",
      "range": {
        "startLine": 79,
        "startChar": 4,
        "endLine": 79,
        "endChar": 15
      },
      "revId": "d8b6747df2c508910465396cd64a1133ab3fdea5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}