{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5d03a94_ae4a49d8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-01T18:26:30Z",
      "side": 1,
      "message": "I was thinking doing the actual conversion at TextureVk::getBufferViewAndRecordUse() around line 3206.  I am not sure if syncState will get called when buffer data changed (you can verify).",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2b831b6_c85ca9c6",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-01T21:56:39Z",
      "side": 1,
      "message": "Ah I see. So I tried adding `glBufferSubData()` and that works for the _OpenGL test but _Vulkan doesn\u0027t see the update (neither syncState nor getBufferViewAndRecordUse is called). I think this is where we\u0027re hitting the descriptor cache issue that Shabi pointed out earlier. We hit this path:\nhttps://crsrc.org/c/third_party/angle/src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp;drc\u003d868b63ab48420c3101447cdf0af1c5e849b531a6;l\u003d1614\nso we don\u0027t call updateFullActiveTextures-\u003egetBufferViewAndRecordUse.\n\nMaybe this is because the descriptor cache contains the conversion buffer and that doesn\u0027t get updated before we hit the cache? So maybe this dirty check needs to be done even further out somewhere?",
      "parentUuid": "a5d03a94_ae4a49d8",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9798d552_6874ba6a",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-01T22:44:57Z",
      "side": 1,
      "message": "Good finding. I think TextureVk is missing content observing of buffer changes. You need to add something like what vertex array was doing. See how mContentsObservers is used. https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/renderer/vulkan/VertexArrayVk.cpp#681\n\nLooks like texture already observing buffer changes, but only for buffer size change? See `angle::ObserverBinding mBufferObserver;` I think you want to study these two observers how they worked and some how make it work.",
      "parentUuid": "e2b831b6_c85ca9c6",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22bd4966_2ef09f06",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-05-01T22:47:29Z",
      "side": 1,
      "message": "(BTW, with this new finding, I am not sure getBufferViewAndRecordUse is still the right place to do conversion. Once you figure out how the texture gets notified for buffer change, we can see where is easy place to do conversion, it could be syncState is better place).",
      "parentUuid": "9798d552_6874ba6a",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e78cdec5_1dc21851",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-04T13:39:06Z",
      "side": 1,
      "message": "mBufferObserver doesn\u0027t observe content changes, right?\nmContentsObservers are tied to VertexArray https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/angle/src/libANGLE/Buffer.h;drc\u003de0e0d24aaa54727dc0a8bc4b159ccdf80d3f5d8d;l\u003d75\n\nAre you suggesting to generalize this to make it so that TextureVk can receive onBufferContentsChange similarly to VertexArray?",
      "parentUuid": "22bd4966_2ef09f06",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67d8ac4a_f58e8fb8",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-04T13:43:15Z",
      "side": 1,
      "message": "I am not sure I\u0027d be able to implement that correctly actually (as buffer bindings change etc). Maybe there is an easier way, like somehow bypassing the descriptor set cache for these buffers as Shabi was suggesting? This would be less efficient of course, but this has no users currently so easier is probably better.",
      "parentUuid": "e78cdec5_1dc21851",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1928832_2c8faf63",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-04T14:40:53Z",
      "side": 1,
      "message": "All this is why I was suggesting just throwing the buffer right away ;)\n\nHooking up the content change observer shouldn\u0027t be difficult, just duplicate what\u0027s there for size change?",
      "parentUuid": "67d8ac4a_f58e8fb8",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7af2d3cc_13899878",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-04T14:42:12Z",
      "side": 1,
      "message": "Content change observer is currently tied to VertexArray: https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/angle/src/libANGLE/Buffer.h;drc\u003de0e0d24aaa54727dc0a8bc4b159ccdf80d3f5d8d;l\u003d75",
      "parentUuid": "b1928832_2c8faf63",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef2c3d66_2cef0621",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 2899,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-05-04T14:46:59Z",
      "side": 1,
      "message": "That can always be duplicated.\n\nAlternatively, is it easy to send the conversion buffer (or even all conversion buffers of the BufferVk) for garbage collection somewhere around this code?",
      "parentUuid": "7af2d3cc_13899878",
      "range": {
        "startLine": 2890,
        "startChar": 12,
        "endLine": 2899,
        "endChar": 13
      },
      "revId": "c64a410816c6f7558a692dd7097b236b77a5ab8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}