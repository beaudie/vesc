{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "be33616f_c532efd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:06Z",
      "side": 1,
      "message": "re-lgtm.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82859699_ef4400e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:17Z",
      "side": 1,
      "message": "Waiting for Shabi\u0027s sign off.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac67e5ce_45cd3039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "Almost there!",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2ca9fa_b823104d",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 833,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "Somebody must be calling `mBuffer-\u003eretainReadWrite()` in this path, right? If `src \u003d\u003d mBuffer`, that would automatically take care of things and this code could be reverted to `src-\u003eretainReadOnly()`. Please verify that `mBuffer-\u003eretainReadWrite()` is actually called somewhere (if it isn\u0027t, that\u0027s a separate bug).",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8abee2_963ab2ac",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 16
      },
      "lineNbr": 247,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:06Z",
      "side": 1,
      "message": "nit: mReadOnlyUse (I was suggesting mReadUse and mWriteUse but this is fine too)",
      "range": {
        "startLine": 247,
        "startChar": 22,
        "endLine": 247,
        "endChar": 31
      },
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4cbd1b5_b1886832",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "This should be:\n\n    if (isImage)\n        buffer.retainReadWrite();\n    else\n        buffer.retainReadOnly();\n\nThe symptom of the bug should be that if a compute shader writes to the buffer through an imageBuffer, then you map it and update, it will race with the compute shader because you won\u0027t be ghosting it. Would you mind please adding a regression test for that too?",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396e862a_8a563790",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3653,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "This should update both mReadOnlyUse and mReadWriteUse!\n\nRegression test could probably be something like: Use WithAllocateNonZeroMemory on the test, then create a buffer (and make sure this function is called), then delete the buffer, call glFlush() and observe a Vulkan validation error regarding use-after-destroy.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}