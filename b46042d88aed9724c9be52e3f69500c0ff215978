{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "be33616f_c532efd1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:06Z",
      "side": 1,
      "message": "re-lgtm.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82859699_ef4400e3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:17Z",
      "side": 1,
      "message": "Waiting for Shabi\u0027s sign off.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac67e5ce_45cd3039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 16
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "Almost there!",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2ca9fa_b823104d",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 833,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "Somebody must be calling `mBuffer-\u003eretainReadWrite()` in this path, right? If `src \u003d\u003d mBuffer`, that would automatically take care of things and this code could be reverted to `src-\u003eretainReadOnly()`. Please verify that `mBuffer-\u003eretainReadWrite()` is actually called somewhere (if it isn\u0027t, that\u0027s a separate bug).",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67b1baa5_68b64599",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 833,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-17T03:48:56Z",
      "side": 1,
      "message": "CQ passes with this reverted back to retainReadOnly().\n\nHowever, while the \u0027src\u0027 buffer may have had retainReadWrite() called already, I don\u0027t think this is entirely correct.   Instead, I think what we want is to move these retain calls down to the copyFromBuffer() call:\n\n    if (!copyRegions.empty())\n    {\n        src-\u003eretainReadOnly(\u0026contextVk-\u003egetResourceUseList());\n        mBuffer-\u003eretainReadWrite(\u0026contextVk-\u003egetResourceUseList());\n        ANGLE_TRY(mBuffer-\u003ecopyFromBuffer(contextVk, src, static_cast\u003cuint32_t\u003e(copyRegions.size()),\n                                          copyRegions.data()));\n    }\n    \nThe acquireBufferHelper() call will create a new buffer, so we need to call retainReadWrite() on it since it cannot have been retained before now (since it didn\u0027t exist until now).\n\nThoughts?",
      "parentUuid": "8f2ca9fa_b823104d",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11194f6f_e5bb7cdc",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 833,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T04:30:45Z",
      "side": 1,
      "message": "You can actually just delete the `retain*` calls here altogether. `BufferHelper::copyFromBuffer` already does this:\n\n    vk::CommandBufferAccess access;\n    if (srcBuffer-\u003egetBufferSerial() \u003d\u003d getBufferSerial())\n    {\n        access.onBufferSelfCopy(this);\n    }\n    else\n    {\n        access.onBufferTransferRead(srcBuffer);\n        access.onBufferTransferWrite(this);\n    }\n\n`access` then gets passed to `ContextVk::onResourceAccess` which in turn calls `bufferRead()` and `bufferWrite()` appropriately.",
      "parentUuid": "67b1baa5_68b64599",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc19b7c3_a01df09e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 833,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-20T23:36:43Z",
      "side": 1,
      "message": "Oh, good find.   Even better.",
      "parentUuid": "11194f6f_e5bb7cdc",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d8abee2_963ab2ac",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 16
      },
      "lineNbr": 247,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-16T13:25:06Z",
      "side": 1,
      "message": "nit: mReadOnlyUse (I was suggesting mReadUse and mWriteUse but this is fine too)",
      "range": {
        "startLine": 247,
        "startChar": 22,
        "endLine": 247,
        "endChar": 31
      },
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b03837a9_d33fc132",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 16
      },
      "lineNbr": 247,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-17T03:48:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d8abee2_963ab2ac",
      "range": {
        "startLine": 247,
        "startChar": 22,
        "endLine": 247,
        "endChar": 31
      },
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4cbd1b5_b1886832",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "This should be:\n\n    if (isImage)\n        buffer.retainReadWrite();\n    else\n        buffer.retainReadOnly();\n\nThe symptom of the bug should be that if a compute shader writes to the buffer through an imageBuffer, then you map it and update, it will race with the compute shader because you won\u0027t be ghosting it. Would you mind please adding a regression test for that too?",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65cadf90_da0b09d0",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-17T03:48:56Z",
      "side": 1,
      "message": "I pulled in your change and added a test.\n\nI added the test ComputeShaderTest::BufferImageBufferMapWrite(), which is based off of BufferImageBuffer().   Unfortunately, it doesn\u0027t hit any errors, with or without your fix.\n\nLet me know if there are any changes to the test you\u0027d like.",
      "parentUuid": "c4cbd1b5_b1886832",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7c18476_81766952",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T04:30:45Z",
      "side": 1,
      "message": "Well your test is not using an imageBuffer, so this function with isImage\u003dtrue is not being exercised.\n\nAlso probably you\u0027d see the failure once the ghosting change is also in effect.",
      "parentUuid": "65cadf90_da0b09d0",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3df9529d_85d9f260",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-20T23:36:43Z",
      "side": 1,
      "message": "I\u0027ve updated the test and verified it\u0027s going through the isImage\u003dtrue path.   I\u0027ve tried it with the ghosting change (with and without the fix), and it doesn\u0027t generate an error.",
      "parentUuid": "c7c18476_81766952",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "609eef98_7fd90071",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T01:28:24Z",
      "side": 1,
      "message": "Ok, I\u0027ll have to take a look. The fix is fine, and the test with a cursory look, so feel free to land.",
      "parentUuid": "3df9529d_85d9f260",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cf36e88_33502a7c",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T16:24:51Z",
      "side": 1,
      "message": "Ok I diagnosed this. The reason it works is that ContextVk::updateActiveImages is already calling bufferWrite() on this buffer, so this retain (for the isImage case) is actually redundant.\n\nThere\u0027s a discrepancy here that ContextVk::updateActiveTextures doesn\u0027t call bufferRead(), and I don\u0027t know why at the moment. There is probably a bug there. Until that is fixed, you should be able to safely change this to:\n\n    if (!isImage)\n    {\n        // Image buffers are already retained by ContextVk::updateActiveImages\n        buffer.retainReadOnly(\u0026resourceUseList);\n    }\n\nWhen that bug is fixed, this if can be entirely removed. Looking again, you can tell this is the wrong spot to retain because this is called when updating a descriptor set, and it may very well not be called for many frames if the desc/set doesn\u0027t change.",
      "parentUuid": "609eef98_7fd90071",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eab65570_c94e4076",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-21T16:31:52Z",
      "side": 1,
      "message": "bufferRead is called in handleDirtyTexturesImpl. updateActiveTextures is \"lazier\" so we need to ensure the resource uses are marked in ContextVk::setupDraw, not in ContextVk::syncState.",
      "parentUuid": "6cf36e88_33502a7c",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a68fca6_1d52fcbe",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T16:34:42Z",
      "side": 1,
      "message": "Ah cool, then you should be able to remove these retains here Tim.",
      "parentUuid": "eab65570_c94e4076",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88dfe184_72370341",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-21T17:19:57Z",
      "side": 1,
      "message": "\u003e Ah cool, then you should be able to remove these retains here Tim.\n\nDone.\n\n\u003e Looking again, you can tell this is the wrong spot to retain because this is called when updating a descriptor set, and it may very well not be called for many frames if the desc/set doesn\u0027t change.\n\nBased on this discussion, it looks like the retain of the buffer view here can be removed also, since there are also retainBufferViews() calls in both handleDirtyTexturesImpl() and updateActiveTextures() (corresponding to the buffer retain calls).   Does that sound right?",
      "parentUuid": "6a68fca6_1d52fcbe",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3526b88f_188670b1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T18:16:17Z",
      "side": 1,
      "message": "s/updateActiveTextures/updateActiveImages\n\nThat sounds right to me!",
      "parentUuid": "88dfe184_72370341",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0305efc5_014d7717",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 16
      },
      "lineNbr": 2918,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-21T18:27:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3526b88f_188670b1",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "396e862a_8a563790",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3653,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-16T14:48:09Z",
      "side": 1,
      "message": "This should update both mReadOnlyUse and mReadWriteUse!\n\nRegression test could probably be something like: Use WithAllocateNonZeroMemory on the test, then create a buffer (and make sure this function is called), then delete the buffer, call glFlush() and observe a Vulkan validation error regarding use-after-destroy.",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d0fdfd4_9bf20f01",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3653,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-17T03:48:56Z",
      "side": 1,
      "message": "I\u0027ve made the update, since it\u0027s the correct thing to do.\n\nHowever, nothing in ANGLE\u0027s CQ uses this function:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/3167015\n\nI\u0027m not sure how expected this is, since it seems a few things have to line up:\n  1. allocateNonZeroMemory.enabled\n  2. (mMemoryPropertyFlags \u0026 VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) \u003d\u003d 0 \n  3. (requestedCreateInfo.usage \u0026 VK_BUFFER_USAGE_TRANSFER_DST_BIT) !\u003d 0\n\nSince it\u0027s not currently tested, and I\u0027m not sure how involved it will be to get into this path, I\u0027m going to open a bug to add testing in this area (unless you can think of a quick way to get into here).",
      "parentUuid": "396e862a_8a563790",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381ea33d_5150cd14",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3653,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T04:30:45Z",
      "side": 1,
      "message": "WithInitializeNonZeroMemory should take care of 1. For 2, I don\u0027t know I have to check. 3 should always be satisfied.\n\nOdd that no test uses this though :-S",
      "parentUuid": "0d0fdfd4_9bf20f01",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c8301a3_ef7d2ae8",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 16
      },
      "lineNbr": 3653,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-20T23:36:43Z",
      "side": 1,
      "message": "I opened a bug to add some testing for BufferHelper::initializeNonZeroMemory():\n\nhttps://bugs.chromium.org/p/angleproject/issues/detail?id\u003d6420",
      "parentUuid": "381ea33d_5150cd14",
      "revId": "b46042d88aed9724c9be52e3f69500c0ff215978",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}