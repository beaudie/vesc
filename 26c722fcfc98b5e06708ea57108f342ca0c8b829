{
  "comments": [
    {
      "key": {
        "uuid": "e526b5a5_55be4d14",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "(`git cl format` incoming)\n\nSee VertexArrayVk.cpp.",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "643e458b_a9a4e70d",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "Can you also include a bug link, and maybe file a separate issue for this?",
      "parentUuid": "e526b5a5_55be4d14",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b09894a_1b42c55d",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 28
      },
      "lineNbr": 55,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "643e458b_a9a4e70d",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3505190_d3949c61",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 389,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "This is interesting. Usually graphics APIs are opinionated about endianness. Did you find this was necessary on ARM devices like the Android phones?",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 389,
        "endChar": 72
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cf87208_c0ae46c7",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 389,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Since I\u0027m aliasing the memory, I think it\u0027s a necessity, but I haven\u0027t actually tried to see what fails if I remove this. I\u0027ll give it a shot in a test CL and let you know.",
      "parentUuid": "a3505190_d3949c61",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 389,
        "endChar": 72
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "037b1284_a9efea40",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 389,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T04:05:00Z",
      "side": 1,
      "message": "It turns out that android configures ARM to run in little-endian, so ConvertVertex_comp::kIsBigEndian is never exercised. I changed this to an assert and removed the flag from the configuration file. I kept the big-endian support in the shader implementation, though so future support would be trivial if necessary.",
      "parentUuid": "4cf87208_c0ae46c7",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 389,
        "endChar": 72
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c485e3b_df7a9036",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 389,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-11T16:53:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "037b1284_a9efea40",
      "range": {
        "startLine": 387,
        "startChar": 0,
        "endLine": 389,
        "endChar": 72
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db9b311_8ced5afe",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "Tempted to turn off clang formatting to keep it like this:\n\n    flags |\u003d srcIsInt \u0026\u0026 destIsInt ? ConvertVertex_comp::kIntToInt\n           : srcIsUint \u0026\u0026 destIsUint ? ConvertVertex_comp::kUintToUint\n           : srcIsInt ? ConvertVertex_comp::kIntToFloat\n           : srcIsUint ? ConvertVertex_comp::kUintToFloat\n           : srcIsSnorm ? ConvertVertex_comp::kSnormToFloat\n           : srcIsUnorm ? ConvertVertex_comp::kUnormToFloat\n           : srcIsFixed ? ConvertVertex_comp::kFixedToFloat\n\t   : ConvertVertex_comp::kFloatToFloat;",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "326784b3_787205e8",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "For formatting, this would be much better done in a helper and not using ?:. e.g.\n\nuint Get\u003cblah\u003eFlags(params.srcFormat,  params.dstFormat) {\n  if (srcIsInt \u0026\u0026 destIsInt)\n    return x;\n  if (srcIsUint \u0026\u0026 destIsUint)\n    return y;\n  ...\n\n}\n\nIt doesn\u0027t look like you use srcIsInt, etc, except in the ASSERT. So you could move the ASSERT into the helper.",
      "parentUuid": "5db9b311_8ced5afe",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c689c95_eb836ea3",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-10T20:23:07Z",
      "side": 1,
      "message": "I want to suggest another approach - define constexpr src x dst matrix populating it with flags and lookup the flag in there. You can also have an invalid value in it and simplify the \"ASSERT(!destIsInt || srcIsInt)\" stuff above.",
      "parentUuid": "326784b3_787205e8",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "106f7802_7866afbe",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "That would be a big table Yuly, I went with `if`s, even though it\u0027s not as efficient as table or succinct as ?: in my opinion.",
      "parentUuid": "0c689c95_eb836ea3",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b90588b5_ed63973f",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-11T16:53:07Z",
      "side": 1,
      "message": "I\u0027m happy with your solution.",
      "parentUuid": "106f7802_7866afbe",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58c1a097_734fb9cb",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 405,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-11T17:21:56Z",
      "side": 1,
      "message": "Wouldn\u0027t that be just 18 entries? Or do you consider that big?",
      "parentUuid": "b90588b5_ed63973f",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a30a052_ac26bfdf",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.h",
        "patchSetId": 28
      },
      "lineNbr": 126,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "can you make a type alias for this (using Blah \u003d angle::Result (...))",
      "range": {
        "startLine": 124,
        "startChar": 14,
        "endLine": 126,
        "endChar": 99
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8b2fdf8_dd9d93ff",
        "filename": "src/libANGLE/renderer/vulkan/DispatchUtilsVk.h",
        "patchSetId": 28
      },
      "lineNbr": 126,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Huh, I tried that originally and had compile errors, though it\u0027s too complicated for the compiler to match, but gave it another shot now and it works. Done.",
      "parentUuid": "6a30a052_ac26bfdf",
      "range": {
        "startLine": 124,
        "startChar": 14,
        "endLine": 126,
        "endChar": 99
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6611ad0_53457992",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 40,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "what\u0027s up with this? didn\u0027t you lower this at one point?",
      "range": {
        "startLine": 40,
        "startChar": 60,
        "endLine": 40,
        "endChar": 67
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe1de2ce_b66cc656",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 40,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "I did it so InterleavedAttributeDataBenchmark wouldn\u0027t complain. I\u0027ll remove the flush() from that test, and put this back to what it was.",
      "parentUuid": "c6611ad0_53457992",
      "range": {
        "startLine": 40,
        "startChar": 60,
        "endLine": 40,
        "endChar": 67
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2b6360d_f97507a9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 798,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:21:54Z",
      "side": 1,
      "message": "@tobin, if you end up testing this CL on different phones, it would be interesting to know which of them are affected by this bug, which you can find by setting this to false and running your application (or better, angle_end2end_tests). FYI, these are the failing tests:\n\nangle_end2end_tests on Android device Nexus 5X (with patch) Run on OS: \u0027Android\u0027\nfailures:\nVertexAttributeTest.UsingDifferentFormatAndSameBuffer/ES2_VULKAN\nAttributeLayoutMemoryIndexed.Test/ES2_VULKAN\nSimpleStateChangeTest.UpdateBufferInUse/ES2_VULKAN\nStateChangeTest.VertexBufferUpdatedAfterDraw/ES2_VULKAN\nVertexAttributeTest.NegativeUsingDifferentFormatAndSameBuffer/ES2_VULKAN\nAttributeLayoutNonIndexed.Test/ES2_VULKAN\nAttributeLayoutBufferIndexed.Test/ES2_VULKAN\nVertexAttributeTest.MixedUsingBufferAndClientMemoryPointer/ES2_VULKAN",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f0ff6d3_6b2772e9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 798,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "You can test Pixel 2 on the bots with some specific testers Yuly added. Also, the work Ian did should at some point allow us to get the SystemInfo and machine name if we want to narrow this to 5x.\n\n(whoops, redundant comment. but left it here)",
      "parentUuid": "e2b6360d_f97507a9",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a167ecc_eac84e53",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 798,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "I tried that in a test CL. All the pixel 2 bots pass (although only the deqp ones seem to be testing Vulkan).\n\nThe question is, how can we verify this on _all_ phones?",
      "parentUuid": "4f0ff6d3_6b2772e9",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fff90734_a950fe60",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 798,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-11T16:53:07Z",
      "side": 1,
      "message": "Well, the set of all Android phones is probably in the thousands. I\u0027d say if it fails on 5x and passes on Pixel 2 it\u0027s almost certainly a 5x bug. If it fails on 5x and passes on Pixel 2 and one other device, it\u0027s probably definitely a 5x bug. We\u0027ll add automated test coverage on more supported devices as time goes on.\n\nBTW There won\u0027t be any bug fixes incoming for the 5x. And likely we won\u0027t deploy ANGLE Vulkan on 5x at any point. And there are plenty of existing bugs. So it\u0027s safe to be quite generous when it comes to ignoring 5x issues.\n\nMaybe let\u0027s try to investigate how to get the device out of the system if it is possible, and leave your workaround enabled for all Android in the meantime. It\u0027s still a huge improvement over the current code.",
      "parentUuid": "2a167ecc_eac84e53",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c229934_e29ad4a4",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 798,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-11T17:21:56Z",
      "side": 1,
      "message": "- I\u0027ve just double checked and Pixel 2 bots run ES2_VULKAN end2end tests. Why do you think they are not?\n- We also have Pixel 1 XL, you can double check on it.\n- Getting rid of N5X is waiting for additional Pixel 2 phones deployment.",
      "parentUuid": "2a167ecc_eac84e53",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "984d047f_58cec29c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1051,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "To be honest, this assert is superficial at this point. We might as well remove it.\n\nAlternatively, why is InterleavedAttributeDataBenchmark doing a flush() after every draw?!",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6487da8b_d183b722",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1051,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "Looks like InterleavedAttributeDataBenchmark was added by MS in 2015. I totally forgot it existed. Please go ahead and remove the flush() in the test.",
      "parentUuid": "984d047f_58cec29c",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12eabeb9_9193248d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 1051,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6487da8b_d183b722",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cc01ae4_2204ca91",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 193,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "nit: convertVertexBufferGPU?",
      "range": {
        "startLine": 193,
        "startChar": 29,
        "endLine": 193,
        "endChar": 48
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6594ee79_b39d1c43",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1cc01ae4_2204ca91",
      "range": {
        "startLine": 193,
        "startChar": 29,
        "endLine": 193,
        "endChar": 48
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6b401ed_283aa25d",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 218,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "nit: renderer",
      "range": {
        "startLine": 218,
        "startChar": 70,
        "endLine": 218,
        "endChar": 94
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd3730e_b2b9bb32",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 218,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6b401ed_283aa25d",
      "range": {
        "startLine": 218,
        "startChar": 70,
        "endLine": 218,
        "endChar": 94
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b27f6a9_66f3e9b6",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "Nexus 5 builds revealed a few bugs with their lack of support for many formats and unusual limits. All those fixed however, I still see failure on a few tests.\n\n- I verified that converted array on GPU is equal to the one on CPU (I read back the results here, performed CPU conversion and asserted that they are within 1e-6 margin)\n- I verified that the graph edges are correct\n- I verified that the commands are executed in the right order with the right barrier\n- I forced skip \u003d 1 on initFallbackBuffer so all platforms (including deqp tests) would exercise the attribute conversion code (which revealed a few bugs too, and fixed), but they are all green at this point.\n- Setting both barrier source and destination access masks to 0x1FFF didn\u0027t help.\n- Setting barrier source stage to Compute (instead of All Commands, in case they forgot to include Compute in that) didn\u0027t help.\n- Only thing that seems to work is to issue a flush.\n\nI\u0027m fairly certain there is a driver issue involved.  Having a memory barrier with all stages and all accesses on both src and dest should have completely isolated the compute and graphic calls, but it looks like it doesn\u0027t.",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "352f4efd_7d51ce8f",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 242,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "Yeah, too bad. Can be a bit hard to \"prove\" there\u0027s no bug but sounds like a driver bug. You can try disabling the workaround and adding the Pixel 2 optional try bots to confirm it\u0027s only the 5x. If it is only the 5x we could look at narrowing the workaround using the machine name.\n\nI did some digging and there were some potential hits for finding the machine name using c++. That way we could get the workaround narrowed in standalone mode. Will need to confirm that though.",
      "parentUuid": "0b27f6a9_66f3e9b6",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "654fbcc4_a5e148be",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 242,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-10T20:23:07Z",
      "side": 1,
      "message": "Also worth trying to see if it maybe works fine without validation layers, as they can mess with buffer contents.",
      "parentUuid": "352f4efd_7d51ce8f",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0cd4e94_cb38e265",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 242,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": "@Jamie, I\u0027ll take a look to see what I can find.\n\n@Yuly, that\u0027s interesting, why would the validation layers change the buffer contents?",
      "parentUuid": "654fbcc4_a5e148be",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eae6f21_ad6f2086",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 242,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2018-12-11T17:21:56Z",
      "side": 1,
      "message": "In my case they were emulating lack of host coherency. Since then I\u0027m suspicious regarding bugs in validation layers affecting memory contents.",
      "parentUuid": "f0cd4e94_cb38e265",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a39428af_e3c9a716",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 417,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "It\u0027s doable, at a cost of reading the source data through multiple reads and stitching the pieces together, but let\u0027s keep that for a future change.",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e76e0f2f_c243f60d",
        "filename": "src/libANGLE/renderer/vulkan/VertexArrayVk.cpp",
        "patchSetId": 28
      },
      "lineNbr": 417,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "a39428af_e3c9a716",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f40dce12_ad3a1869",
        "filename": "src/libANGLE/renderer/vulkan/shaders/gen/ConvertVertex.comp.0000001F.inc",
        "patchSetId": 28
      },
      "lineNbr": 176,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "@yuly, if you are still concerned about angle binary size, it looks like the shader binaries are easily compressible (look at all them zeros!).",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76efd566_791e8ac4",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ConvertVertex.comp",
        "patchSetId": 28
      },
      "lineNbr": 19,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "I love these ASCII diagrams.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 19,
        "endChar": 22
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f6ab385_05ae9c55",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ConvertVertex.comp",
        "patchSetId": 28
      },
      "lineNbr": 19,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-11T03:42:04Z",
      "side": 1,
      "message": ":)",
      "parentUuid": "76efd566_791e8ac4",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 19,
        "endChar": 22
      },
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52070db5_d3c36576",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ConvertVertex.comp",
        "patchSetId": 28
      },
      "lineNbr": 90,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "I have a change with a modification to use a uniform texel buffer here, which optimizes the shader a little bit, but that needs BufferHelper managing multiple views. I decided to leave that for another time.",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca34e25d_3db67060",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ConvertVertex.comp",
        "patchSetId": 28
      },
      "lineNbr": 90,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-10T12:57:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "52070db5_d3c36576",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5c17e01_177ddcf6",
        "filename": "src/tests/gl_tests/VertexAttributeTest.cpp",
        "patchSetId": 28
      },
      "lineNbr": 214,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2018-12-07T13:11:11Z",
      "side": 1,
      "message": "Increases coverage of the conversion code.",
      "revId": "26c722fcfc98b5e06708ea57108f342ca0c8b829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}