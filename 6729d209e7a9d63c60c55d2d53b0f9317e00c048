{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "035605b0_6e4ce536",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-09T22:55:07Z",
      "side": 1,
      "message": "TODO: check that this (and the parent CL) works correctly on Windows (any newlines gotchas?)",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fa33411_eeee0dae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-10T01:51:29Z",
      "side": 1,
      "message": "Thanks for getting rid of this constant source of conflict!",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9628f9e_d1e07c13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T14:49:06Z",
      "side": 1,
      "message": "One thing I didn\u0027t realize until today is that git does some EOL conversions behind the scene, and we have a config for that but it doesn\u0027t seem to apply to all file extensions:\nhttps://crsrc.org/c/third_party/angle/.gitattributes",
      "parentUuid": "035605b0_6e4ce536",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "602c87d7_ccd46174",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-12T15:09:58Z",
      "side": 1,
      "message": "Right. I see\n\n```\n**/shaders/gen/*.inc                       eol\u003dlf\n```\n\nwhich is from my noob-ness. At the time, I didn\u0027t know you can tell python explicitly to use `\\n` for line ending. These days I always add these to `open()`: `encoding\u003d\u0027utf8\u0027, newline\u003d\u0027\\n\u0027`. Then you won\u0027t need git attribs.",
      "parentUuid": "d9628f9e_d1e07c13",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1166e1a_d5c3c298",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T15:12:24Z",
      "side": 1,
      "message": "hmm, looking at what we currently have (Linux checkout):\n\n`% grep -IUrl --color --exclude-dir\u003d.git $(printf \u0027\\r\u0027) src`\n\nshows\n1) `src/libANGLE/renderer/d3d/*`\n2) a couple of .rc and .bat files\n3) Certain files under `src/tests/restricted_traces/`, for example only these few in eve_echoes:\n```\nsrc/tests/restricted_traces/eve_echoes/eve_echoes_context5_011.cpp\nsrc/tests/restricted_traces/eve_echoes/eve_echoes_context5_009.cpp\nsrc/tests/restricted_traces/eve_echoes/eve_echoes_shared.cpp\nsrc/tests/restricted_traces/eve_echoes/eve_echoes_context5_029.cpp\n```\n\nbut otherwise nothing else with `\\r`.. Probably due to clang-format?.. Git seems to default to autocrlf\u003dfalse unless I\u0027m missing something.",
      "parentUuid": "d9628f9e_d1e07c13",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc45fab_3d2e9a39",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-12T15:28:49Z",
      "side": 1,
      "message": "Can\u0027t be clang-format, otherwise `d3d/*` would also not have `\\r`. Can\u0027t be git\u0027s autocrlf either for the same reason. I think we just manually managed to do that. If you look at git history, there are a number of commits with `line ending` in the title.\n\nI don\u0027t know why Jamie didn\u0027t just put `*  eol\u003dlf` in `.gitattributes`",
      "parentUuid": "d1166e1a_d5c3c298",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d6b06f3_5da15cf1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T15:35:23Z",
      "side": 1,
      "message": "Hmm, right. clang-format seems to need a LineEnding setting to do that but we don\u0027t set it. Don\u0027t feel like messing with global git settings. I think I\u0027ll just sprinkle `.replace(\u0027\\r\\n\u0027, \u0027\\n\u0027)` in scripts.",
      "parentUuid": "2dc45fab_3d2e9a39",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91808b67_69fbdd89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T15:36:31Z",
      "side": 1,
      "message": "(or `newline\u003d\u0027\\n\u0027` for this CL)",
      "parentUuid": "1d6b06f3_5da15cf1",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2697db54_909c0717",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T16:55:47Z",
      "side": 1,
      "message": "Damn, just checked on Windows and this causes these warnings:\n```\nwarning: in the working copy of \u0027include/platform/autogen/FeaturesD3D_autogen.h\u0027, LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of \u0027include/platform/autogen/FeaturesGL_autogen.h\u0027, LF will be replaced by CRLF the next time Git touches it\n...\n```\n\nI suppose CR/CRLF tricks are enabled in Git by default.\n\nI think I\u0027ll have to let git do whatever it wants and just ignore line ending diffs in scripts. Note how when calculating hashes, for instance, we\u0027re opening the file in \"r\" mode:\nhttps://crsrc.org/c/third_party/angle/scripts/run_code_generation.py;drc\u003de7a9275be22d28c74049d397a87183d47a1d188f;l\u003d140\nwhich I believe translates \\r\\n -\u003e \\n on Windows, so we end up with the same hash despite files having different contents \u003e_\u003c",
      "parentUuid": "91808b67_69fbdd89",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38275e86_4feb2c0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-12T18:11:58Z",
      "side": 1,
      "message": "Are you missing `core.autocrlf \u003d false` in your `.gitconfig`?",
      "parentUuid": "2697db54_909c0717",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72346d6c_eeb8afe5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-06-12T18:20:54Z",
      "side": 1,
      "message": "Yes. Our docs don\u0027t even mention it. depot_tools setup does but it\u0027s easy to miss. If everyone is expected to have `core.autocrlf \u003d false` then yes, I can set newline\u003d\\n (but I think before this CL we\u0027d get \\r\\n)",
      "parentUuid": "38275e86_4feb2c0e",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21de9ba0_397c24b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-12T19:46:16Z",
      "side": 1,
      "message": "Yes I believe it\u0027s expected that we all have `core.autocrlf \u003d false`, I also recall having seen that as part of depot_tools setup. Feel free to make that clearer in our own docs though.",
      "parentUuid": "72346d6c_eeb8afe5",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88c426b6_36d22c31",
        "filename": "include/platform/gen_features.py",
        "patchSetId": 2
      },
      "lineNbr": 160,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-06-10T01:51:29Z",
      "side": 1,
      "message": "Please add a comment that documents why this option exists and what it does",
      "revId": "6729d209e7a9d63c60c55d2d53b0f9317e00c048",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}