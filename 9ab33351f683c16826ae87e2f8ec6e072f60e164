{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4655f633_b37fa9a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-10-20T21:59:29Z",
      "side": 1,
      "message": "This approach lgtm overall - an allowlist seems like the only scalable approach. A couple of minor comments / questions though.",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "898b30ba_64261dc5",
        "filename": "extensions/ANGLE_shader_pixel_local_storage.txt",
        "patchSetId": 9
      },
      "lineNbr": 359,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-10-20T21:59:29Z",
      "side": 1,
      "message": "It seems a little weird that ClearBuffer* is allowed but Clear* isn\u0027t. Is there a strong reason to disallow Clear? (I do see that this restriction required a large refactor of the tests below.)",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0cb88c4_7665afd7",
        "filename": "extensions/ANGLE_shader_pixel_local_storage.txt",
        "patchSetId": 9
      },
      "lineNbr": 359,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-20T23:46:36Z",
      "side": 1,
      "message": "Yes, because `glClear(GL_COLOR_BUFFER_BIT)` clears every active draw buffer, which may or may not include your PLS planes, depending on whether they are implemented as framebuffer attachments. So the only way to get consistent behavior across every device is to direct the app to `glClearBuffer*` instead.\n\nAlso note that we still need to add validation so `glClearBuffer` can\u0027t wipe out your PLS planes.\n\nWe could technically allow `glClear(GL_STENCIL_BUFFFER_BIT | GL_DEPTH_BUFFER_BIT)`, but I think it\u0027s cleaner to just direct the app to `glClearBuffer*` for depth/stencil as well.",
      "parentUuid": "898b30ba_64261dc5",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ba8055d_b4375b90",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3015,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-10-20T21:59:29Z",
      "side": 1,
      "message": "Could a couple of negative tests be added, attempting to call disallowed functions while PLS is active?",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62dbbcb8_bfbbddd4",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3015,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-20T23:46:36Z",
      "side": 1,
      "message": "Yes, I just wanted to make sure we were all on board with this approach before investing the time in writing the negative tests.\n\nIt sounds like we are now, so I\u0027ll do that!\n\nHow involved do you think they should be? We could exhaustively test every entry point, but would that be overkill?",
      "parentUuid": "6ba8055d_b4375b90",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd27c077_317f0448",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3015,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-10-21T00:50:34Z",
      "side": 1,
      "message": "That\u0027s overkill IMO. Testing a couple of common disallowed entry points seems fine to me.\n\nNote I don\u0027t speak for the others, and hope they\u0027ll speak up if they have any objections to the overall technique. We made good ground in today\u0027s WebGL WG meeting deciding that if we just forbid memoryless attachments in WebGL, that browsers can end/begin PLS in order to do internal operations forbidden while PLS is active.",
      "parentUuid": "62dbbcb8_bfbbddd4",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea557487_f0ace3fe",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3015,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-10-21T02:44:37Z",
      "side": 1,
      "message": "Would be a pity to lose memoryless attachments. Could that be perhaps allowed in the future with the (forgive me if I\u0027m referencing the wrong project) DrDc project?\n\nOn testing, TBH I\u0027d take inspiration from our entry point generation scripts and have the negative test be autogenerated. Then you don\u0027t have to manually code that, it would cover all forbidden functions automatically, and will continue automatically to add whatever new functions may be introduced ðŸ˜Š",
      "parentUuid": "dd27c077_317f0448",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19744f37_776c8d7f",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 9
      },
      "lineNbr": 3015,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-10-21T20:14:10Z",
      "side": 1,
      "message": "\u003e Would be a pity to lose memoryless attachments.\n\nIt would, but they are just not compatible with Chrome\u0027s virtual context preemption, and if we don\u0027t preempt PLS, it\u0027s an easy DOS target.\n\nI\u0027m leaning toward adding store ops (like you suggested early on) instead of memoryless planes. That way, if you use a load op of `GL_CLEAR_ANGLE` and a store op of `GL_DONT_CARE`, it will have the same effect as a memoryless plane on preventing memory transactions. The only difference is that the app has to allocate memory for the plane, but that\u0027s fine because we need somewhere to dump it anyway if Chrome has to preempt.\n\nThen a virtual context switch would be easy:\n\n```\nglEndPixelLocalStorageANGLE([GL_KEEP, GL_KEEP, GL_KEEP]);\n\n// Do stuff in the other context.\n// Go back to the original context.\n\nglBeginPixelLocalStorageANGLE([GL_KEEP, GL_KEEP, GL_KEEP]);\n```\n\nAnd the app can still end PLS with `GL_DONT_CARE` to avoid more memory transactions at the end of their stuff.\n\n\u003e  I\u0027d take inspiration from our entry point generation scripts and have the negative test be autogenerated.\n\nWould this look like using `generate_entry_points.py` itself to write out a new file in `src/tests/gl_tests/`, and emit every entrypoint not in the allow list?\n\nWhat would be the practical advantage of an exhaustive list (since it\u0027s generated by the same generator and same allow list), as opposed to just checking enough entrypoints to verify every LOC in the generator script has proper logic?",
      "parentUuid": "ea557487_f0ace3fe",
      "revId": "9ab33351f683c16826ae87e2f8ec6e072f60e164",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}