{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f4af5b6_9921b4ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T16:09:20Z",
      "side": 1,
      "message": "There is an issue with this CL: http://b/232848169#comment11\n\nThe thread that calls eglInitialize then exits which triggers display-\u003eterminate(), but the assumes it can keep using the same display from another thread and crashes trying to use that terminated display.\n\nThe CL says \"on process exit\" in the description but it doesn\u0027t seem to be detecting the process exit correctly and relies on an assumption that turns out to be invalid in some cases like above.\n",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86a486da_b4fc8e4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T16:24:34Z",
      "side": 1,
      "message": "\u003e http://b/232848169#comment11\n\ncant access this\n\n\u003e but the assumes it can keep using the same display from another thread\n\nspec states that a display that has been terminated needs to be initialized before use\n\n\u003e but it doesn\u0027t seem to be detecting the process exit correctly\n\nassuming bionic\u0027s pthread library is correct, process exit is when there are no threads, that issue EGL/GL api calls, left in the process and when the last such thread is terminated (pthread_exit) \"gProcessCleanupRefCount\" value goes to 0. What am i missing?\n\n\u003e and relies on an assumption\n\ncan you specifically state what assumption you are talking about?",
      "parentUuid": "1f4af5b6_9921b4ce",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bde9903_0c43782d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T17:44:02Z",
      "side": 1,
      "message": "\u003e cant access this\nSorry, here are the details from that comment:\n```\nThere are two threads, AAA and BBB:\n\nAAA: V SDL     : Running main function SDL_main from library /data/app/~~UVP3mqpQpmFC9furUQf6AA\u003d\u003d/com.vectorunit.red-7lplkg8KaR8WnfJaOjQ90A\u003d\u003d/lib/arm64/libmain.so\nAAA does not call into ANGLE yet!\n\nBBB: D libEGL  : dlopen_ext from APK (libEGL_angle.so)\nBBB: I ANGLE   : EVENT: eglGetProcAddress(procname \u003d 0x0000007b2ac0b956)\n....\nBBB: I ANGLE   : EVENT: eglInitialize\n...\nBBB exits, triggers cleanup, eglReleaseThread via TLS - but apparently passes the display from eglInitialize to AAA\n\nAAA: now starts using ANGLE:\nAAA: I ANGLE   : EVENT: eglGetError()\nAAA: SDL_main -\u003e VuEngine::init -\u003e SDL_CreateWindow_REAL -\u003e SDL_EGL_LoadLibraryOnly -\u003e eglGetProcAddress -\u003e egl::GetCurrentThread()\n\nbut AAA tries to keep using the same display that was initialized by BBB - AAA didn\u0027t expect that BBB termination would also terminate the display.\n```\n\n\n\u003e spec states that a display that has been terminated needs to be initialized before use\nMakes sense, but that assumes that _the app_ made an `eglTerminate` call to terminate the display, right? This isn\u0027t what\u0027s happening here - `Display::terminate()` is called by `ProcessCleanupCallback` added in this CL, without the app being aware of this happening.\n\n\u003e process exit is when there are no threads, that issue EGL/GL api calls, left in the process and when the last such thread is terminated (pthread_exit) \"gProcessCleanupRefCount\" value goes to 0. What am i missing?\n\nProcess could have a non-GL thread that keeps it alive but start/stop any number of GL threads in any order. If we have N GL threads running at a point in time, it doesn\u0027t imply the process has terminated as it can start a new GL thread and N will go from 0 to 1.",
      "parentUuid": "86a486da_b4fc8e4e",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53fb483_0b7b2d65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T17:46:45Z",
      "side": 1,
      "message": "\u003e it doesn\u0027t imply the process has terminated\nCorrection: *N \u003d\u003d 0* doesn\u0027t imply the process has terminated",
      "parentUuid": "5bde9903_0c43782d",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d0f56d0_1ed4a929",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T19:23:22Z",
      "side": 1,
      "message": "\u003e but that assumes that _the app_ made an  eglTerminate  call to terminate the display, right?\n\nthat is correct\n\n\u003e This isn\u0027t what\u0027s happening here\n\nAck\n\n\u003e If we have N GL threads running at a point in time, it doesn\u0027t imply the process has terminated as it can start a new GL thread\n\nAck\n\nshould be a simple fix where i check to see if a display is terminated and only then call into terminate(...). WDYT?",
      "parentUuid": "d53fb483_0b7b2d65",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7b233cf_0a39e49a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T20:02:56Z",
      "side": 1,
      "message": "Thanks for looking into this Mohan!\n\nSo I don\u0027t fully understand the context of https://anglebug.com/6723:\n\n\u003e CTS tests and real world apps that don\u0027t cleanup well before exit\nDo these usually call eglTerminate but don\u0027t clean up some of the contexts in other threads?\n\nAnd then if an app doesn\u0027t call `eglTerminate` at all then the cleanup won\u0027t happen after the fix you\u0027re suggesting?\n\nAlso, a minor detail that if we go with that I think we should rename `TerminateReason::ProcessExit` to something else given how it\u0027s not guaranteed that the process is exiting. And there might still be some risk of running into edge cases where those threads that are still referencing contexts might blow up due to this cleanup, or do you know that it would be very unlikely?",
      "parentUuid": "2d0f56d0_1ed4a929",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49904aed_5c3787e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T20:45:17Z",
      "side": 1,
      "message": "Also Frank (lfy@) asked why we need to do anything special on process exit on Android specifically - normally process exit is supposed to clean up resources (e.g. unmap memory), if there is something missing in Android maybe we should be looking into fixing that instead? Or are there reasons why this kind of cleanup can only done on ANGLE\u0027s side?",
      "parentUuid": "e7b233cf_0a39e49a",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd5aeb7_6895649c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T21:19:56Z",
      "side": 1,
      "message": "\u003e Do these usually call eglTerminate but don\u0027t clean up some of the contexts in other threads?\n\nthe test `EGLMultiContextTest.RepeatedEglInitAndTerminate` captures what the CTS test does\n\n\u003e And then if an app doesn\u0027t call  eglTerminate  at all then the cleanup won\u0027t happen after the fix you\u0027re suggesting?\n\nunfortunately yes since we now no longer know for sure if there is a dormant thread that might spring up and call an EGL / GL call\n\n\u003e we should rename TerminateReason::ProcessExit to something else\n\n`TerminateReason::NoActiveThreads` should be more appropriate\n\n\u003e where those threads that are still referencing contexts might blow up due to this cleanup\n\nif app did call terminate then it cant submit work for any resource. we wait for idle before destroy so already submitted work should be fine\n\n\u003e why we need to do anything special on process exit on Android\n\nrevert this change and run the end2end test and you will see OOM pretty quickly. Only the GLES driver knows enough to perform the cleanup",
      "parentUuid": "49904aed_5c3787e0",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}