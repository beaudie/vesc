{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f4af5b6_9921b4ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T16:09:20Z",
      "side": 1,
      "message": "There is an issue with this CL: http://b/232848169#comment11\n\nThe thread that calls eglInitialize then exits which triggers display-\u003eterminate(), but the assumes it can keep using the same display from another thread and crashes trying to use that terminated display.\n\nThe CL says \"on process exit\" in the description but it doesn\u0027t seem to be detecting the process exit correctly and relies on an assumption that turns out to be invalid in some cases like above.\n",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86a486da_b4fc8e4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T16:24:34Z",
      "side": 1,
      "message": "\u003e http://b/232848169#comment11\n\ncant access this\n\n\u003e but the assumes it can keep using the same display from another thread\n\nspec states that a display that has been terminated needs to be initialized before use\n\n\u003e but it doesn\u0027t seem to be detecting the process exit correctly\n\nassuming bionic\u0027s pthread library is correct, process exit is when there are no threads, that issue EGL/GL api calls, left in the process and when the last such thread is terminated (pthread_exit) \"gProcessCleanupRefCount\" value goes to 0. What am i missing?\n\n\u003e and relies on an assumption\n\ncan you specifically state what assumption you are talking about?",
      "parentUuid": "1f4af5b6_9921b4ce",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bde9903_0c43782d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T17:44:02Z",
      "side": 1,
      "message": "\u003e cant access this\nSorry, here are the details from that comment:\n```\nThere are two threads, AAA and BBB:\n\nAAA: V SDL     : Running main function SDL_main from library /data/app/~~UVP3mqpQpmFC9furUQf6AA\u003d\u003d/com.vectorunit.red-7lplkg8KaR8WnfJaOjQ90A\u003d\u003d/lib/arm64/libmain.so\nAAA does not call into ANGLE yet!\n\nBBB: D libEGL  : dlopen_ext from APK (libEGL_angle.so)\nBBB: I ANGLE   : EVENT: eglGetProcAddress(procname \u003d 0x0000007b2ac0b956)\n....\nBBB: I ANGLE   : EVENT: eglInitialize\n...\nBBB exits, triggers cleanup, eglReleaseThread via TLS - but apparently passes the display from eglInitialize to AAA\n\nAAA: now starts using ANGLE:\nAAA: I ANGLE   : EVENT: eglGetError()\nAAA: SDL_main -\u003e VuEngine::init -\u003e SDL_CreateWindow_REAL -\u003e SDL_EGL_LoadLibraryOnly -\u003e eglGetProcAddress -\u003e egl::GetCurrentThread()\n\nbut AAA tries to keep using the same display that was initialized by BBB - AAA didn\u0027t expect that BBB termination would also terminate the display.\n```\n\n\n\u003e spec states that a display that has been terminated needs to be initialized before use\nMakes sense, but that assumes that _the app_ made an `eglTerminate` call to terminate the display, right? This isn\u0027t what\u0027s happening here - `Display::terminate()` is called by `ProcessCleanupCallback` added in this CL, without the app being aware of this happening.\n\n\u003e process exit is when there are no threads, that issue EGL/GL api calls, left in the process and when the last such thread is terminated (pthread_exit) \"gProcessCleanupRefCount\" value goes to 0. What am i missing?\n\nProcess could have a non-GL thread that keeps it alive but start/stop any number of GL threads in any order. If we have N GL threads running at a point in time, it doesn\u0027t imply the process has terminated as it can start a new GL thread and N will go from 0 to 1.",
      "parentUuid": "86a486da_b4fc8e4e",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d53fb483_0b7b2d65",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T17:46:45Z",
      "side": 1,
      "message": "\u003e it doesn\u0027t imply the process has terminated\nCorrection: *N \u003d\u003d 0* doesn\u0027t imply the process has terminated",
      "parentUuid": "5bde9903_0c43782d",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d0f56d0_1ed4a929",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T19:23:22Z",
      "side": 1,
      "message": "\u003e but that assumes that _the app_ made an  eglTerminate  call to terminate the display, right?\n\nthat is correct\n\n\u003e This isn\u0027t what\u0027s happening here\n\nAck\n\n\u003e If we have N GL threads running at a point in time, it doesn\u0027t imply the process has terminated as it can start a new GL thread\n\nAck\n\nshould be a simple fix where i check to see if a display is terminated and only then call into terminate(...). WDYT?",
      "parentUuid": "d53fb483_0b7b2d65",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7b233cf_0a39e49a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T20:02:56Z",
      "side": 1,
      "message": "Thanks for looking into this Mohan!\n\nSo I don\u0027t fully understand the context of https://anglebug.com/6723:\n\n\u003e CTS tests and real world apps that don\u0027t cleanup well before exit\nDo these usually call eglTerminate but don\u0027t clean up some of the contexts in other threads?\n\nAnd then if an app doesn\u0027t call `eglTerminate` at all then the cleanup won\u0027t happen after the fix you\u0027re suggesting?\n\nAlso, a minor detail that if we go with that I think we should rename `TerminateReason::ProcessExit` to something else given how it\u0027s not guaranteed that the process is exiting. And there might still be some risk of running into edge cases where those threads that are still referencing contexts might blow up due to this cleanup, or do you know that it would be very unlikely?",
      "parentUuid": "2d0f56d0_1ed4a929",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49904aed_5c3787e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T20:45:17Z",
      "side": 1,
      "message": "Also Frank (lfy@) asked why we need to do anything special on process exit on Android specifically - normally process exit is supposed to clean up resources (e.g. unmap memory), if there is something missing in Android maybe we should be looking into fixing that instead? Or are there reasons why this kind of cleanup can only done on ANGLE\u0027s side?",
      "parentUuid": "e7b233cf_0a39e49a",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fd5aeb7_6895649c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T21:19:56Z",
      "side": 1,
      "message": "\u003e Do these usually call eglTerminate but don\u0027t clean up some of the contexts in other threads?\n\nthe test `EGLMultiContextTest.RepeatedEglInitAndTerminate` captures what the CTS test does\n\n\u003e And then if an app doesn\u0027t call  eglTerminate  at all then the cleanup won\u0027t happen after the fix you\u0027re suggesting?\n\nunfortunately yes since we now no longer know for sure if there is a dormant thread that might spring up and call an EGL / GL call\n\n\u003e we should rename TerminateReason::ProcessExit to something else\n\n`TerminateReason::NoActiveThreads` should be more appropriate\n\n\u003e where those threads that are still referencing contexts might blow up due to this cleanup\n\nif app did call terminate then it cant submit work for any resource. we wait for idle before destroy so already submitted work should be fine\n\n\u003e why we need to do anything special on process exit on Android\n\nrevert this change and run the end2end test and you will see OOM pretty quickly. Only the GLES driver knows enough to perform the cleanup",
      "parentUuid": "49904aed_5c3787e0",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af0ba625_eaaa5ea5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-21T23:15:53Z",
      "side": 1,
      "message": "Thanks Mohan. Let me poke at these OOMs to understand them a bit better, it looks like we might be running into some interaction between our test app and the way Android releases resources.\n\nAlso, I\u0027m told most Android application don\u0027t even exit normally but get sigkill\u0027d instead. I tested a couple of games and I\u0027m seeing (sometimes multiple) ProcessCleanupCallback invocations mid-process but not when I\u0027m closing the app, so this approach does not seem to be working as intended for real apps unless I\u0027m missing something.",
      "parentUuid": "1fd5aeb7_6895649c",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebe2f7f9_995f0516",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-21T23:19:27Z",
      "side": 1,
      "message": "still a WIP but if you are curious can give it a try -\u003e https://chromium-review.googlesource.com/c/angle/angle/+/3717277",
      "parentUuid": "af0ba625_eaaa5ea5",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9925c6a7_8f06de4e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-22T21:49:22Z",
      "side": 1,
      "message": "Hi Mohan,\n\nSorry about the delays; I\u0027ll actually be mostly OOO for the next couple of weeks.\n\nSo one issue I see with https://crrev.com/c/3717277 is that the code is getting more complicated while the benefit for real apps is still unclear to me. I\u0027ve had a look at a few games and I don\u0027t see eglTerminate calls at all, which makes me wonder if all of this cleanup logic is only going to apply specifically for the test app use case.. and if so then maybe we could find another solution to that OOM issue that you mentioned, but I would need a repro to look into that.\n\nI tried to run end2end tests including some modifications of `RepeatedEglInitAndTerminate` that you mentioned above, but I am not sure how to reproduce the OOM issue. I see free memory go down quite a bit but I didn\u0027t see crashes (or I failed to identify them). Could it be that those crashes are specific to an Android version, device etc, or maybe they no longer happen on recent ANGLE builds? Do you remember if there was anything specific you needed to do to repro? I noticed this comment: https://crsrc.org/c/third_party/angle/src/tests/egl_tests/EGLMultiContextTest.cpp;drc\u003d3dfc800437f79626bfd2158c04b13a5aaae2e016;l\u003d350\nbut I don\u0027t think we would need to revert 3329273 - or am I missing something?\n\nThanks!",
      "parentUuid": "ebe2f7f9_995f0516",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01d0cfb1_1d91f433",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-22T21:58:55Z",
      "side": 1,
      "message": "\u003e I don\u0027t see eglTerminate calls at all\n\nterminate calls wont happen during game play, im assuming you will need some focus shift (move app to background) or some other even like that to see this call\n\n\u003e which makes me wonder if all of this cleanup logic is only going to apply specifically for the test app use case\n\nwe needed android cts conformance and had this code to get us there (things changed a bit with `eglReleaseThread`, see comment below)\n\n\u003e but I am not sure how to reproduce the OOM issue...Do you remember if there was anything specific you needed to do to repro?\n\nah, the reason end2end is not repro is because i added `eglReleaseThread` call to the test to correctly mirror the CTS test (and forgot to update the comment when i added it, oops). `eglReleaseThread()` is an optional call that apps dont have to make, while discussing this with Tim, the ask was something to the effect of - \"yes that call is optional and it will trigger OOM but for now lets address CTS call pattern\"\n\n`eglReleaseThread` is what does the magic of freeing memory in the test case, remove that and you will have oom",
      "parentUuid": "9925c6a7_8f06de4e",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3066de5f_fc64abc3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-06-22T23:18:16Z",
      "side": 1,
      "message": "Be sure to take a look at b/202334452 also.   Specifically, running `android.opengl.cts.WrapperTest#testThreadCleanup` on Cuttlefish, since Mohan\u0027s CL `feb599ad Invalidate EGL handles during eglTerminate` fixed that test.\n\nThe test calls `eglTerminate()` and then `eglReleaseThread()`, so it\u0027s slightly different than what\u0027s being described here, but it\u0027s another path that resulted in OOMs.\n\nTest code:\nhttps://source.corp.google.com/aosp-nougat/cts/tests/tests/opengl/src/android/opengl/cts/WrapperTest.java;rcl\u003dbd2c8f50ddcfe686bd9789b5a474796691e07129;l\u003d301\n\nAlso related to this code path is anglebug.com/6208, so it would be a good idea to make sure `com.netmarble.sknightsmmo` still runs correctly after any changes in this area.",
      "parentUuid": "01d0cfb1_1d91f433",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6fbfd988_56af0a87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-23T12:19:55Z",
      "side": 1,
      "message": "Thanks for the pointers!\n\nIf I\u0027m reading https://anglebug.com/6208#c3 right, Mohan\u0027s suggested fix https://crrev.com/c/3717277 should still work correctly as the issue there is an explicit eglTerminate call. Good to know `com.netmarble.sknightsmmo` does (did) this so we know that this isn\u0027t limited to the test app and happens in real apps too.\n\nMohan, could you go ahead with https://crrev.com/c/3717277 ? It would also be great if you update the comment about the OOM repro while on this. Let\u0027s try to make it clear where possible that this code is specifically about cleanup after an _explicit eglTerminate call_ and not clenanup on process termination. Some of the eglTerminate cleanup must be delayed as per https://anglebug.com/6208#c3, and that bug says the the app was crashing at the loading screen so the process wasn\u0027t terminating.\n\nThanks!",
      "parentUuid": "3066de5f_fc64abc3",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f023b072_615e6998",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-23T12:34:35Z",
      "side": 1,
      "message": "One more thought:\n\nIf eglTerminate is called mid-process, doesn\u0027t it mean that there will likely be another eglInitialize call to set up a new display?\n\nIf so, we might need to be careful around global vs per-display state as there may be a race condition between thread cleanup and the second eglInitialize call. For instance, we may never reach a global gProcessCleanupRefCount \u003d\u003d 0 after an eglTerminate if the second eglInitialize happens before GL threads exit - so maybe ref counter should be part of the display state rather than global?",
      "parentUuid": "6fbfd988_56af0a87",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "108b7876_12a139e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-06-27T23:17:09Z",
      "side": 1,
      "message": "\u003e eglReleaseThread  is what does the magic of freeing memory in the test case, remove that and you will have oom\n\nFWIW, when commenting out eglReleaseThread and bumping up the thread count to 1000 in RepeatedEglInitAndTerminate test, the test app stops responding and this CL doesn\u0027t seem to make a difference. I traced `gProcessCleanupRefCount` and I don\u0027t think we reach gProcessCleanupRefCount \u003d\u003d 0 until tests are finished. The main thread uses a display during initialization:\nhttps://crsrc.org/c/third_party/angle/src/tests/egl_tests/EGLContextCompatibilityTest.cpp;drc\u003df71283c987e895f3d004c7472d1d6ad8a74cdcb4;l\u003d508\nand then naturally stays alive until all tests are done, so `gProcessCleanupRefCount` stays at 1.\n\nThat thread does eglTerminate the display though:\nhttps://crsrc.org/c/third_party/angle/src/tests/egl_tests/EGLContextCompatibilityTest.cpp;drc\u003df71283c987e895f3d004c7472d1d6ad8a74cdcb4;l\u003d628\n\nSo this might boil down to per-display state that I suggested above, global counter can only clean up when the process is exiting in this case AFAICT.\n\n\ngn args that I used in my testing:\n\ntarget_os \u003d \"android\"\ntarget_cpu \u003d \"arm64\"\nis_component_build \u003d false\nangle_assert_always_on \u003d true\nis_debug \u003d false",
      "parentUuid": "f023b072_615e6998",
      "revId": "6c172e4b87f2d9a3d781c07da75dbb542d46007d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}