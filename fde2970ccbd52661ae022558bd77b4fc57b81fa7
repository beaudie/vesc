{
  "comments": [
    {
      "key": {
        "uuid": "9542a2da_e869e7ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-11-05T15:06:26Z",
      "side": 1,
      "message": "When you write \"BUG\u003dangle:812\" instead, it automatically becomes a link from Gerrit to the Google Code issues list. Chromium bug ids don\u0027t use the prefix.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 10
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15e07212_8d85d898",
        "filename": "src/libGLESv2/formatutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-11-05T15:06:26Z",
      "side": 1,
      "message": "I\u0027m a bit wary about this because someone in the future might \u0027fix\u0027 this and make it UINT again, which is the correct type from a semantical point of view. Can we solve this issue in a less hacky way?",
      "range": {
        "startLine": 457,
        "startChar": 149,
        "endLine": 457,
        "endChar": 171
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3551f6a8_3c1151c2",
        "filename": "src/libGLESv2/formatutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T15:09:09Z",
      "side": 1,
      "message": "The spec was pretty lacking on it\u0027s description of the format,  Corentin checked NVIDIA\u0027s driver and it returns UNSIGNED_NORMALIZED as the component type for this format.  It would also be more hacky to special case all depth/stencil formats to allow them to multisample despite the the \"no multisampled INT/UNSIGNED_INT formats\" rule in ES3.",
      "parentUuid": "15e07212_8d85d898",
      "range": {
        "startLine": 457,
        "startChar": 149,
        "endLine": 457,
        "endChar": 171
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9542a2da_a8abdf67",
        "filename": "src/libGLESv2/formatutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1106294
      },
      "writtenOn": "2014-11-05T16:45:16Z",
      "side": 1,
      "message": "From a purely technical point of view, not an API interpretation: When sampling a stencil buffer as a texture, the only sensible format is UINT. UNORM can have more bits than requested, but stencils have to be bit-accurate. UINT formats can\u0027t sensibly be averaged, so filtering and multi-sample resolve should indeed be invalid. However reading a specific sample (cfr. Texture2DMS.Load) or using the fixed-function stencil operations should be no issue.\n\nProperly discerning between these uses and still complying to the ES spec might be more of a hassle than is worth our time right now. I\u0027ll leave that judgement up to you and Shannon. In any case I suggest adding a comment to document the discrepancy because we might have to deal with it later.",
      "parentUuid": "3551f6a8_3c1151c2",
      "range": {
        "startLine": 457,
        "startChar": 149,
        "endLine": 457,
        "endChar": 171
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51cbefc_7ddef394",
        "filename": "src/libGLESv2/formatutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T19:29:59Z",
      "side": 1,
      "message": "Agreed on the component type not making logical sense.  Luckily, we\u0027re safe here from an API perspective for a few reasons: 1) Stencil values cannot be sampled and 2) Nothing cares about COMPONENT_TYPE for any kind of logic except validation and queries, it\u0027s not used to determine any kind of renderer behaviour.\n\nAlso agreed that a comment would help.",
      "parentUuid": "9542a2da_a8abdf67",
      "range": {
        "startLine": 457,
        "startChar": 149,
        "endLine": 457,
        "endChar": 171
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "753d2e9e_745b407a",
        "filename": "src/libGLESv2/formatutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 457,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-11-07T17:14:09Z",
      "side": 1,
      "message": "Given that the spec states that the values of stencil components are represented by unsigned integers, but also implies that they\u0027re not intended to be included when it refers to \"signed and unsigned integer formats\" (because it does discuss their treatment in multisampling, where those formats are disallowed), I\u0027d argue that stencil formats are indeed a special case type (\"index\", probably). That said, I\u0027m okay with the handling of the format in the latest patch, given the comments.",
      "parentUuid": "f51cbefc_7ddef394",
      "range": {
        "startLine": 457,
        "startChar": 149,
        "endLine": 457,
        "endChar": 171
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "154eb20c_5b29c324",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "nit: tab snuck in",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 71,
        "endChar": 8
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51cbefc_5a00d59e",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "For this we have EXPECT_GL_NO_ERROR",
      "range": {
        "startLine": 82,
        "startChar": 8,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "154eb20c_9b63cb89",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "We can\u0027t count on multisampling being available.  In ES2 when ANGLE_framebuffer_multisample is available, GL_MAX_SAMPLES_ANGLE should be queried and in ES3 glGetInternalformativ has to be used to query GL_NUM_SAMPLE_COUNTS and GL_SAMPLES.",
      "range": {
        "startLine": 84,
        "startChar": 63,
        "endLine": 84,
        "endChar": 64
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51cbefc_ba1a5110",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "nit: brace on the next line",
      "range": {
        "startLine": 130,
        "startChar": 30,
        "endLine": 130,
        "endChar": 31
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3551f6a8_5c9c5dfb",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "nit: brace",
      "range": {
        "startLine": 136,
        "startChar": 54,
        "endLine": 136,
        "endChar": 55
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3551f6a8_dc906ddf",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "We have an ArraySize function you can use for this.",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 145,
        "endChar": 99
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "154eb20c_3b207737",
        "filename": "tests/angle_tests/FramebufferFormatsTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-11-05T14:59:47Z",
      "side": 1,
      "message": "Instead of iterating over all the formats here, can they be put in separate test cases (like the above tests)?  It would be more helpful when determining which format failed.\n\nIt would also let you check for some extensions that add support for these formats, like GL_DEPTH24_STENCIL8 being enabled by GL_OES_packed_depth_stencil in ES2.\n\nAlso, multisampled renderbuffers cannot be created in ES2 without ANGLE_framebuffer_multisample so there needs to be a check for ES3 or the extension being available.",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 154,
        "endChar": 1
      },
      "revId": "fde2970ccbd52661ae022558bd77b4fc57b81fa7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}