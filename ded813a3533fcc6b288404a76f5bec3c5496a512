{
  "comments": [
    {
      "key": {
        "uuid": "e85b85ec_978c9034",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-20T22:32:54Z",
      "side": 1,
      "message": "Here\u0027s a CL that deals with mContentDefined at endRP time.",
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86f49aed_0a6ffd49",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-21T17:49:47Z",
      "side": 1,
      "message": "Looks like most of this change is reverting the previous change. Probably good to squash them.",
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26cbaffe_a248031e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 955,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-20T22:37:27Z",
      "side": 1,
      "message": "instead of storing the RT pointer, you can store the ImageHelper * when we start the RP.\n\nthis will also involve moving mContentDefined into the ImageHelper.",
      "range": {
        "startLine": 955,
        "startChar": 8,
        "endLine": 955,
        "endChar": 33
      },
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebef2c70_c6057166",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 955,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-20T22:38:22Z",
      "side": 1,
      "message": "FYI you\u0027d need a content defined in the ImageHelper per-subresource, so I was thinking you explicitly store mStencilContentDefined and mDepthContentDefined.",
      "parentUuid": "26cbaffe_a248031e",
      "range": {
        "startLine": 955,
        "startChar": 8,
        "endLine": 955,
        "endChar": 33
      },
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ca3527a_2bd0145b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 955,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-20T23:05:10Z",
      "side": 1,
      "message": "\"Thinking out loud\" ...\n\nDoes such a change really help anything?  The users of mContentDefined for depth and stencil treat them together.  For example, RenderTargetVk::onDepthStencilDraw(), FramebufferVk::startNewRenderPass(), and FramebufferVk::invalidateImpl() all treat them as a unit, through the RenderTargetVk.\n\nIn favor of the idea, if we rework the code that treats them together, we can treat depth and stencil differently as far as loadOp and storeOp go.  That\u0027s an optimization.  Do we need to optimize it though?  IIRC PUBG doesn\u0027t create a stencil buffer, but does invalidate it.  Thus, it doesn\u0027t help PUBG, and PUBG is the only app we know of that invalidates depth/stencil and needs the render pass to not be broken.  The current CL meets PUBG\u0027s needs fine.\n\nSeems to me that it would be better to work on delaying vkAcquireNextImage, but I\u0027m open.\n\nYour thoughts?",
      "parentUuid": "ebef2c70_c6057166",
      "range": {
        "startLine": 955,
        "startChar": 8,
        "endLine": 955,
        "endChar": 33
      },
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e498c4c_8d57d73c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 955,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-08-21T02:10:51Z",
      "side": 1,
      "message": "Just to make sure, my previous comment was a sincere attempt to think through this.  I hope it came across that way.",
      "parentUuid": "6ca3527a_2bd0145b",
      "range": {
        "startLine": 955,
        "startChar": 8,
        "endLine": 955,
        "endChar": 33
      },
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ded901c_8bfa43c6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 1
      },
      "lineNbr": 955,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-21T17:49:47Z",
      "side": 1,
      "message": "I\u0027m all for moving mContentDefined to ImageHelper, but perhaps it should be a split change.\n\n\u003e The users of mContentDefined for depth and stencil treat them together.\n\nBut they don\u0027t necessarily have to. Right now, if the application invalidates stencil but not depth, we still use loadOp\u003dLOAD for stencil because we don\u0027t track contents-defined separately.\n\nThat said, I don\u0027t know if any application would really invalidate one and not the other, or whether loading one and not the other has any practical benefits, so I\u0027m skeptical as to whether tracking them separately is useful TBH.",
      "parentUuid": "1e498c4c_8d57d73c",
      "range": {
        "startLine": 955,
        "startChar": 8,
        "endLine": 955,
        "endChar": 33
      },
      "revId": "ded813a3533fcc6b288404a76f5bec3c5496a512",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}