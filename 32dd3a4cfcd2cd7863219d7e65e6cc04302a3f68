{
  "comments": [
    {
      "key": {
        "uuid": "3b5a9fc4_1a0303ad",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-06-09T15:49:13Z",
      "side": 1,
      "message": "nit: I don\u0027t think this is actually used in the file currently, so might not be necessary. Presumably you use it in your next CL to introduce a new test.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45923ff8_03fda70b",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-06-12T03:05:53Z",
      "side": 1,
      "message": "I think we should use ANGLE_GL_PROGRAM in runDrawElementsTest() because the tests calling this function all need to build a temporary shader program.",
      "parentUuid": "3b5a9fc4_1a0303ad",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 31
      },
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ca31fda_530e1396",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-06-09T16:36:46Z",
      "side": 1,
      "message": "nit: I think these could be constexpr too",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022aad37_356fd369",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 55,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-06-12T03:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ca31fda_530e1396",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18ec4b6d_e4981843",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-06-09T16:36:46Z",
      "side": 1,
      "message": "nit here and in other places: const char* or const std::string\n\nconst std::string\u0026 is still going to do an allocation here.",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f885373_69ec8c98",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-06-09T16:51:53Z",
      "side": 1,
      "message": "To be consistent with the other code I think const std::string \u0026 is fine. Can you point me to a source which supports std::string(const char *) would not allocate? In any case wouldn\u0027t the const \u0026 not affect the behaviour of that constructor?",
      "parentUuid": "18ec4b6d_e4981843",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec0f1c71_91833243",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-06-09T19:09:26Z",
      "side": 1,
      "message": "The point is that having this as a std::string\u0026 is equivalent to having it as a std::string. So the \u0026 is misleading because it makes it look like no allocation / copy happens, when in does.",
      "parentUuid": "6f885373_69ec8c98",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c94e855_0042ebe5",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-06-09T19:36:27Z",
      "side": 1,
      "message": "I was concerned about double-allocation (first from an implicit const char * constructor, then a copy to the local std::string) but it looks like std::string defines a custom operator\u003d for const char *, so it will only do one allocation.\n\nSo it seems const std::string is pretty equivalent to const std::string \u0026 (one will call the constructor, one will default-construct and call the assignment operator).\n\nI\u0027m fine with const std::string.",
      "parentUuid": "ec0f1c71_91833243",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9816dc43_56f3d9f7",
        "filename": "src/tests/gl_tests/InstancingTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-06-12T03:05:53Z",
      "side": 1,
      "message": "I am using const std::string in my new patch.",
      "parentUuid": "3c94e855_0042ebe5",
      "revId": "32dd3a4cfcd2cd7863219d7e65e6cc04302a3f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}