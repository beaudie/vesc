{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a01cb40c_fb807549",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-02T18:35:33Z",
      "side": 1,
      "message": "win-trace looks like it\u0027s getting confused by glGetFramebufferParameteriv:\n\n../../../src/tests/capture_replay_tests/traces6/PixelLocalStorageTest_RGB_ES3_1_Vulkan_SwiftShader_context4_001.cpp(1289,69): error: invalid digit \u0027C\u0027 in octal constant\n    glGetFramebufferParameteriv(GL_DRAW_FRAMEBUFFER, 0x9310, 0000000CA932F530);\n    \nDo we need to update an API definition somewhere?",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0b10f8f_c59e3e82",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T20:55:59Z",
      "side": 1,
      "message": "Jamie, could you help remind us how to update the trace tests for newly added tests?\n\nNot sure if this is in https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/doc/CaptureAndReplay.md .\n\nThanks in advance.\n",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a15ff02d_1c919459",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "This looks good to me overall - never seen a technique like this implemented locally in an ANGLE test file. :) A few relatively minor comments, and there are some trace test failures to address.\n",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd8fd76_c1656df3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 30
      },
      "lineNbr": 0,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Haha, yeah it\u0027s pretty bootstrappy for sure, but I\u0027m hoping that getting in a proven, thorough test bed before doing the real implementations will help a lot!\n\nFramebufferTest calls glGetFramebufferParameteriv, so I\u0027m surprised the trace works there but not here. Maybe it has something to do with the pname argument. I\u0027m also trying again with a pointer to a local variable like that test does it ¯\\_(ツ)_/¯",
      "parentUuid": "a15ff02d_1c919459",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58c790c9_4eaac99a",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 30,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "I\u0027m pretty sure preprocessor concatenation is used elsewhere in the code base. See for example validationEGL.h. Could you look into this if it\u0027d simplify the code?",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68e43046_c29de5a1",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 30,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Clarified that I was referring to the GLSL preprocessor (not the C++ one). Do you have any ideas on how to automatically append that _R and _W? I\u0027d love for it to happen automatically. I considered std::regex_replace, but I\u0027m feeling like that would be overly complex and fragile.",
      "parentUuid": "58c790c9_4eaac99a",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c444d7a7_d1b047dc",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 30,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-03T18:43:07Z",
      "side": 1,
      "message": "Ah, thanks, I understand now.\n\nI can\u0027t think of a way to do what you want entirely in ANGLE\u0027s shader preprocessor. As you suggested, using a regex to expand out the substring PIXEL_LOCAL_DECL(unit, format, name) to something like PIXEL_LOCAL_DECL_IMPL(unit, format, name_R, name_W) and then changing kLocalStorageGLSLDefines to define PIXEL_LOCAL_DECL_IMPL seems the most straightforward way.",
      "parentUuid": "68e43046_c29de5a1",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2deec3c_4f9aa16d",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 77,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "Here and throughout - please use ANGLE\u0027s upper-case ASSERT macro.",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6583fdef_6118905e",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 77,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Done.\n\nFor now these ASSERTS are pretty sloppy, but they (and others) are documented in the spec and will eventually turn into clean validation code.",
      "parentUuid": "b2deec3c_4f9aa16d",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ee4198_2f4a1086",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 101,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "Here too - and throughout as well. Thanks.",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e2b2036_8e959cc6",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 101,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9ee4198_2f4a1086",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c797c280_ea722fcf",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 223,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "FRAMMEBUFFER -\u003e FRAMEBUFFER",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4aae6a8_3b9cda39",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 223,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c797c280_ea722fcf",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a0e2740_8128f497",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 227,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-06-02T22:20:26Z",
      "side": 1,
      "message": "FRAMMEBUFFER -\u003e FRAMEBUFFER",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "531d4b11_f2adcbe9",
        "filename": "src/tests/gl_tests/PixelLocalStorageTest.cpp",
        "patchSetId": 30
      },
      "lineNbr": 227,
      "author": {
        "id": 1543967
      },
      "writtenOn": "2022-06-03T00:29:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a0e2740_8128f497",
      "revId": "570d97d171dc1e3b08326a20bcab4db5b31576fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}