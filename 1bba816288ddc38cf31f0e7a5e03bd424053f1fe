{
  "comments": [
    {
      "key": {
        "uuid": "f14e2682_becd82ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T14:22:42Z",
      "side": 1,
      "message": "I think this is ready, PTAL.",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2ab0a0e_2c412c57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 35
      },
      "lineNbr": 0,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T16:53:44Z",
      "side": 1,
      "message": "Tim, Shabi, I think this is ready to go.",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6bfe806_7aa6557c",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 923,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "Why is this change being made?",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41475842_c9890f3f",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 923,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-03T21:23:09Z",
      "side": 1,
      "message": "My suggestion. The disassembly is actually harder to compare/understand with friendly names. Especially in debugging, you could log the ids you are dealing with, then the disassembly would go and hide them :|",
      "parentUuid": "a6bfe806_7aa6557c",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4fe5345_61663f84",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 923,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "Oops, I did that for debugging. As Shabi says it\u0027s harder to read the disassembly with the friendly names turned on.",
      "parentUuid": "41475842_c9890f3f",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28f00617_eaac938f",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 1297,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "This came up before, but re-reading it I still don\u0027t understand this block.\n\nLooking below:\n\n    if (info-\u003ecastPrecision)\n    {\n    ...\n        // The replacement variable is always reduced precision so add that decoration to\n        // fixedVaryingId\n\nThis matches an earlier statement you made:\n\n\u003e When there is a mismatch we always transfer mediump.\n\u003e We only set castPrecision to true for varyings that are highp that need to output/input mediump.\n\nWhy does castPrecision increase precision here?",
      "range": {
        "startLine": 1284,
        "startChar": 0,
        "endLine": 1297,
        "endChar": 9
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d812c77_7256cb93",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 1297,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "In this case the previous stage naturally output a mediump, but this stage wants to use it as a highp value. We modify that shader to turn the previous highp input variable into a highp global variable and define a new mediump input variable. This piece of code then loads the mediump input and stores it into the highp global for the rest of the shader to work with \"up casting\" in the process. That way this shader does all it\u0027s work in highp as the source specified but we\u0027ve made the varying part be mediump to satisfy Vulkan. This \"up casting\" happened implicitly with GL.",
      "parentUuid": "28f00617_eaac938f",
      "range": {
        "startLine": 1284,
        "startChar": 0,
        "endLine": 1297,
        "endChar": 9
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe22096_511c6a62",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 35
      },
      "lineNbr": 1297,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T17:02:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3d812c77_7256cb93",
      "range": {
        "startLine": 1284,
        "startChar": 0,
        "endLine": 1297,
        "endChar": 9
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "073f8a04_72defc59",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 84,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "Can you clarify what \"fixed\" means and what true/false means in each combination:\n\n1. output: high, input: high\n2. output: high, input: medium\n3. output: medium, input: high\n4. output: medium, input: medium\n\nAs I note below, there are some contradictory comments and implementations regarding (3) and whether that\u0027s actually supported or not.   Some places state we always reduce precision, but SpirvTransformer::writeInputPreamble() only increases it.\n\nOr maybe I\u0027m getting confused.",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8a5ed70_33bd8d7b",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 84,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-03T21:23:09Z",
      "side": 1,
      "message": "My impression was that it\u0027s not about downgrade vs upgrade, but rather making the VS cast to the prevision FS wants.\n\nIf VS outputs mediump and FS inputs highp, I don\u0027t think we should downgrade FS to mediump. That would affect the interpolation of the varying.",
      "parentUuid": "073f8a04_72defc59",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5643f1e_24ec68ef",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 84,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "I believe it was in our discussion with ARM I asked about preference for what\u0027s transferred and they indicated it\u0027s better to transfer smaller data (e.g. mediump vs. highp).\nSo, if VS is outputting highp but FS takes mediump we cast the varying to mediump just before it\u0027s transferred. That \"drops\" precision but it doesn\u0027t matter since the FS wasn\u0027t using it.\nIf VS is outputting mediump but FS takes highp, we let the transfer happen with mediump and then read the mediump varying and cast it to highp for the FS to do it\u0027s processing. There was no loss in the transfer and the varying now matches.\nThat way each stage does whatever processing at the precision they declared and we transfer the smaller amount of data when there is a mismatch.\nI have a doc that tries to explain this as well, sent Tim a link, looks like Shabi already has access.",
      "parentUuid": "b8a5ed70_33bd8d7b",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8a3dc40_3352d78a",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 84,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T17:02:59Z",
      "side": 1,
      "message": "I think the important thing to state here is some variation of what\u0027s stated in the design doc:\n\n\u003e In both cases (highp -\u003e mediump and mediump -\u003e highp) only transfer mediump between the stages (preference indicated by HW vendors).\n\nSo, either the VS casts high-\u003emedium or the FS casts medium-\u003ehigh depending on what the mismatch calls for.   Maybe something like:\n\n  // Indicates that the precision needs to be modified in the generated SPIR-V\n  // to support only transferring medium precision data when there\u0027s a precision\n  // mismatch between the shaders. For example, either the VS casts highp-\u003emediump\n  // or the FS casts mediump-\u003ehighp.",
      "parentUuid": "a5643f1e_24ec68ef",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7be652a_243b63ba",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 85,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "I think something like \"useRelaxedPrecision\" would be better, since that\u0027s the decoration that\u0027s being used in the SPIR-V.",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f73397e2_db54e4fe",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 35
      },
      "lineNbr": 85,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7be652a_243b63ba",
      "range": {
        "startLine": 85,
        "startChar": 9,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c4a909f_43d9c347",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 227,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "For both of these:\n\n  readBool()",
      "range": {
        "startLine": 227,
        "startChar": 44,
        "endLine": 227,
        "endChar": 62
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de42bdd8_1c8c75be",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 227,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c4a909f_43d9c347",
      "range": {
        "startLine": 227,
        "startChar": 44,
        "endLine": 227,
        "endChar": 62
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57dbdc05_94ac6c96",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 891,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "Is this still true?\n\nIf so, why do we need an \u0027else\u0027 case here that casts low-\u003ehigh?",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 891,
        "endChar": 38
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae93696e_02499293",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 891,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "Will update.",
      "parentUuid": "57dbdc05_94ac6c96",
      "range": {
        "startLine": 890,
        "startChar": 0,
        "endLine": 891,
        "endChar": 38
      },
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d18b21f0_e1512a97",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 904,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-03T21:17:07Z",
      "side": 1,
      "message": "Can you clear the mergedVaryings vector once this function completes to try and reclaim the memory?   It should be safe, since any changes to the varyings would require re-linking which would rebuild the executable\u0027s mergedVaryings before getting here.\n\nThe clear() doesn\u0027t necessarily need to happen here, but would be easier.",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f7272b3_8713f7b2",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 35
      },
      "lineNbr": 904,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-03T23:18:13Z",
      "side": 1,
      "message": "I\u0027m going to have a follow-up CL to pass down the mergedVaryings a different way. Jamie said there is a potential issue with things being out of date this way and asked for a follow-up CL to fix that. That would also cause things to get cleaned up automatically since it would be a scoped variable then.",
      "parentUuid": "d18b21f0_e1512a97",
      "revId": "1bba816288ddc38cf31f0e7a5e03bd424053f1fe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}