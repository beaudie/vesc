{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5ed79567_6663aa8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-11-22T02:07:50Z",
      "side": 1,
      "message": "Is it possible to add an end2end test for this in some form? The bug says there are Android tests that catch the issue, but it would be nice if we could catch regressions in the future before ANGLE rolls into Android.",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b06c8bbb_7c24bb68",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-22T13:36:50Z",
      "side": 1,
      "message": "Yikes, what an anti-pattern. ANGLE shouldn\u0027t been doing anything on process exit. Please make sure this is Android-only.",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8a6ae2c_e4e2515d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-11-22T17:00:21Z",
      "side": 1,
      "message": "\u003e Is it possible to add an end2end test for this in some form?\n\nduring its tear down end2end test suite cleans up properly so the callback becomes a noop.\n\nWhile looking into adding tests i hit upon a corner case -\n\n Thread A - eglGetProcAddress(...) (increases refCount to 1)\n    The thread\u0027s setProcessCleanupDisplay(...) never gets called so display is nullptr\n Thread B - eglMakeCurrent(...) (increases refCount to 2)\n    The thread\u0027s setProcessCleanupDisplay(...) does get called and a valid display is set\n    \n ...\n\n Thread B gets destroyed without cleaning up (decreases refCount to 1)\n    since refCount is not 0 nothing happens\n Thread A gets destroyed without cleaning up (decreases refCount to 0)\n    refCount is 0 but getProcessCleanupDisplay() returns nullptr and so it does nothing\n    \nand we end up leaking memory\n    \nI need to move away from relying on a display being set because the thread is \"active\" to getting access to the set of already created displays so all threads have the ability to cleanup irrespective of the order in which they are destroyed",
      "parentUuid": "5ed79567_6663aa8a",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e019409_7aa3b0de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-11-22T17:00:21Z",
      "side": 1,
      "message": "from what i can tell if you ran such a leaky test on cuttlefish ANGLE will end up leaking memory. We had a script collecting free ram over time while running this deqp test \"KHR-GLES31.core.sepshaderobjs.UseProgStagesApi\" with a 1 second sleep between runs and over an hour or so we lost 1GB",
      "parentUuid": "b06c8bbb_7c24bb68",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c82f9501_81468c95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-22T18:19:12Z",
      "side": 1,
      "message": "Yeah, it looks like you\u0027ll need to iterate through these maps of Displays, and release the Contexts in all of them:\n\n    typedef std::map\u003cANGLEPlatformDisplay, Display *\u003e ANGLEPlatformDisplayMap;\n    static ANGLEPlatformDisplayMap *GetANGLEPlatformDisplayMap()\n    {\n        static angle::base::NoDestructor\u003cANGLEPlatformDisplayMap\u003e displays;\n        return displays.get();\n    }\n\n    typedef std::map\u003cDevice *, Display *\u003e DevicePlatformDisplayMap;\n    static DevicePlatformDisplayMap *GetDevicePlatformDisplayMap()\n    {\n        static angle::base::NoDestructor\u003cDevicePlatformDisplayMap\u003e displays;\n        return displays.get();\n    }",
      "parentUuid": "b8a6ae2c_e4e2515d",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d2acca6_3cc813c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-11-22T18:39:27Z",
      "side": 1,
      "message": "Done.\n\nModified code to retrieve the set of known EGL displays instead of hoping for correct thread destroy order",
      "parentUuid": "b8a6ae2c_e4e2515d",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d69f11bf_f79dc84e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-11-22T18:43:07Z",
      "side": 1,
      "message": "@tim, that is pretty much what i have done in the latest patch",
      "parentUuid": "7d2acca6_3cc813c4",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8751719b_bbabb40f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-23T14:07:47Z",
      "side": 1,
      "message": "Yeah definitely an Android-specific OS bug. Windows 95 use to leak process stuff if they exited early, it\u0027s a pretty bad behaviour for a modern OS.",
      "parentUuid": "9e019409_7aa3b0de",
      "revId": "0c1f9ab8f7304f81d9a988adcf69346db2e6139a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}