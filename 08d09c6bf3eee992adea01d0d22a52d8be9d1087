{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b8fbe6de_499ae943",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-11T18:28:47Z",
      "side": 1,
      "message": "I\u0027m sorry this is so big. Can you please review? Thank you.",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fe81d7a_93dc0aed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-11T18:51:07Z",
      "side": 1,
      "message": "Note: after this CL lands I plan to add an inflight memory limit to BufferManager. I didn\u0027t want to make this CL even bigger than it is so it\u0027s not there yet.",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8900cb39_da733cfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "overall lgtm. Just some questions about the bigger than intended buffers\u0027 allocations in the buffer manager.",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "74789271_5792ce29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:41:51Z",
      "side": 1,
      "message": "Thanks for all the hard work and experimentation, Gregg!",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b2e8bd4_348ad785",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 244,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:49:59Z",
      "side": 1,
      "message": "Spelling (Certain)",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2355de7_4048ef50",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 244,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b2e8bd4_348ad785",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d71dbb1e_066a7172",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:49:59Z",
      "side": 1,
      "message": "Inconsistant capitalization",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "537e4840_f724929e",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 249,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d71dbb1e_066a7172",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8b48dab_54057900",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 254,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "should be `Shared`?",
      "range": {
        "startLine": 254,
        "startChar": 69,
        "endLine": 254,
        "endChar": 76
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dad110c0_dfd322e7",
        "filename": "include/platform/FeaturesMtl_autogen.h",
        "patchSetId": 14
      },
      "lineNbr": 254,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8b48dab_54057900",
      "range": {
        "startLine": 254,
        "startChar": 69,
        "endLine": 254,
        "endChar": 76
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fa81909_d2241e51",
        "filename": "include/platform/mtl_features.json",
        "patchSetId": 14
      },
      "lineNbr": 275,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:49:59Z",
      "side": 1,
      "message": "Storage -\u003e Shared",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd2d2d83_3f2a398e",
        "filename": "include/platform/mtl_features.json",
        "patchSetId": 14
      },
      "lineNbr": 275,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0fa81909_d2241e51",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d56500f_8de85398",
        "filename": "src/libANGLE/renderer/metal/BufferMtl.mm",
        "patchSetId": 14
      },
      "lineNbr": 646,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:49:59Z",
      "side": 1,
      "message": "Sp (buffers)",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9732112_5efdf5d7",
        "filename": "src/libANGLE/renderer/metal/BufferMtl.mm",
        "patchSetId": 14
      },
      "lineNbr": 646,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d56500f_8de85398",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "411593c1_2da74cd3",
        "filename": "src/libANGLE/renderer/metal/BufferMtl.mm",
        "patchSetId": 14
      },
      "lineNbr": 671,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "nit: maybe put a comment saying we are copying the old data before and after the updated region.",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1178bfec_37726b79",
        "filename": "src/libANGLE/renderer/metal/BufferMtl.mm",
        "patchSetId": 14
      },
      "lineNbr": 671,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "411593c1_2da74cd3",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80af94e3_2c66dc59",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "Is it going to waste a lot of memory? because we always allocate a bigger than intended buffer.\n\nIs there any way or plan to sub-allocate a smaller buffer inside a big allocation?\nOr maybe a more complicated buffer manager that uses \"malloc\"-like strategy is being planned?",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c095dd6b_c542a0ea",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2022-10-13T16:41:51Z",
      "side": 1,
      "message": "We have a few hardcoded buffer pool sizes (Uniform block size) that might benefit from prealloc / special buckets.",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "add36d5e_0628106c",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "There are plans to change it after this CL once we get some data.\n\nThe problem is freeing them. When do they get freed? If you make a 182 byte buffer, update 50 timeswith bufferSubData, you now have 50, 182 byte buffers which are only usable by other requests for 182 byte buffers. With this code you have 50, 256 byte buffers which can be used by any request from 129 to 256 bytes.\n\nIf I switch to exact allocation, then I need some metric to actually free those 182 byte buffers (as in free the metal buffer itself, not put it on a list of unused buffers). What is that metric? Hasn\u0027t been used in N frames? N seconds? There\u0027s Y amount of unused buffers?\n\nThe same problem exists with this solution though, it may collect unused buffers. It is per context tho so changing pages, closing the tab, will free the buffer. My plan was to first at a global limit of amount of memory represented by `mInUseBuffers`. If it hits some limit (400 meg?) then wait for at least 200meg to free and actually deallocate those buffers. Or something. Not sure yet.",
      "parentUuid": "80af94e3_2c66dc59",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c48accff_4c5a4b3b",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "Can we address that later or do you want it addressed now? Also are those buffers large? Like if they\u0027re 6k and we allocate 8k is it worth a special bucket to save a few k or will be saving megs?",
      "parentUuid": "c095dd6b_c542a0ea",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecbaad5b_76ca26cf",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:46:47Z",
      "side": 1,
      "message": "Also, the BufferManager is currently only used for GL buffers and staging buffers. It\u0027s not used for any other buffers. It could be, but BufferPool is still used ATM for index buffer conversion, uniforms, provoking vertex, etc. Maybe we would refactor those to use BufferManager but I was adviced to do less at first.",
      "parentUuid": "c48accff_4c5a4b3b",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89bfd358_e900fcc7",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-10-14T22:04:14Z",
      "side": 1,
      "message": "I\u0027m guessing Kyle\u0027s comment is not something that needs to be addressed, and think we should move forward with this CL as is.",
      "parentUuid": "ecbaad5b_76ca26cf",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d36e0f3b_ef1585de",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 142,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-17T22:06:11Z",
      "side": 1,
      "message": "I think we can deal with it later.",
      "parentUuid": "89bfd358_e900fcc7",
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec916f5e_e128b796",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 177,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "I think the using of shared mem should be restricted on AMD hardwares. Apple\u0027s doc says\nwe should only use it for small buffers.\nhttps://developer.apple.com/documentation/metal/resource_fundamentals/choosing_a_resource_storage_mode_for_intel_and_amd_gpus?language\u003dobjc\n\n```\nA relatively small buffer that changes frequently, and both the CPU and the GPU\naccess it. Choose the MTLStorageModeShared mode.\n\nA relatively large buffer that changes frequently, and both the CPU and the GPU\naccess it. Choose the MTLStorageModeManaged mode. Always synchronize the buffer\nafter modifying its contents with the CPU or the GPU.\n```",
      "range": {
        "startLine": 177,
        "startChar": 9,
        "endLine": 177,
        "endChar": 18
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d1e0e7a_5bc48c01",
        "filename": "src/libANGLE/renderer/metal/mtl_buffer_manager.mm",
        "patchSetId": 14
      },
      "lineNbr": 177,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "I agree with your assessment of the docs. I think though that we should deal with this in a separate issue.\n\nhttps://bugs.chromium.org/p/angleproject/issues/detail?id\u003d7749\n\nI don\u0027t want to just blindly pick. We need tests to prove that one choice is better than another.\n\nBut fyi, unless I\u0027m mis-understanding, alwaysUseManagedStorageModeForBuffers is true for AMD so we\u0027re not using shared at all on AMD with this CL",
      "parentUuid": "ec916f5e_e128b796",
      "range": {
        "startLine": 177,
        "startChar": 9,
        "endLine": 177,
        "endChar": 18
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acebf545_02eee462",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2094,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2022-10-12T17:40:20Z",
      "side": 1,
      "message": "Could we do the same for Metal backend? creating several test instances with overridden feature flags. For example, override the \"AlwaysUseManagedStorageModeForBuffers\" or \"AlwaysUseSharedStorageModeForBuffers\" or \"AlwaysUseStagedBufferUpdates\" feature flag to be always true.\n\nJust to verify different scenarios regardless of the underlying hardwares.",
      "range": {
        "startLine": 2094,
        "startChar": 60,
        "endLine": 2094,
        "endChar": 85
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e0331db_69fbcd9d",
        "filename": "src/tests/gl_tests/BufferDataTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2094,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2022-10-13T17:35:59Z",
      "side": 1,
      "message": "added",
      "parentUuid": "acebf545_02eee462",
      "range": {
        "startLine": 2094,
        "startChar": 60,
        "endLine": 2094,
        "endChar": 85
      },
      "revId": "08d09c6bf3eee992adea01d0d22a52d8be9d1087",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}