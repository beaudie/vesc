{
  "comments": [
    {
      "key": {
        "uuid": "9d127cd7_cfc375cc",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 13
      },
      "lineNbr": 68,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "Any chance to remove isUnsizedArray? It seems more nature to have arraySize \u003d\u003d 0 to represent un-sized array. Is it possible to let arraySize \u003d\u003d -1 to indicate non-array then?",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60fe3835_d5b06900",
        "filename": "include/GLSLANG/ShaderVars.h",
        "patchSetId": 13
      },
      "lineNbr": 68,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "I prefer not changing the meaning of arraySize. ShaderVars.h will be used in chromium not only in ANGLE. And getOutermostArraySize() also depends on arraySize.",
      "parentUuid": "9d127cd7_cfc375cc",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97c718ea_bb27d506",
        "filename": "src/compiler/translator/blocklayout.h",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "Prefer to use parent constructor.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 62,
        "endChar": 46
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f35f633_e9b06812",
        "filename": "src/compiler/translator/blocklayout.h",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "97c718ea_bb27d506",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 62,
        "endChar": 46
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d753583_4b6fe4a8",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2994,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T06:16:37Z",
      "side": 1,
      "message": "Better to refactor a common interface block traverse method, and then use various visitors to update shader reference and define block members.",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8535dee7_bcb9050b",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 2994,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Sorry, it\u0027s hard to refactor a common interface block traverse method since their operations are very different. If you have any good idea, please let me know. Thanks.",
      "parentUuid": "8d753583_4b6fe4a8",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991134af_da0981a8",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3028,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T03:21:51Z",
      "side": 1,
      "message": "vertex or compute never updated?",
      "range": {
        "startLine": 3028,
        "startChar": 16,
        "endLine": 3028,
        "endChar": 60
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87780a2c_71f10660",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3028,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "They have been recorded in DefineInterfaceBlockMembers.",
      "parentUuid": "991134af_da0981a8",
      "range": {
        "startLine": 3028,
        "startChar": 16,
        "endLine": 3028,
        "endChar": 60
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80d80af9_a337d89d",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3054,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "Top level only makes sense to member fields other than buffer. isBufferTopLevel seems confusing.\nProbably you can use \"int nestLevel\"!",
      "range": {
        "startLine": 3054,
        "startChar": 47,
        "endLine": 3054,
        "endChar": 63
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfce4f2_75b78077",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3054,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Rename to \u0027isTopShaderStorageBlockMembers\u0027",
      "parentUuid": "80d80af9_a337d89d",
      "range": {
        "startLine": 3054,
        "startChar": 47,
        "endLine": 3054,
        "endChar": 63
      },
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22672729_31cf4c98",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3063,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "Add todo for arrays of arrays.",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e38ca7d0_64e7a464",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3063,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22672729_31cf4c98",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afe5a1d9_761cbc1e",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3071,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "if (nestLevel \u003d\u003d 0 and blockType \u003d\u003d sh::BlockType::BLOCK_UNIFORM)\n    elementCount \u003d 1;",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47602a2d_50f04730",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3071,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "I have changed isBufferTopLevel to isTopShaderStorageBlockMembers to make it easy to understand.",
      "parentUuid": "afe5a1d9_761cbc1e",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01d9bef1_75aa8798",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3118,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T03:21:51Z",
      "side": 1,
      "message": "we have gotten shader references here. Do we really need to call updateInterfaceBlockMembersShaderReferenced?",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c583ac5c_f1e6cb9f",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3118,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Here only record the current block members\u0027 shader reference. updateInterfaceBlockMembersShaderReferenced is used to update fragment shader\u0027s reference if the block has been used in vertex shader.",
      "parentUuid": "01d9bef1_75aa8798",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de227699_2bb304f8",
        "filename": "src/tests/gl_tests/ProgramInterfaceTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 537,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T06:16:37Z",
      "side": 1,
      "message": "Better to have a case for both referenced by vertex and fragment shader.",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50e54439_f0fcf257",
        "filename": "src/tests/gl_tests/ProgramInterfaceTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 537,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "blockName1.f1 is referenced both by vertex and fragment shader.",
      "parentUuid": "de227699_2bb304f8",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "472dd788_efb96a7a",
        "filename": "src/tests/gl_tests/ProgramInterfaceTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 539,
      "author": {
        "id": 1109831
      },
      "writtenOn": "2017-10-30T02:48:43Z",
      "side": 1,
      "message": "As the layout is std140, does this mean the stride should known?",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9e87261_389acff2",
        "filename": "src/tests/gl_tests/ProgramInterfaceTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 539,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-11-01T08:05:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "472dd788_efb96a7a",
      "revId": "749cfb52e6385310e0ddd1353e0bee442a2ca829",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}