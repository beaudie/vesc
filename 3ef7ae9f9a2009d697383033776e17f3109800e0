{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c2c1c46c_87f5beac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T15:16:54Z",
      "side": 1,
      "message": "Switching reviewers to Gregg (metal/ developer).\n\nAlso, please add a regression test in GLSLTest.cpp",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aef2a1ed_110e9d06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T15:49:51Z",
      "side": 1,
      "message": "I can do that, but I have to ask: why? I\u0027m not against unit tests - I like them. But adding a one-off test for this specific issue feels reactive, and doesn\u0027t solve much? ProgramPrelude.cpp is 4k lines long, and includes about 1k lines of analogous logic for every other combination of operator and types. There are no tests for any of that. Even the three other cases immediately surrounding this change are un-tested in GLSLTest, as far as I can tell.\n\nIf this were a tricky piece of code that were somehow likely to break in the future by a refactor, adding a one-off test would make sense. But this is just incomplete coverage of the operator/type feature matrix - I can\u0027t justify adding a test for this without testing everything else in that matrix, too.",
      "parentUuid": "c2c1c46c_87f5beac",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ecd0902_06d19628",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T15:52:43Z",
      "side": 1,
      "message": "... unless you want me to bring over Skia\u0027s more comprehensive tests that encompass this? eg: https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/resources/sksl/shared/MatrixScalarMath.sksl",
      "parentUuid": "aef2a1ed_110e9d06",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb802668_56f8af33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T16:04:38Z",
      "side": 1,
      "message": "So dEQP has a _lot_ of tests. Ideally, that would have covered _every_ combination of operators and types, but it might have missed one here or there. That\u0027s why a specific test for this combination is ok, because it\u0027s filling in a specific gap. Porting all of Skia\u0027s tests would probably overlap a lot with dEQP, so not a very good use of time.\n\nThe goal is just to make sure we don\u0027t find a regression with this on the roll to Skia, but rather in our own CQ. Also allows us to be sure it works on other backends too that Skia may not be currently testing.\n\nThat said, maybe this _is_ covered by dEQP, and we are simply not running dEQP for metal? @gman @kbr",
      "parentUuid": "0ecd0902_06d19628",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df97cf47_81d1a5b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T16:09:12Z",
      "side": 1,
      "message": "Right, makes sense. There\u0027s also the fact that I\u0027m not sure I can (easily) prove the unit test catches the issue. Skia\u0027s test that triggers this only fails on one of the three devices where we test (the one running 10.15), which doesn\u0027t make much sense to me. I see no affordance for this operator combo in MSL, so even our newer devices running OS12 should be failing ... but aren\u0027t.",
      "parentUuid": "eb802668_56f8af33",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}