{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c2c1c46c_87f5beac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T15:16:54Z",
      "side": 1,
      "message": "Switching reviewers to Gregg (metal/ developer).\n\nAlso, please add a regression test in GLSLTest.cpp",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aef2a1ed_110e9d06",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T15:49:51Z",
      "side": 1,
      "message": "I can do that, but I have to ask: why? I\u0027m not against unit tests - I like them. But adding a one-off test for this specific issue feels reactive, and doesn\u0027t solve much? ProgramPrelude.cpp is 4k lines long, and includes about 1k lines of analogous logic for every other combination of operator and types. There are no tests for any of that. Even the three other cases immediately surrounding this change are un-tested in GLSLTest, as far as I can tell.\n\nIf this were a tricky piece of code that were somehow likely to break in the future by a refactor, adding a one-off test would make sense. But this is just incomplete coverage of the operator/type feature matrix - I can\u0027t justify adding a test for this without testing everything else in that matrix, too.",
      "parentUuid": "c2c1c46c_87f5beac",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ecd0902_06d19628",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T15:52:43Z",
      "side": 1,
      "message": "... unless you want me to bring over Skia\u0027s more comprehensive tests that encompass this? eg: https://source.chromium.org/chromium/chromium/src/+/main:third_party/skia/resources/sksl/shared/MatrixScalarMath.sksl",
      "parentUuid": "aef2a1ed_110e9d06",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb802668_56f8af33",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T16:04:38Z",
      "side": 1,
      "message": "So dEQP has a _lot_ of tests. Ideally, that would have covered _every_ combination of operators and types, but it might have missed one here or there. That\u0027s why a specific test for this combination is ok, because it\u0027s filling in a specific gap. Porting all of Skia\u0027s tests would probably overlap a lot with dEQP, so not a very good use of time.\n\nThe goal is just to make sure we don\u0027t find a regression with this on the roll to Skia, but rather in our own CQ. Also allows us to be sure it works on other backends too that Skia may not be currently testing.\n\nThat said, maybe this _is_ covered by dEQP, and we are simply not running dEQP for metal? @gman @kbr",
      "parentUuid": "0ecd0902_06d19628",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df97cf47_81d1a5b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T16:09:12Z",
      "side": 1,
      "message": "Right, makes sense. There\u0027s also the fact that I\u0027m not sure I can (easily) prove the unit test catches the issue. Skia\u0027s test that triggers this only fails on one of the three devices where we test (the one running 10.15), which doesn\u0027t make much sense to me. I see no affordance for this operator combo in MSL, so even our newer devices running OS12 should be failing ... but aren\u0027t.",
      "parentUuid": "eb802668_56f8af33",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "919f4b7a_2435c47e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-05T16:11:23Z",
      "side": 1,
      "message": "Fun times! :)",
      "parentUuid": "df97cf47_81d1a5b9",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f52aa1e_ca71991f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T16:17:22Z",
      "side": 1,
      "message": "Aha. Playing with this at https://shader-playground.timjones.io/de4043b67f30973986b53164dcd43d74, it looks like it started being supported at 2.3 (setting the version to anything lower produces some variant of the errors we saw on our bots).",
      "parentUuid": "df97cf47_81d1a5b9",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "067773af_99f04c4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-05T18:30:59Z",
      "side": 1,
      "message": "So, my best guess is that CTS does have coverage for this:\n\n  functional.shaders.matrix.div_assign.*\n  \n... but it\u0027s just not being caught because no one is running against Metal \u003c 2.3?",
      "parentUuid": "8f52aa1e_ca71991f",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c6947ab_438be771",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-06T12:56:14Z",
      "side": 1,
      "message": "Just to be clear: I think that adding a unit test for this specific case would be redundant with existing CTS coverage. I *think* that we just haven\u0027t found this via CTS because we haven\u0027t run on a device with MSL \u003c 2.3. (I don\u0027t have one available to confirm locally, though).",
      "parentUuid": "067773af_99f04c4b",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5bb8662_81cd7845",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-06T18:02:21Z",
      "side": 1,
      "message": "lgtm given this workaround has been used elsewhere.\n\nI\u0027m generally in favor of adding a unit test referring to the bug ID even if it might be covered by the larger test suite, since it wasn\u0027t actually caught by the larger suite (for whatever reason), and it\u0027s easier to verify that the fix works for the unit test.\n",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dddc89c_c3055874",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-06T19:15:58Z",
      "side": 1,
      "message": "From analyzing recent crash reports of Chrome\u0027s finching of the Metal backend, this could very well be the cause of a significant increase in Skia shaders failing to compile on macOS 10.13 and 10.14.\n",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa06990c_89da9b6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2022-05-11T21:50:36Z",
      "side": 1,
      "message": "Can we move this workaround forward?\n\nWould it be possible to limit the Metal and/or OS version that this workaround applies to?\n",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b34f79eb_d730415a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1185214
      },
      "writtenOn": "2022-05-11T23:59:10Z",
      "side": 1,
      "message": "Regarding version-limiting: Apple\u0027s documentation seems at odds with any (principled) way of doing that.\n\n1) There is no way to get old versions of the language documentation - they only appear to host the most recent version.\n2) Even if you look at the most recent version of the specification, there is NO reason to believe this workaround is optional. Clearly, they added their own polyfill to the standard library, but I don\u0027t see that documented anywhere. The section on operators and matrices is still very explicit about what\u0027s supported, and that doesn\u0027t include the operations that this (and the other polyfills in ProgramPrelude) are responsible for.",
      "parentUuid": "fa06990c_89da9b6e",
      "revId": "3ef7ae9f9a2009d697383033776e17f3109800e0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}