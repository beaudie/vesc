{
  "comments": [
    {
      "key": {
        "uuid": "6797b751_7aa371ad",
        "filename": "BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "This would normally go in vulkan_config in the layers BUILD.gn. To match the other platforms. Is there a reason it needs to be here?",
      "range": {
        "startLine": 449,
        "startChar": 19,
        "endLine": 449,
        "endChar": 42
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d116320_20dca063",
        "filename": "BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "The contents of that file are not included in the Fuchsia build; Fuchsia provides prebuilt validation layers and if we build them ourselves they won\u0027t support the Fuchsia extensions.\n\nI added an assert(!is_fuchsia) to the layers BUILD.gn to avoid generating any of the layer targets, and to make sure accidental dependencies on them cause an error at \"gn gen\" time and not at compile time or later.\n\nShould we move all the configs to a better place? third_party/vulkan-validation-layers/BUILD.gn seems like an odd place for them as they are needed regardless of whether validation is enabled.",
      "parentUuid": "6797b751_7aa371ad",
      "range": {
        "startLine": 449,
        "startChar": 19,
        "endLine": 449,
        "endChar": 42
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47065bdf_b19df1df",
        "filename": "BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-06T17:36:31Z",
      "side": 1,
      "message": "This sounds good. Please move vulkan_config to this file inside the angle_enable_vulkan block. Try removing the API_NAME line entirely from vulkan_config. API_NAME is already specified in a public config in the loader. So we might not need to duplicate it.",
      "parentUuid": "4d116320_20dca063",
      "range": {
        "startLine": 449,
        "startChar": 19,
        "endLine": 449,
        "endChar": 42
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a361564_ee804d4a",
        "filename": "BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 449,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-09T00:24:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47065bdf_b19df1df",
      "range": {
        "startLine": 449,
        "startChar": 19,
        "endLine": 449,
        "endChar": 42
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f958cf5_d4390604",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-04T22:03:25Z",
      "side": 1,
      "message": "Should this be \u0027struct FushiaEGLWindow\u0027?",
      "range": {
        "startLine": 129,
        "startChar": 8,
        "endLine": 129,
        "endChar": 14
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "872daec0_38776202",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "eglCreatePlatformWindowSurface uses void *. I think that\u0027s probably the right thing for new platforms to use (and that this typedef and the variable signature of eglCreateWindowSurface was a mistake).\n\nWe did the same thing with USE_OZONE but we used intptr_t because X11 windows are integers and C spec says it\u0027s undefined behavior to put an integer into a pointer.",
      "parentUuid": "3f958cf5_d4390604",
      "range": {
        "startLine": 129,
        "startChar": 8,
        "endLine": 129,
        "endChar": 14
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f946bb4f_22643e8b",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-06T17:36:31Z",
      "side": 1,
      "message": "intptr_t or void * both sound good to me.",
      "parentUuid": "872daec0_38776202",
      "range": {
        "startLine": 129,
        "startChar": 8,
        "endLine": 129,
        "endChar": 14
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a37951ce_06873c80",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-09T00:24:00Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f946bb4f_22643e8b",
      "range": {
        "startLine": 129,
        "startChar": 8,
        "endLine": 129,
        "endChar": 14
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "689f2350_68633305",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "my layer understanding is a bit weak. But maybe you should remove this from the list of enabled extensions if the fuchsia layer provides them. Instead of adding the special case in this function. i.e. , the intent of this function is just to do \"dumb\" list matching.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bfd7b5a_602cf7cd",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "We can\u0027t use functions for extensions that are not enabled (the loader will refuse look them up for us).\n\nThe spec actually says that layers may not add new functions. The Fuchsia spec adds new extensions which add new functions. I don\u0027t think this is really the intended use of layers but that\u0027s how Fuchsia has organized things. The result is that they don\u0027t enumerate, but we have to know that the layer makes them available and ask for them anyway.",
      "parentUuid": "689f2350_68633305",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c945871b_ef45b5ce",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-06T17:36:31Z",
      "side": 1,
      "message": "Still don\u0027t understand. Why do you need to include them in enabledExtensionNames here if you are skipping the check? Just remove them from enabledExtensionNames before entering this function.",
      "parentUuid": "4bfd7b5a_602cf7cd",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c7438ff_4af16daa",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T18:41:17Z",
      "side": 1,
      "message": "Removing from the list passed would not work. Vulkan extensions are opt-in, unlike OpenGL extensions; the list is passed to vkCreateInstance.\n\nWe could add them to the list after running this function, but that would require building the list in a different order depdending on IsFuchsia(). I\u0027m happy to do that if that\u0027s better.\n\nThis VerifyExtensionsPresent might not actually be useful, because the loader does the same checks inside vkCreateInstance(). It will not create a VkInstance that enables extensions which are not available\n\nShould we just remove this check? Or call VerifyExtensionsPresent on a partial list? Or just remove VerifyExtensionsPresent?",
      "parentUuid": "c945871b_ef45b5ce",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a0e18df_6b8ee8ee",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-02-06T19:37:01Z",
      "side": 1,
      "message": "\u003e Removing from the list passed would not work. Vulkan extensions are opt-in, unlike OpenGL\n\u003e extensions; the list is passed to vkCreateInstance.\n\nVK_KHR_SURFACE_EXTENSION_NAME is passed to vkCreateInstance. VK_KHR_SWAPCHAIN_EXTENSION_NAME is passed to vkCreateDevice. For VK_KHR_SURFACE_EXTENSION_NAME we first verify the VkInstance extension is exposed by calling vkEnumerateInstanceExtensionProperties. Similarly we also call vkEnumerateDeviceExtensionProperties to find VK_KHR_SWAPCHAIN_EXTENSION_NAME for the device. Presumably VK_FUCHSIA_imagepipe_surface is a device extension.\n\nPlease check my understanding here. The Fuchsia layer does *not* expose VK_KHR_SWAPCHAIN_EXTENSION_NAME/VK_KHR_SURFACE_EXTENSION_NAME extensions via vkEnumerateInstanceExtensionProperties and vkEnumerateDeviceExtensionProperties and *does* require that we pass them to vkCreateInstance and vkCreateDevice.\n\nIf this is so, it\u0027s a bug in the Fuchsia layer. It\u0027s fine to commit a workaround but we should try to fix it upstream in parallel. I\u0027d prefer to do it with building the list in a different order based on IsFuchsia(). If that\u0027s not the case, please correct me.\n\nI\u0027d prefer to keep the checks for ANGLE internally to understand what layers are available and report problems before calling the loader.",
      "parentUuid": "3c7438ff_4af16daa",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da34aa3e_c97790ac",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T21:07:43Z",
      "side": 1,
      "message": "The missing piece of the puzzle is that I didnt\u0027 realize the EnumerateExtensions functions had a layer argument :(\n\nIf we want to do our own checking we also have to iterate over explicit layers.",
      "parentUuid": "9a0e18df_6b8ee8ee",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "899db4d9_5fa0d99f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 93,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-09T00:24:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da34aa3e_c97790ac",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 93,
        "endChar": 6
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4b4c584_876db099",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 639,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "maybe you can use angle::FixedVector here to save the one allocation. Maybe have a fixed limit of 20 layers or something. A tiny thing but wouldn\u0027t hurt.",
      "range": {
        "startLine": 639,
        "startChar": 4,
        "endLine": 639,
        "endChar": 48
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b559dde0_4af0a45a",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 639,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4b4c584_876db099",
      "range": {
        "startLine": 639,
        "startChar": 4,
        "endLine": 639,
        "endChar": 48
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9943bd66_ab77586e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 841,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "same comment.",
      "range": {
        "startLine": 841,
        "startChar": 4,
        "endLine": 841,
        "endChar": 48
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45bb4c43_44f90f0e",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 841,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9943bd66_ab77586e",
      "range": {
        "startLine": 841,
        "startChar": 4,
        "endLine": 841,
        "endChar": 48
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a805732_97b5def9",
        "filename": "src/libANGLE/renderer/vulkan/fuchsia/WindowSurfaceVkFuchsia.cpp",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-02-04T22:03:25Z",
      "side": 1,
      "message": "I think you can simplify this a bunch by doing:\n\n   FuchsiaEGLWindow* fushiaWindow \u003d static_cast\u003cFuchsiaEGLWindow*\u003e(window);\n   if (fushiaWindow.magic !\u003d FUCHSIA_EGL_WINDOW_MAGIC || fushiaWindow.size !\u003d sizeof(FuchsiaEGLWindow))\n   {\n       return false;\n   }",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37cfb5c7_f1feb4fe",
        "filename": "src/libANGLE/renderer/vulkan/fuchsia/WindowSurfaceVkFuchsia.cpp",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "It doesn\u0027t make much sense to me to cast before doing the checks because the checks are trying to determine whether the cast is safe. memcpy is safer in terms of the the types of violation that can be diagnosed without running afoul of undefined behavior.\n\nThe latest patch removes the struct though.",
      "parentUuid": "5a805732_97b5def9",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cba63624_fdcdd0e5",
        "filename": "src/libANGLE/renderer/vulkan/fuchsia/WindowSurfaceVkFuchsia.cpp",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T18:41:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "37cfb5c7_f1feb4fe",
      "range": {
        "startLine": 30,
        "startChar": 4,
        "endLine": 39,
        "endChar": 5
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff1e5c15_2a21dc1b",
        "filename": "src/libANGLE/renderer/vulkan/fuchsia/WindowSurfaceVkFuchsia.cpp",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "request: can you make \n\nextern PFN_vkCreateImagePipeSurfaceFUCHSIA vkCreateImagePipeSurfaceFUCHSIA;\n\nin vk_utils.h? And add a helper InitFuchsia\u003c...\u003eFunctions next to the InitDebugUtilsEXTFunctions? Look for PFN_vkCreateDebugUtilsMessengerEXT in vk_utils.h",
      "range": {
        "startLine": 45,
        "startChar": 9,
        "endLine": 45,
        "endChar": 41
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3663a989_00bd5396",
        "filename": "src/libANGLE/renderer/vulkan/fuchsia/WindowSurfaceVkFuchsia.cpp",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff1e5c15_2a21dc1b",
      "range": {
        "startLine": 45,
        "startChar": 9,
        "endLine": 45,
        "endChar": 41
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab681175_faacbedb",
        "filename": "util/OSWindow.h",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-31T18:33:49Z",
      "side": 1,
      "message": "Can you mention this is necessary because the ANGLE tests try to re-use the same Window with different EGL resources?",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af42930d_cd1eebc4",
        "filename": "util/OSWindow.h",
        "patchSetId": 7
      },
      "lineNbr": 43,
      "author": {
        "id": 1001794
      },
      "writtenOn": "2019-02-06T16:41:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab681175_faacbedb",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "21f0b35f650bb6c54447868122636cb4fcfa01cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}