{
  "comments": [
    {
      "key": {
        "uuid": "c5f91ed7_4448eeba",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 10
      },
      "lineNbr": 941,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "Instead of calling getPublicType() here, I think a better alternative would be to add a \"getParameterQualifiers\" function to qualifierSequence that would return the main qualifier and also have precision qualifier as an out parameter. The getParameterQualifiers function could include many of the checks below, with the exception of checkOutParameterIsNotSampler.",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_64c40a11",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 10
      },
      "lineNbr": 941,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "checkIsParameterQualifierValid also checks for the layout qualifier and invariant. \nMight be good to keep it as it is?\n\nAlso, in the next patch in that function there will be some additional checks regarding images.\nI.e. a check will be needed whether memory qualifiers are allowed with the parameter.",
      "parentUuid": "c5f91ed7_4448eeba",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_849026f5",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 10
      },
      "lineNbr": 941,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T14:06:25Z",
      "side": 1,
      "message": "I think that this would definitely be better if changed as I suggested. Conceptually, the \"publicType\" doesn\u0027t really make sense here - it doesn\u0027t represent a type, but the list of qualifiers. It would be neater to do the validation for the list of qualifiers in the TQualifierSequence, and only return the relevant information from there. That also makes it possible to more cleanly separate the different Evq values that are used for parameters vs. other variables. TQualifierSequence::getPublicType wouldn\u0027t need to be able to join \"EvqOut\" and \"EvqIn\" at all, but just \"EvqFragmentOut\" and other such variations. And the suggested \"getParameterQualifiers\" doesn\u0027t need nearly as complex logic as the regular \"getPublicType\" path, though some of the code can of course be shared.",
      "parentUuid": "c5f91ed7_64c40a11",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_84626611",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 10
      },
      "lineNbr": 941,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T15:38:16Z",
      "side": 1,
      "message": "Done.\nYes, it looks better. Also, separated the joining of qualifiers into 2 functions - one for variables and one for function parameters.",
      "parentUuid": "c5f91ed7_849026f5",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_6419aad5",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1745,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T11:09:03Z",
      "side": 1,
      "message": "Changed this check a bit so that addInvariantVarying never gets called if the invariant has not been declared at global scope. The addInvariantVarying method contains an assert which would fail if we do not return early.",
      "range": {
        "startLine": 1742,
        "startChar": 8,
        "endLine": 1745,
        "endChar": 9
      },
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_e46d9a34",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "I\u0027d still mention at least in a comment here why the iteration starts from 1 instead of 0.",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_84d706bc",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 41,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5f91ed7_e46d9a34",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_a477a200",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 520,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "Rename to \"checkOrderIsValid\". Including \"QualifierSequence\" in the name is redundant, and prefix \"check\" is now commonly used in ParseContext for functions that generate error messages.\n\nAlso pass in TDiagnostics * instead of TParseContext *.",
      "range": {
        "startLine": 520,
        "startChar": 25,
        "endLine": 520,
        "endChar": 49
      },
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_64ed2a87",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 520,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5f91ed7_a477a200",
      "range": {
        "startLine": 520,
        "startChar": 25,
        "endLine": 520,
        "endChar": 49
      },
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_c4729e12",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 538,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "Instead of passing in the whole context, could pass in TDiagnostics *.",
      "range": {
        "startLine": 538,
        "startChar": 61,
        "endLine": 538,
        "endChar": 68
      },
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_44ea2e71",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 538,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5f91ed7_c4729e12",
      "range": {
        "startLine": 538,
        "startChar": 61,
        "endLine": 538,
        "endChar": 68
      },
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_a450c265",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 703,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "These already combined types should not be here - they\u0027re never going to be in the list of qualifiers. This includes:\n\nCentroidOut, CentroidIn, FlatOut, FlatIn, SmoothOut, SmoothIn.\n\nRemember to remove the unnecessary join functions for these as well.",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_24e732a9",
        "filename": "src/compiler/translator/QualifierTypes.cpp",
        "patchSetId": 10
      },
      "lineNbr": 703,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "c5f91ed7_a450c265",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_445fce79",
        "filename": "src/compiler/translator/QualifierTypes.h",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "Member variable should be after private functions.",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_04e436a0",
        "filename": "src/compiler/translator/QualifierTypes.h",
        "patchSetId": 10
      },
      "lineNbr": 130,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5f91ed7_445fce79",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_246cd230",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 10
      },
      "lineNbr": 619,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-08-29T12:15:44Z",
      "side": 1,
      "message": "struct is not the correct token here - you should rather use the identifier used to name the interface block, for example. This should be accessible through $2.string.",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f91ed7_e4811aae",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 10
      },
      "lineNbr": 619,
      "author": {
        "id": 1160819
      },
      "writtenOn": "2016-08-29T13:56:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5f91ed7_246cd230",
      "revId": "d78a8c827a89987c7d7003171467f82476dfa504",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}