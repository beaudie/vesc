{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c8d03b77_35302a34",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-12T16:58:19Z",
      "side": 1,
      "message": "LGTM other than two naming suggestions",
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2202845_211d2d49",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-12T16:58:19Z",
      "side": 1,
      "message": "Also similar to my suggestion in other CL: IMO, we should rename StateCache at line 148 to SharedStateCache and keep this one as StateCache (or ContextStateCache if you prefer, but may looks redundant when all access is from context.",
      "range": {
        "startLine": 121,
        "startChar": 6,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "814f7c4a_be6b89d1",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 121,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-12T18:49:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d2202845_211d2d49",
      "range": {
        "startLine": 121,
        "startChar": 6,
        "endLine": 121,
        "endChar": 23
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab72022c_a63bc316",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-12T16:58:19Z",
      "side": 1,
      "message": "I guess this is done this way mainly because you inherit from previous code. But why not just one API: invalidateCachedBasicDrawStates? The API should describe what it does instead of who the caller is.",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba85e3b6_a8fbeeb3",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-12T17:06:18Z",
      "side": 1,
      "message": "Quite the opposite actually, in general we do `onWhatHappened()`, and the caller doesn\u0027t have to know what to do in that case.\n\nSee for example `onDrawFramebufferRenderPassDescChange`, `onHostVisibleBufferWrite`, `onBeginTransformFeedback`, `onColorAccessChange`, etc in ContextVk.",
      "parentUuid": "ab72022c_a63bc316",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65a5c890_5a4f3526",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-07-12T17:26:22Z",
      "side": 1,
      "message": "If this method involves complicated work that hard to explain with a method name, on??? might be a bit useful. But on??? methods are in general against C++ design philosophy, where each method should describe what it does.",
      "parentUuid": "ba85e3b6_a8fbeeb3",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7e0ecc79_626c920c",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-07-12T18:31:08Z",
      "side": 1,
      "message": "onX is fairly common for callback naming. The caller doesn\u0027t necessarily know what needs to happen but wants to communicate what did happen. The reaction to the change can stay as an implementation detail.\n\nGenerally, yes, 100% agree that method names should represent what they do.",
      "parentUuid": "65a5c890_5a4f3526",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4ae7d3c_dece06fc",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-07-12T18:49:21Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "7e0ecc79_626c920c",
      "range": {
        "startLine": 127,
        "startChar": 8,
        "endLine": 132,
        "endChar": 30
      },
      "revId": "d63dabb5b7ddf2844cdeb5b1a617327d94e1ed57",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}