{
  "comments": [
    {
      "key": {
        "uuid": "6f649d13_6383c7b1",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:18:31Z",
      "side": 1,
      "message": "These were unique among all stages as I expected the same resource name (such as sampler, image, buffer etc) to have the same set/binding across all stages.\n\nDo separable programs somehow end up with different values for these, perhaps because these store a pre-PPO-link value at some point?\n\nIt\u0027s not very clear to me why this change was necessary.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1a179a_52ac5239",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T20:07:23Z",
      "side": 1,
      "message": "When compiling separable programs, we don\u0027t know that a resource has the same name across multiple shader stages, because we only have a single shader stage\u0027s information at any particular time.   This is because I took the simple(r) approach of not attempting to combine the uniform/texture/sampler/etc. lists from multiple ProgramStates and then assigning binding values.   Instead, each shader stage is handled independently when generating binding values.\n\nThis allows us to not really care what any previous (or future) stages are using, we just care what the last binding value they consumed for a particular descriptor set is so it doesn\u0027t get stepped on by the next stage.\n\nA future enhancement could attempt to combine those lists, removing duplicate entries once we\u0027ve determined they really are the same resources, but that doesn\u0027t appear to be necessary (yet) to get the base functionality in place.",
      "parentUuid": "6f649d13_6383c7b1",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dcd185_f9fde6f2",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:18:31Z",
      "side": 1,
      "message": "Should be a bool now",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b66e6aa_ffb7d043",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T20:07:23Z",
      "side": 1,
      "message": "We are still able to use this as a bit map for \"ANGLEUniformBlock\", since that\u0027s the one uniform that\u0027s guaranteed to be the same for every shader in the PPO.\n\nIf we\u0027re willing to special-case that uniform (meaning we check for that name every time we deal with ShaderInterfaceVariableInfo for uniforms), I\u0027m fine changing this to a bool.   That feels a little more hackey than the extra bit checking to me though, especially since string comparisons are worse than bit-wise shifts+ANDs.",
      "parentUuid": "63dcd185_f9fde6f2",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}