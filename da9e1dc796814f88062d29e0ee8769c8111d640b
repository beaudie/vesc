{
  "comments": [
    {
      "key": {
        "uuid": "6f649d13_6383c7b1",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:18:31Z",
      "side": 1,
      "message": "These were unique among all stages as I expected the same resource name (such as sampler, image, buffer etc) to have the same set/binding across all stages.\n\nDo separable programs somehow end up with different values for these, perhaps because these store a pre-PPO-link value at some point?\n\nIt\u0027s not very clear to me why this change was necessary.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1a179a_52ac5239",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T20:07:23Z",
      "side": 1,
      "message": "When compiling separable programs, we don\u0027t know that a resource has the same name across multiple shader stages, because we only have a single shader stage\u0027s information at any particular time.   This is because I took the simple(r) approach of not attempting to combine the uniform/texture/sampler/etc. lists from multiple ProgramStates and then assigning binding values.   Instead, each shader stage is handled independently when generating binding values.\n\nThis allows us to not really care what any previous (or future) stages are using, we just care what the last binding value they consumed for a particular descriptor set is so it doesn\u0027t get stepped on by the next stage.\n\nA future enhancement could attempt to combine those lists, removing duplicate entries once we\u0027ve determined they really are the same resources, but that doesn\u0027t appear to be necessary (yet) to get the base functionality in place.",
      "parentUuid": "6f649d13_6383c7b1",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46688f9e_9660b457",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T02:50:09Z",
      "side": 1,
      "message": "Excuse my ignorance, you know better than me at this point, so I\u0027m just trying to make sure I understand it well.\n\nSay you have program1 with VS, which has samplers \"s1\" and \"s2\". Then you have program2 with FS, which has samplers \"s2\" and \"s3\".\n\nHow many bindings will the combined PPO consume, 3 or 4?\n\n\u003e not attempting to combine the uniform/texture/sampler/etc. lists from multiple ProgramStates and then assigning binding values.\n\nI remember uniform values where a property of Program, is that true for samplers too? Like does the application do:\n\n    glUseProgram(program1);\n    // bind t1 to s1\n    // bind t2 to s2\n    glUseProgram(program2);\n    // bind t3 to s2\n    // bind t4 to s3\n\nAnd then the PPO will have 4 samplers even though s2 has the same name between them?\n\nOr is the PPO expected to \"link\" the two s2 samplers and somehow pick either t2 or t3 to bind to it? Or do you have to do something like this?\n\n    // Create PPO\n    // pick VS from program1\n    // pick FS from program2\n    // bind t1 to s1\n    // bind t2 to s2\n    // bind t3 to s3\n\nWhat do resource limits say?",
      "parentUuid": "cf1a179a_52ac5239",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eaa59e2_2a8688c6",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-19T17:57:05Z",
      "side": 1,
      "message": "\u003e Say you have program1 with VS, which has samplers \"s1\" and \"s2\". Then you have program2 with FS, which has samplers \"s2\" and \"s3\".\n\n\u003e How many bindings will the combined PPO consume, 3 or 4?\n\nThe PPO will consume 4 bindings, since there isn\u0027t any logic yet to determine that \"s2\" is the same sampler in both shaders.   That\u0027s certainly something we should look into adding once this stuff has landed, but doesn\u0027t appear necessary yet.",
      "parentUuid": "46688f9e_9660b457",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cb1b2fe_71458aa5",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-19T18:32:45Z",
      "side": 1,
      "message": "Ok, I understand it will consume 4 bindings with this implementation. I was asking to know if/what the spec mandates.\n\nIf the spec mandates anything, it should be deducible from any per-stage and combined limits it would require.",
      "parentUuid": "3eaa59e2_2a8688c6",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "140773bd_9e9e4f02",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-19T22:38:04Z",
      "side": 1,
      "message": "The only driver I\u0027ve hit any resource limit problems on so far is SwS:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2067101/44/src/tests/gl_tests/TextureTest.cpp\n\nAs that points out, this isn\u0027t just a PPO problem since monolithic programs assign bindings for each shader stage the same way.\n\nI\u0027m not sure what the right answer is.   So far, it seems like this will work for conformance and then we can clean it up further with follow-on CLs since that should be far enough of an edge-case (and \u0027real\u0027 driver limits are high enough) that this hopefully won\u0027t affect real apps.",
      "parentUuid": "6cb1b2fe_71458aa5",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4283986_0020b6ad",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 66,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-19T22:53:54Z",
      "side": 1,
      "message": "Cleaning it up post-land sounds fine to me. Our goal is a PoC conformance submission. We don\u0027t want to ship this way so we can investigate merging descriptor sets as part of performance improvement.\n\nWe could check if Manhattan/T-Rex are affected.",
      "parentUuid": "140773bd_9e9e4f02",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 66,
        "endChar": 38
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dcd185_f9fde6f2",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-13T18:18:31Z",
      "side": 1,
      "message": "Should be a bool now",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b66e6aa_ffb7d043",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T20:07:23Z",
      "side": 1,
      "message": "We are still able to use this as a bit map for \"ANGLEUniformBlock\", since that\u0027s the one uniform that\u0027s guaranteed to be the same for every shader in the PPO.\n\nIf we\u0027re willing to special-case that uniform (meaning we check for that name every time we deal with ShaderInterfaceVariableInfo for uniforms), I\u0027m fine changing this to a bool.   That feels a little more hackey than the extra bit checking to me though, especially since string comparisons are worse than bit-wise shifts+ANDs.",
      "parentUuid": "63dcd185_f9fde6f2",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6074c0ff_3303583b",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-14T02:50:09Z",
      "side": 1,
      "message": "So, for every resource other than the driver uniforms, we have\n\n    map[stage][name].activeStages \u003d\u003d 1 \u003c\u003c stage\n\nbut for driver uniforms we have:\n\n    map[stage][ANGLEUniformBlock].activeStages \u003d\u003d 0xF\n\nis that right?\n\nWhy does ANGLEUniformBlock have to be special? Could you point out the code that relies on this?\n\n---\n\nOh, is it related to the \"not attempting to combine the uniform/texture/sampler/etc. lists from multiple ProgramStates and then assigning binding values\" statement in the other comment? As in, ANGLEUniformBlock consumes a single binding for all stages, while every other resource has a different binding per stage?\n\nIn that case, it\u0027s fine (though still a bit weird).",
      "parentUuid": "3b66e6aa_ffb7d043",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78a071cb_eabf2a7e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-19T17:57:05Z",
      "side": 1,
      "message": "\u003e As in, ANGLEUniformBlock consumes a single binding for all stages, while every other resource has a different binding per stage?\n\nCorrect.\n\nI don\u0027t think ANGLEUniformBlock has to be special, it just can be since that\u0027s the only uniform that\u0027s guaranteed to be present and available for all shaders.\n\nIt should be possible to treat it like every other uniform and assign it one binding per shader (and make each binding specific to that shader) if that\u0027s what you\u0027d prefer.",
      "parentUuid": "6074c0ff_3303583b",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b77ffc_f21de78d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 42
      },
      "lineNbr": 74,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-19T18:32:45Z",
      "side": 1,
      "message": "No that\u0027s fine. I guess when/if linkage of resources is implemented this can be properly generalized.",
      "parentUuid": "78a071cb_eabf2a7e",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 20
      },
      "revId": "da9e1dc796814f88062d29e0ee8769c8111d640b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}