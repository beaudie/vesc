{
  "comments": [
    {
      "key": {
        "uuid": "776627bf_8f7a939e",
        "filename": "src/common/utilities.h",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "This lists 3 states, but there are only 2 enum values.   Why isn\u0027t the \"forced off\" case in the enum?   Maybe remove the \"forced off\" portion of this comment?",
      "range": {
        "startLine": 232,
        "startChar": 34,
        "endLine": 232,
        "endChar": 94
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e017a0e_20b69603",
        "filename": "src/common/utilities.h",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "776627bf_8f7a939e",
      "range": {
        "startLine": 232,
        "startChar": 34,
        "endLine": 232,
        "endChar": 94
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a191e577_6286a67c",
        "filename": "src/common/utilities.h",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "Since there are only 2 states, does this need to be an enum?   Can TextureState::mSrgbOverride just be a bool instead (and renamed to \u0027mEnableSrgbOverride\u0027)?",
      "range": {
        "startLine": 234,
        "startChar": 11,
        "endLine": 234,
        "endChar": 23
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "512b92ce_463fac9a",
        "filename": "src/common/utilities.h",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Creating an enum as it will be added to with the EXT_texture_sRGB_decode change.",
      "parentUuid": "a191e577_6286a67c",
      "range": {
        "startLine": 234,
        "startChar": 11,
        "endLine": 234,
        "endChar": 23
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bb6c734_62124764",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 863,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "Why does this need to take a Context* parameter?",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aab64c3c_11bc582a",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 863,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Following pattern from other setState functions (see Texture::setSwizzleRed, other Texture::set functions)",
      "parentUuid": "1bb6c734_62124764",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a167ca5_e7775e71",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 867,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "We probably want to only set this dirty bit if the value actually changes.",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8072b8a1_69fe1b6d",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 3
      },
      "lineNbr": 867,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a167ca5_e7775e71",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1b47f4d_98d8c34d",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1471,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "Can requiresNewImageAttributes above instead be:\n\n    VkImageUsageFlags oldImageUseFlags \u003d mImageUsageFlags;\n\nThen, this conditional can become:\n\n    if (oldImageUseFlags !\u003d mImageUsageFlags)\n\nThat way we don\u0027t need to set a conditional every time we modify mImageCreateFlags and any new blocks that modify mImageCreateFlags will get respecifyImageAttributes() called for free.",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b3f25b8_bbb57ef9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1471,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2020-05-07T21:17:51Z",
      "side": 1,
      "message": "Note that the first \"if\" block above updates mImageUsageFlags, but the second one updates mImageCreateFlags so both of those would have to be compared to the original in the proposed modification.",
      "parentUuid": "a1b47f4d_98d8c34d",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "985e2cc2_ef60b373",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1471,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b3f25b8_bbb57ef9",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1969572_a711ec3e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1674,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "The spec definition of VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT:\n\nVK_IMAGE_CREATE_MUTABLE_FORMAT_BIT specifies that the image can be used to create a VkImageView with a different format from the image. For multi-planar formats, VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT specifies that a VkImageView can be created of a plane of the image.\n\nIt feels a little weird to redefine VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT within ANGLE to mean \"sRGB\".   I\u0027m not sure of a better answer though.",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c191403e_f526dc65",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1674,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "We are not redefining mutable to mean sRGB, we are establishing a relationship between the two- if the texture has this VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT enabled, then the texture can support sRGB reinterpretation.\nWe are not excluding the use of VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT for other features.",
      "parentUuid": "c1969572_a711ec3e",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a31cc69_ee627136",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1676,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "TextureVk::syncState() sets VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT if getSRGBOverride() !\u003d gl::SrgbOverride::Default, which (presumably) could be either enabled or disabled, if disabled is meant to be supported also.   However, this only supports getSRGBOverride() returning enabled, since it assumes we want to skip the decode here.\n\nIs the \u0027disabled\u0027 part of the feature meant to be supported?",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7716ee2_71145133",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1676,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "The \u0027disabled\u0027 part of the feature is addressed in the change for EXT_texture_sRGB_decode. The purpose for implementing EXT_texture_sRGB_override first is to lay the groundwork for sRGB imageview reinterpretation that will be used for EXT_texture_sRGB_decode.",
      "parentUuid": "0a31cc69_ee627136",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eadd56d8_fb2f9f2a",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "How exhaustive do we expect these lists of formats to become and when can/should new formats be added?",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1709af4a_4a8583f1",
        "filename": "src/libANGLE/renderer/vulkan/vk_format_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "This lists all formats which have a corresponding VK format with the linearity inverted. EXT_texture_sRGB_override prescribes a specific list of formats which it is valid to reinterpret between, which this list is a superset of.",
      "parentUuid": "eadd56d8_fb2f9f2a",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b48d0b2_d7e6c58e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4025,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "linearFormat was just used above to initialize mLinearReadImageView.   Can linearFormat actually be VK_FORMAT_UNDEFINED here?   If so, what does that mean for the call to initLayerImageViewImpl() above?   Should the conditional on line 4006 actually be:\n\n    if ((linearFormat !\u003d VK_FORMAT_UNDEFINED) \u0026\u0026 !mLinearReadImageView.valid())",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16214478_7a71806c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4025,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "You\u0027re right, we don\u0027t need the VK_FORMAT_UNDEFINED check here.",
      "parentUuid": "6b48d0b2_d7e6c58e",
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eb47fdb_e5158c58",
        "filename": "src/tests/gl_tests/SRGBTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-07T02:19:13Z",
      "side": 1,
      "message": "These essentially look like random numbers.   Is there a way to make them more human-readable?\n\nWe have these already:\n\n    [[[ ANGLETest.cpp ]]]\n    const GLColorRGB GLColorRGB::green(0u, 255u, 0u);\n    const GLColorRGB GLColorRGB::red(255u, 0u, 0u);\n    const GLColorRGB GLColorRGB::yellow(255u, 255u, 0);\n\n    const GLColor GLColor::black            \u003d GLColor(0u, 0u, 0u, 255u);\n    const GLColor GLColor::blue             \u003d GLColor(0u, 0u, 255u, 255u);\n    const GLColor GLColor::cyan             \u003d GLColor(0u, 255u, 255u, 255u);\n\nCan you add the sRGB versions you are using here?",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 278,
        "endChar": 40
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b864add2_dd757f09",
        "filename": "src/tests/gl_tests/SRGBTextureTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 278,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2020-05-14T00:12:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6eb47fdb_e5158c58",
      "range": {
        "startLine": 277,
        "startChar": 0,
        "endLine": 278,
        "endChar": 40
      },
      "revId": "64166269941a0bba474b99f772fe30bf6c2bb1f8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}