{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6000678f_d0cb0dca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-04T01:48:31Z",
      "side": 1,
      "message": "Hi Geoff,\n\nThese are the tests we talked about earlier to recreate ANGLE\u0027s glWaitSync/glFlush behavior where a vkQueueSubmit is issued each time.   The FenceSyncTest seems to work fine and shows the bad behavior, however the MultithreadingTestES3 generates lots of VVL errors and then hangs:\n\nERR: RendererVk.cpp:338 (DebugUtilsMessenger): [ VUID-vkCmdWaitEvents-srcStageMask-parameter ] Validation Error: [ VUID-vkCmdWaitEvents-srcStageMask-parameter ] Object 0: handle \u003d 0x5566ff9c4e30, type \u003d VK_OBJECT_TYPE_COMMAND_BUFFER; | MessageID \u003d 0x3cbdb1db | Submitting cmdbuffer with call to VkCmdWaitEvents using srcStageMask 0x2000 which must be the bitwise OR of the stageMask parameters used in calls to vkCmdSetEvent and VK_PIPELINE_STAGE_HOST_BIT if used with vkSetEvent but instead is 0x0. The Vulkan spec states: srcStageMask must be a valid combination of VkPipelineStageFlagBits values (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-vkCmdWaitEvents-srcStageMask-parameter)\n\nCan you help take a look at what I\u0027m doing wrong with that test?   For more context, I\u0027m trying to follow along with this:\nhttps://arm-software.github.io/opengl-es-sdk-for-android/thread_sync.html",
      "revId": "83a3740baaae1e40c2d55df77bf1ff02ff207c92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c68ecc3_f1df6fa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-04T03:45:09Z",
      "side": 1,
      "message": "Looking at SyncVk, the error says there\u0027s a stage missing from vkCmdWaitEvents. We do:\n\n    commandBuffer.setEvent(mEvent.getHandle(), VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT);\n\nand\n\n    commandBuffer.waitEvents(1, mEvent.ptr(), VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,\n                             VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, 0, nullptr, 0, nullptr, 0,\n                             nullptr);\n\nThe VVL error says that waitEvents should have `VK_PIPELINE_STAGE_HOST_BIT` in srcStageMask, which is missing. Please add that Tim and see if things improve!",
      "parentUuid": "6000678f_d0cb0dca",
      "revId": "83a3740baaae1e40c2d55df77bf1ff02ff207c92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5854f0cd_e7cf8554",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-05T00:46:24Z",
      "side": 1,
      "message": "Add VK_PIPELINE_STAGE_HOST_BIT doesn\u0027t help.   I think the VVL message is worded a bit awkwardly:\n\nHere is the spec language it\u0027s trying to quote:\n\n\u003e The first synchronization scope only includes event signal operations that operate on members of pEvents, and the operations that happened-before the event signal operations. Event signal operations performed by vkCmdSetEvent that occur earlier in submission order are included in the first synchronization scope, if the logically latest pipeline stage in their stageMask parameter is logically earlier than or equal to the logically latest pipeline stage in srcStageMask. Event signal operations performed by vkSetEvent are only included in the first synchronization scope if VK_PIPELINE_STAGE_HOST_BIT is included in srcStageMask.\n\nSo, instead, the VVL message should be something like:\n\nSubmitting cmdbuffer with call to VkCmdWaitEvents using srcStageMask 0x2000 which must be:\n- the bitwise OR of the stageMask parameters used in calls to vkCmdSetEvent\nor\n- VK_PIPELINE_STAGE_HOST_BIT if used with vkSetEvent\nbut instead is 0x0.\n\nThe part I don\u0027t understand is the \"but instead is 0x0\".   As you pointed out, but the vkCmdSetEvent() and vkCmdWaitEvents() are both using VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, so it seems like a bitwise OR would give the same VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT.   vkSetEvent() isn\u0027t being called here, since we aren\u0027t trying to signal the event with the CPU.\n\nI\u0027m not entirely convinced the Vulkan errors are the correct thing to be debugging either though, since I suspect my GLES code is probably not good to begin with.",
      "parentUuid": "8c68ecc3_f1df6fa8",
      "revId": "83a3740baaae1e40c2d55df77bf1ff02ff207c92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d19c3c8_21eb2002",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-11-05T04:31:03Z",
      "side": 1,
      "message": "Maybe it\u0027s a VVL bug?",
      "parentUuid": "5854f0cd_e7cf8554",
      "revId": "83a3740baaae1e40c2d55df77bf1ff02ff207c92",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}