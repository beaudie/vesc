{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "efdcf3b1_e9675493",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-03T17:16:56Z",
      "side": 1,
      "message": "nit: prefix with \"Vulkan: \"",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 4
      },
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8aa60e3_99645817",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2021-03-03T15:36:42Z",
      "side": 1,
      "message": "Shabi: PTAL. Thanks!\n\nKind of surprised there\u0027s no coverage of this; I can look into a unit test if you like.",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "570f74d4_185c1842",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-03T15:42:31Z",
      "side": 1,
      "message": "Can we get a regression test for this? Seems like fairly major functionality.",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53403363_b4eba257",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2021-03-03T16:35:25Z",
      "side": 1,
      "message": "Sure. Should it go in PBOExtensionTest?\n\nIn fact, there\u0027s already a test in there that *should* be exercising this, I think: it\u0027s a glReadPixels into a PBO with a non-zero \"pixels\" param. But it doesn\u0027t end up in ImageHelper::readPixels() at all.\n\nShabi: halp?",
      "parentUuid": "570f74d4_185c1842",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b33677bd_14bd76b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-03T17:16:56Z",
      "side": 1,
      "message": "A format thing, we have the \"fast\" and \"slow\" paths. What format is the Dawn test using?",
      "parentUuid": "53403363_b4eba257",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7abdcfc_e9911a20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2021-03-03T17:24:14Z",
      "side": 1,
      "message": "Hmm, looks like NV_pixel_buffer_object isn\u0027t exposed on the Vulkan backend (or the OpenGL backend, for that matter), so these tests aren\u0027t run. They seem to pass if I force them (this looks like stuff that should run in ES3, I think?). They don\u0027t use the fast path, though, so I\u0027ll probably need to add a new case.",
      "parentUuid": "b33677bd_14bd76b0",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d26007c_ab39e399",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2021-03-03T17:24:52Z",
      "side": 1,
      "message": "The storage test above uses GL_RED / GL_UNSIGNED_INT, IIRC. But another test that fails is using plain ol\u0027 RGBA8.",
      "parentUuid": "d7abdcfc_e9911a20",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a169220_5292b372",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1116015
      },
      "writtenOn": "2021-03-03T17:33:49Z",
      "side": 1,
      "message": "Looking a bit more, it doesn\u0027t exercise the fast path because it\u0027s reading from BGRA into RGBA.",
      "parentUuid": "3d26007c_ab39e399",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3fc4568_4ac826ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-03T17:52:14Z",
      "side": 1,
      "message": "Stephen, we have a number of tests in gl_tests/ReadPixelsTest.cpp that use pack buffers. There are others too if you search for GL_PIXEL_PACK_BUFFER in src/tests/gl_tests.\n\nMy suggestion is to add a breakpoint (or ASSERT(false) in the path you are modifying), run the end2end tests and see which test hits it. Then duplicate that test and change the offset to be non zero.",
      "parentUuid": "8a169220_5292b372",
      "revId": "66411fa3da4870dbf851946272ae02826fd65188",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}