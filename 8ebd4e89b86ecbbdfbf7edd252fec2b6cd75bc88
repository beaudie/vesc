{
  "comments": [
    {
      "key": {
        "uuid": "b16e3c6a_bfc19159",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-11-15T23:15:53Z",
      "side": 1,
      "message": "Re-using the \"attribute\" terminology for compute shaders feels odd since CS inputs aren\u0027t attributes (they aren\u0027t really anything, just inputs), but seems like the best choice given the current options:\n\n    std::vector\u003cShaderVariable\u003e *mAttribs;\n    std::vector\u003cShaderVariable\u003e *mOutputVariables;\n    std::vector\u003cShaderVariable\u003e *mUniforms;\n    std::vector\u003cShaderVariable\u003e *mInputVaryings;\n    std::vector\u003cShaderVariable\u003e *mOutputVaryings;\n    std::vector\u003cInterfaceBlock\u003e *mUniformBlocks;\n    std::vector\u003cInterfaceBlock\u003e *mShaderStorageBlocks;\n    std::vector\u003cInterfaceBlock\u003e *mInBlocks;\n\nAnd the corresponding Shader lists:\n\n    std::vector\u003csh::ShaderVariable\u003e mInputVaryings;\n    std::vector\u003csh::ShaderVariable\u003e mOutputVaryings;\n    std::vector\u003csh::ShaderVariable\u003e mUniforms;\n    std::vector\u003csh::InterfaceBlock\u003e mUniformBlocks;\n    std::vector\u003csh::InterfaceBlock\u003e mShaderStorageBlocks;\n    std::vector\u003csh::ShaderVariable\u003e mAllAttributes;\n    std::vector\u003csh::ShaderVariable\u003e mActiveAttributes;\n    std::vector\u003csh::ShaderVariable\u003e mActiveOutputVariables;\n\nIt seems like a refactor to remove the attribute/varying designations to just become \"inputs\" may be a better idea, which would allow CS, VS, and FS to reuse a lot of the same code that\u0027s currently duplicated purely for naming:\n\nvoid CollectVariablesTraverser::recordBuiltInAttributeUsed(const TVariable \u0026variable,\n                                                           bool *addedFlag)\n{\n    if (!(*addedFlag))\n    {\n        ShaderVariable info;\n        setBuiltInInfoFromSymbol(variable, \u0026info);\n        info.staticUse \u003d true;\n        info.active    \u003d true;\n        info.location  \u003d -1;\n        mAttribs-\u003epush_back(info);\n        (*addedFlag) \u003d true;\n    }\n}\n\nvoid CollectVariablesTraverser::recordBuiltInVaryingUsed(const TVariable \u0026variable,\n                                                         bool *addedFlag,\n                                                         std::vector\u003cShaderVariable\u003e *varyings)\n{\n    ASSERT(varyings);\n    if (!(*addedFlag))\n    {\n        ShaderVariable info;\n        setBuiltInInfoFromSymbol(variable, \u0026info);\n        info.staticUse   \u003d true;\n        info.active      \u003d true;\n        info.isInvariant \u003d mSymbolTable-\u003eisVaryingInvariant(variable);\n        varyings-\u003epush_back(info);\n        (*addedFlag) \u003d true;\n    }\n}\n\nAlmost all of that code is the same, except which list the variables get added to and a unique field being set (info.location, info.isInvariant).\n\nRemoving the attribute/varying designation could turn into a sizable refactor though; larger than what I\u0027d want to clutter this CL up with anyway.\n\nThoughts on the best way to handle this?",
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0e94eac_d1a9ba96",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-11-19T21:01:38Z",
      "side": 1,
      "message": "I think this approach is fine for now.  They just end up as defines in the shader code to communicate things.  If we add a new vector, we could call it inputs or builtins.\n\nActually, to get us half way there, how about adding a new recordInputUsed method that just calls recordBuiltInAttributeUsed internally?  That way we can change the internals of it later without the call sites.",
      "parentUuid": "b16e3c6a_bfc19159",
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2873523f_29c48985",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-19T22:42:20Z",
      "side": 1,
      "message": "I would actually leave it as is, because the code later in this review is all tied to attributes.  You can change the interfaces later if the refactor ever happens.",
      "parentUuid": "c0e94eac_d1a9ba96",
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2f291e4_7d05ba49",
        "filename": "src/compiler/translator/CollectVariables.cpp",
        "patchSetId": 1
      },
      "lineNbr": 488,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-11-20T16:56:27Z",
      "side": 1,
      "message": "I\u0027m going to take Cody\u0027s approach and leave this CL a bit more focused on just the changes to get the compute shader queries to work.\n\nI\u0027ve opened anglebug.com/4152 to tackle the refactor and mentioned these functions in the description.",
      "parentUuid": "2873523f_29c48985",
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89968733_1acdc957",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1805,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2019-11-19T21:01:38Z",
      "side": 1,
      "message": "Should we add an else with an assert that shader-\u003egetInputVaryings is empty?",
      "range": {
        "startLine": 1805,
        "startChar": 4,
        "endLine": 1805,
        "endChar": 5
      },
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "143d86ba_c497a39a",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1805,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-11-20T16:56:27Z",
      "side": 1,
      "message": "Hm, I\u0027m not sure there\u0027s much benefit with doing that from a readability perspective.   The tricky part is that each shader type is being handled differently in here:\n\nvertex: return immediately, since attributes are already in mProgramInputs (done in Program::linkAttributes)\ncompute: add attributes to mProgramInputs\nfragment: add varyings to mProgramInputs\n\nThat should just leave geometry shaders that are currently unprocessed, which we may need to handle eventually (as part of 3.2?) if the refactoring work done for anglebug.com/4152 isn\u0027t able to get rid of this function entirely.\n\nI\u0027d also need to add return statements into each block (or convert this to a switch statement), since the Shader\u0027s mInputVaryings isn\u0027t being emptied, we\u0027re just grabbing some pointers.\n\nMy vote is to avoid the ASSERT() for now, but I can update it if you think it would help catch some tricky bugs.",
      "parentUuid": "89968733_1acdc957",
      "range": {
        "startLine": 1805,
        "startChar": 4,
        "endLine": 1805,
        "endChar": 5
      },
      "revId": "8ebd4e89b86ecbbdfbf7edd252fec2b6cd75bc88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}