{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "127c7fc2_343e277d",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-07T19:09:53Z",
      "side": 1,
      "message": "Why this assert? Looks like other methods would just overwrite silently, so this becomes a special case?",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95459ce0_44056341",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-07T19:24:08Z",
      "side": 1,
      "message": "This just moving the assertion from caller to here. Previously I have to assert on caller because some variables are not cleared during relink. Now with recent change from shabi, this appears have been fixed, so I am moving the assertion from caller to here.",
      "parentUuid": "127c7fc2_343e277d",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90a7d29b_b4ee0900",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-07T19:28:21Z",
      "side": 1,
      "message": "To me this looks like something that should be asserted by the caller, not this class, because then a random reader of this file might be wondering \"Why is readVector() special? Am I missing something?\"",
      "parentUuid": "95459ce0_44056341",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29b739c6_84dd4faf",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-07T20:10:07Z",
      "side": 1,
      "message": "It kinda make sense here IMO because `readBytes` is overwriting the whole vector. This class is used to load things, and so everything is assumed uninitialized. The confusing part is probably the name of the function which doesn\u0027t convey that information (but a cleanup of the names in these classes is a out of scope of this change)",
      "parentUuid": "90a7d29b_b4ee0900",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6847645_73ce0ddb",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-07T20:19:08Z",
      "side": 1,
      "message": "Makes sense! Just looked odd to me.",
      "parentUuid": "29b739c6_84dd4faf",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a6e4d33_4c344ff7",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-07T20:22:06Z",
      "side": 1,
      "message": "Its not really special. Other read*** APIs dont have a way to do this kind of assertion (that we are not overwriting but appending). You could argue we should add similar assertion in readString, which I think we probably should.",
      "parentUuid": "29b739c6_84dd4faf",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 30
      },
      "revId": "b34dfd822c00bbcf8d9d32c2c065703cab0b2899",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}