{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d759a3cc_d138f056",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T01:52:51Z",
      "side": 1,
      "message": "Split change. It\u0027s purely noop refactoring + passing pools around.",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b653e85_768a843b",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-20T16:57:24Z",
      "side": 1,
      "message": "Why does CommandQueue use the passed in CommandPool, but CommandProcessor queries for it here?",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6ae08e_80c91b68",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-20T17:35:41Z",
      "side": 1,
      "message": "To avoid locks, here\u0027s how things work:\n\n- Non-async: ContextVk owns the pools and makes allocations from them. Passes in its pools to CommandQueue.\n- Async: ContextVk hands off work to CommandProcessor. CommandProcessor owns the pools and makes allocations from them.",
      "parentUuid": "2b653e85_768a843b",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfa3d657_cf9dae1a",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-20T17:42:06Z",
      "side": 1,
      "message": "Sounds like you should redesign to make the CommandQueue own the pools in all cases, whether it is async or sync.",
      "parentUuid": "5a6ae08e_80c91b68",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81bc8ea2_bc8a0853",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T19:24:50Z",
      "side": 1,
      "message": "That doesn\u0027t quite work. Assume N contexts. We have only 1 CommandQueue/CommandProcessor in Renderer. In the non-async case, we use N pools; one per context. In the async case, we use 2 pools, one for non-protected and one for protected commands.\n\nCan\u0027t just move the pools to CommandQueue without introducing locks for the non-async case.",
      "parentUuid": "bfa3d657_cf9dae1a",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db1d3fe9_b6c434c4",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-21T19:30:17Z",
      "side": 1,
      "message": "Sounds like a design flaw then. We should fix it.. what bad would happen if we tried to make the async operation use N pools for N contexts? What are the challenges with that?",
      "parentUuid": "81bc8ea2_bc8a0853",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e91c9688_053fbd60",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.cpp",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-21T19:34:07Z",
      "side": 1,
      "message": "We don\u0027t need N pools in the async case, since there is only one user of the pools (CommandProcessor). Using N pools would just use more memory.",
      "parentUuid": "db1d3fe9_b6c434c4",
      "range": {
        "startLine": 731,
        "startChar": 61,
        "endLine": 731,
        "endChar": 97
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8464794_1600a924",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 181,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T01:52:51Z",
      "side": 1,
      "message": "This pool was not used, and continues not to be used in this change.",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdeddc59_e7bef035",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T01:52:51Z",
      "side": 1,
      "message": "These pools weren\u0027t used, and they continue not to be used in this change.",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83efc7e1_11edcc9e",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-17T11:47:00Z",
      "side": 1,
      "message": "One of the Samsung patches removed these. Is there any downside to removing them?",
      "parentUuid": "bdeddc59_e7bef035",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "111fab84_e58586af",
        "filename": "src/libANGLE/renderer/vulkan/CommandProcessor.h",
        "patchSetId": 1
      },
      "lineNbr": 572,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T13:38:29Z",
      "side": 1,
      "message": "Yes there is. Vulkan secondary command buffers won\u0027t work. The final change in this series starts using these.",
      "parentUuid": "83efc7e1_11edcc9e",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48bb77a3_9ce139f2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 630,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-17T01:52:51Z",
      "side": 1,
      "message": "This pool was not used, and continues not to be used in this change.",
      "range": {
        "startLine": 630,
        "startChar": 79,
        "endLine": 630,
        "endChar": 91
      },
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3cf478ef_34b4c985",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2024,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-20T16:57:24Z",
      "side": 1,
      "message": "How does this work with all the move semantics to get here?   I\u0027m not an expert in this area, but it seems that all of the std::move() calls mean that someone at the end needs to take ownership of the object, since all of the old ones will be \"empty\" (including the original being passed in).   Since no one owns \u0027commandBuffer\u0027 here, what happens to this instance that\u0027s being reset, and what\u0027s in the original instance?",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10a19440_88c935aa",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2024,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-09-20T17:49:15Z",
      "side": 1,
      "message": "Although frequently used as such, `std::move()` doesn\u0027t actually mean I\u0027m no longer the owner. It just creates a reference. It\u0027s a special reference so that `f(X \u0026)` can be overloaded with `f(X \u0026\u0026)` and be a different function, otherwise `X \u0026` and `X \u0026\u0026` are practically the same thing (and so is `X *` in the end)\n\nThe reason I get a `CommandBuffer \u0026\u0026` here is for the sake of the last change in this CL that implements this for Vulkan secondary command buffers which do `std::move()` the argument and pass it around. See here: https://chromium-review.googlesource.com/c/angle/angle/+/2987873/6/src/libANGLE/renderer/vulkan/vk_helpers.cpp#2053\n\nI could have also passed in a pointer, but we conventionally use that for outputs.",
      "parentUuid": "3cf478ef_34b4c985",
      "revId": "df9849649de6617aedd788df40516696a9e8652d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}