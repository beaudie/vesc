{
  "comments": [
    {
      "key": {
        "uuid": "320693dd_0fc0006a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T17:53:07Z",
      "side": 1,
      "message": "Can\u0027t VkSemaphore be used for both ways as well?",
      "range": {
        "startLine": 36,
        "startChar": 48,
        "endLine": 42,
        "endChar": 27
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8975ef57_3cf5e2dd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T18:36:09Z",
      "side": 1,
      "message": "VkSemaphore GPU wait is paired with a submission, which is expensive and undesirable. There\u0027s no CPU wait on semaphores.\n\nIt\u0027s kind of weird that Vulkan has three synchronization semaphores that are really the same thing. Like CPU can wait on Fence, but not event. And semaphores are events that can cross queues. From what I hear, generalizing events to cross queues is too big an implementation hassle (not on the GPU, just the OS glue), so here we are.",
      "parentUuid": "320693dd_0fc0006a",
      "range": {
        "startLine": 36,
        "startChar": 48,
        "endLine": 42,
        "endChar": 27
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a71612_ab742ed3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "This is in reverse order.",
      "range": {
        "startLine": 1399,
        "startChar": 0,
        "endLine": 1406,
        "endChar": 0
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b378ef8b_20b644c8",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "Oops",
      "parentUuid": "11a71612_ab742ed3",
      "range": {
        "startLine": 1399,
        "startChar": 0,
        "endLine": 1406,
        "endChar": 0
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d38b1371_4ab8f8c2",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "From the description of eglClientWaitSyncKHR, sounds like waiting forever is the correct behavior in that case. Otherwise, flushCommands is unused.",
      "range": {
        "startLine": 80,
        "startChar": 46,
        "endLine": 81,
        "endChar": 25
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e46f6a01_f5a45117",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "The spec says:\n\n\u003e If the sync object being blocked upon will not be signaled in finite time ..., then eglClientWaitSync may wait forever.\n\nIt says \"may\". Would I be right to assume that means the driver may also find a way so this doesn\u0027t happen?\n\n---\n\nAlso, see next comment.",
      "parentUuid": "d38b1371_4ab8f8c2",
      "range": {
        "startLine": 80,
        "startChar": 46,
        "endLine": 81,
        "endChar": 25
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e7374c4_966bd7b5",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 81,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-25T19:50:48Z",
      "side": 1,
      "message": "You call this \"hasPendingWork\" in another method. Can you also make this a helper to the tune of \"hasPendingWork\"?",
      "parentUuid": "e46f6a01_f5a45117",
      "range": {
        "startLine": 80,
        "startChar": 46,
        "endLine": 81,
        "endChar": 25
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96550f3d_d1da65e3",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "It sounds like it should be possible for eglClientWaitSyncKHR to return before end of submission, i.e. if there are GL commands that were added after creating fence sync and before waiting, it is not necessary to wait for their execution as well.\nIs the current behavior the best we can implement with Vulkan, or is it possible to use something other than VkFence in the end of queue submit to signal the fence sync earlier?",
      "range": {
        "startLine": 87,
        "startChar": 19,
        "endLine": 87,
        "endChar": 82
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d7dde2_fdbfea4d",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "The only option to satisfy these, that I can think of, is what I had written in a comment above:\n\n\u003e We could test the event in a loop with a sleep, ...\n\nThis means we could **potentially** return earlier than when the fence is signaled (and can also implement the wait-forever behavior). However, I\u0027m not exactly sure that\u0027s a good approach either. We obviously don\u0027t want to busy wait, and sleep has wildly different precision on different platforms. So far, angle has avoided creating a cross-platform sleep, I\u0027m guessing for that reason.\n\nI also don\u0027t know if any application would really need to have the CPU wakeup while the GPU is in the middle of the submission work vs the end. I\u0027d be interested to know what would be the use case there.\n\nAll that said, I\u0027m open to suggestions.",
      "parentUuid": "96550f3d_d1da65e3",
      "range": {
        "startLine": 87,
        "startChar": 19,
        "endLine": 87,
        "endChar": 82
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d08204bc_6f29128d",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-25T19:50:48Z",
      "side": 1,
      "message": "The GLES wording is pretty clear: \n\n\"commands waiting on that sync object may not be unblocked until some time after the fence command completes.\"\n\nMy suggestion: don\u0027t worry about waking up before the fence. If it\u0027s not in the spec it\u0027s a suggestion that implementations don\u0027t do this and applications don\u0027t require it.",
      "parentUuid": "c1d7dde2_fdbfea4d",
      "range": {
        "startLine": 87,
        "startChar": 19,
        "endLine": 87,
        "endChar": 82
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e384b3e_c5aebd79",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "reverse order",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 77
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ff02af7_8f6a7068",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "`ANGLE_TRY` only checks for `angle::Result::Stop`, and lets both `Continue` and `Incomplete` through.",
      "parentUuid": "6e384b3e_c5aebd79",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 77
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4a721f3_8934b653",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-23T17:08:04Z",
      "side": 1,
      "message": "Ah, sorry, maybe I\u0027ve confused it with VK_TRY",
      "parentUuid": "7ff02af7_8f6a7068",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 91,
        "endChar": 77
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d262a039_7766aeb0",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "I think Jamie wanted to replace egl::Error with angle::Result.\nNot sure if Context already has support for it, though.",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 10
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a47d207a_19ae6933",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "Apparently that work for egl::Error has not yet started.",
      "parentUuid": "d262a039_7766aeb0",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 10
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0abc48e6_a8fe7686",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-22T22:04:03Z",
      "side": 1,
      "message": "Yeah. For Vulkan back-end we can use angle::Result and cast to egl::Error when needed. But for the egl:: world and Impl functions we need egl::Error still. There\u0027s an issue open for this at 3041.",
      "parentUuid": "a47d207a_19ae6933",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 10
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb7577c_9291de56",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 193,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-23T03:35:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0abc48e6_a8fe7686",
      "range": {
        "startLine": 193,
        "startChar": 0,
        "endLine": 193,
        "endChar": 10
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "132d1b2b_1ec325fd",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1001921
      },
      "writtenOn": "2019-01-22T20:40:01Z",
      "side": 1,
      "message": "I think in ANGLE we usually use containment and not inheritance for Impl functions.",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c6f4c01_0049005e",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-22T21:57:35Z",
      "side": 1,
      "message": "I could do that. Any arguments fore or against either implementation, Jamie?",
      "parentUuid": "132d1b2b_1ec325fd",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e99dad4e_e57f9958",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-01-22T22:04:03Z",
      "side": 1,
      "message": "I was about to say. Generally I prefer composition. Not that major problemss would come up with this situation. There\u0027s a whole wikipedia article about it here (didn\u0027t read it yet)\n\nhttps://en.wikipedia.org/wiki/Composition_over_inheritance",
      "parentUuid": "9c6f4c01_0049005e",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0325d1cf_955ec17f",
        "filename": "src/libANGLE/renderer/vulkan/SyncVk.h",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-01-23T03:35:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e99dad4e_e57f9958",
      "range": {
        "startLine": 53,
        "startChar": 38,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "b6a71b504f39da49d41d5ee1019b990c50e52ca6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}