{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "85c5e283_d25981c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-05-05T22:47:21Z",
      "side": 1,
      "message": "Comment",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34d2ae8f_b96de453",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-05-06T14:30:52Z",
      "side": 1,
      "message": "OK",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f63716b8_5223a3ce",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 80,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-05-05T22:47:21Z",
      "side": 1,
      "message": "Can you assume support for this mode? Utility in SurfaceVk::supportsPresentMode(mode). But, SurfaceVk::initializeImpl must be ran first to get present modes.",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67e6da54_60920bce",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 80,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-05-06T01:47:48Z",
      "side": 1,
      "message": "We can always add our own \"mode\" that does something similar. The GBM surface doesn\u0027t actually call ANI and QP, so this usage is really just a flag, and isn\u0027t otherwise used anywhere.\n\nIt\u0027s fine with me to use this, but if you want to be thorough, you can introduce a \"packed enum\" (similar to `enum class RenderPassLoadOp` e.g), and have `mSwapchainPresentMode` be a value of that type. Then when the VK value is needed, a lookup table would be used. Elsewhere, the enum values are used. Then you can add a non-Vulkan entry to that enum that\u0027d behave identically to DEMAND_REFRESH.",
      "parentUuid": "f63716b8_5223a3ce",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8fa732c_b28efaa2",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 80,
      "author": {
        "id": 1528827
      },
      "writtenOn": "2022-05-06T13:15:24Z",
      "side": 1,
      "message": "I believe first case would need a proper comment explaining the \"flag usage\". Second case will need some refactoring. Would you like me to create a CL for that preceding this one?",
      "parentUuid": "67e6da54_60920bce",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5e70ed4_87b77569",
        "filename": "src/libANGLE/renderer/vulkan/linux/gbm/SurfaceVkGbm.cpp",
        "patchSetId": 13
      },
      "lineNbr": 80,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-05-06T14:30:52Z",
      "side": 1,
      "message": "OK. Just didn\u0027t want it to be an issue. If you reuse this mode, then maybe add a note that it doesn\u0027t really need support from Window System.",
      "parentUuid": "f8fa732c_b28efaa2",
      "revId": "4fff96096c85bef808aa6c4df2fa8ed3909e5a41",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}