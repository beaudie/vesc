{
  "comments": [
    {
      "key": {
        "uuid": "4ef6ae04_4b30e3ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-07-28T15:05:26Z",
      "side": 1,
      "message": "This is the follow-up CL that Shabi and I discussed, and Tim encouraged in a previous CL.",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acc7c933_9ce87e69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T20:38:57Z",
      "side": 1,
      "message": "Some cleanup comments. Otherwise the change LGTM.",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a272e31e_eaf30715",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1716,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T20:38:57Z",
      "side": 1,
      "message": "It would be ideal if you could refactor things so that this could call TextureVk::initImageViews() and avoid the duplication (both duplication of swizzle calculation here, and the duplication of init[SRGB]ReadViews inside switchMaxLevel).\n\nFor example, initReadViews could call (the now private) initSRGBReadViews automatically based on a flag that\u0027s passed. Also, it could early out if views are already initialized. Then TextureVk::initImageViews() could just call initReadViews. Then we could also just call TextureVk::initImageViews() from here. TextureVk::initImageViews() could potentially update mCurrentMaxLevel itself.",
      "range": {
        "startLine": 1707,
        "startChar": 0,
        "endLine": 1716,
        "endChar": 60
      },
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a86359_aa8686cc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1716,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-07-29T03:42:23Z",
      "side": 1,
      "message": "I\u0027m moving in this direction, but ran out of time tonight.",
      "parentUuid": "a272e31e_eaf30715",
      "range": {
        "startLine": 1707,
        "startChar": 0,
        "endLine": 1716,
        "endChar": 60
      },
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7db423e1_99504a56",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5161,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T20:38:57Z",
      "side": 1,
      "message": "Isn\u0027t `initReadViews` only called once? Maybe something like this would work:\n\n- In the constructor, don\u0027t do anything\n- Here, initialize all the vectors to size levelCount. You can ASSERT(vectors_have_zero_size);\n- Remove mHighestSeenLevelCount.\n\nOr am I missing something?\n\n---\n\nEdit: I just noticed switchMaxLevel calls this function. Probably can split this and initSRGBReadViews to an Impl version of them. Then this function does the above initialization, and the Impl (also called from switchMaxLevel) ASSERTs that the vectors have the correct size.",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc788b67_e6194221",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5161,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-07-28T20:48:51Z",
      "side": 1,
      "message": "Yes, you are missing something:-).\n\nThe constructor has to set the vector size to 1 for the read views.  From dealing with test crashes with PatchSet 1, I learned that this method may never be called before the swapchain\u0027s ImageViewHelper\u0027s get*ImageView methods are called (with result being used).\n\nAs for splitting out an Impl method, let me think about that vs. your other idea (in TextureVk.cpp).",
      "parentUuid": "7db423e1_99504a56",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc61dbc6_3480edfc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5161,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T20:59:03Z",
      "side": 1,
      "message": "I remember having noticed this (initReadViews is not called for the swapchain images). The crash in RenderTargetVk::getAndRetainCopyImageView() can be better fixed by adding a `vk::ImageHelper::hasReadView(level)` function to be checked before the getCopyImageView() call (instead of calling that and then checking if the view is valid()).\n\nThe upside of doing that is that future calls to `get*ImageView()` where `initReadViews()` has not been called can ASSERT() instead of returning an invalid view.",
      "parentUuid": "fc788b67_e6194221",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a2ee768_d06c1fb7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5161,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-07-29T03:42:23Z",
      "side": 1,
      "message": "I did the last suggestion, and I\u0027m moving in this direction of the first suggestion.",
      "parentUuid": "dc61dbc6_3480edfc",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ed36e4d_94e5dbbf",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1588,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-28T20:59:03Z",
      "side": 1,
      "message": "Speaking of ASSERTs, with the suggested fix to RenderTargetVk::getAndRetainCopyImageView, all these functions should be able to `ASSERT(mCurrentMaxLevel \u003c ...ImageViews.size() \u0026\u0026 ...ImageViews[mCurrentMaxLevel].valid());`",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1afb302c_6286cf1b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1588,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-07-29T03:42:23Z",
      "side": 1,
      "message": "I\u0027m not sure about the \"....valid()\" part of that ASSERT, but I\u0027m trying it.",
      "parentUuid": "9ed36e4d_94e5dbbf",
      "revId": "f2893de858e3bb54eea860d4af5f25377fad457e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}