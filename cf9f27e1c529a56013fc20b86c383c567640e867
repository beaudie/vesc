{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0991abd5_962db745",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 527,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-28T19:29:56Z",
      "side": 1,
      "message": "One special thing about `hasActiveRenderPassWithCommands` was that if the render pass is active but _without_ commands (i.e. RP started just to set loadOps to clear), then the reclear would just overwrite the old clear values. With this change, the reclears turn into `vkCmdClearAttachment`.\n\nThis can actually happen with 3D or external textures (see the block starting at line 612), leading to `clearWithLoadOp` (line 620).\n\nIs it possible to add the `\u0026\u0026 has commands` bit back to this expression?",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c855ff53_03d50811",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 527,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-28T20:18:40Z",
      "side": 1,
      "message": "Thanks for catching this. Yes we should still check hasAnyCommand. Fixed.",
      "parentUuid": "0991abd5_962db745",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5594f0ea_fc75afd1",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 535,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-28T19:29:56Z",
      "side": 1,
      "message": "Is it possible to get here with an active render pass that\u0027s _not_ `mLastRenderPassQueueSerial`? That sounds like it can be problematic.",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b62a3fb7_602007ae",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 535,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-28T21:58:09Z",
      "side": 1,
      "message": "Added assertion.",
      "parentUuid": "5594f0ea_fc75afd1",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a0b6b6b_cfad418a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 535,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-29T02:01:50Z",
      "side": 1,
      "message": "Thanks.\n\nAm I missing something though, aren\u0027t the new and old code doing exactly the same thing?\n\n- If !Active, both go to `else`\n- If mLastRenderPassQueueSerial and empty, both go to `else`\n- If mLastRenderPassQueueSerial and !empty, both go to `if`\n- If Active but not mLastRenderPassQueueSerial, that\u0027s asserted as impossible",
      "parentUuid": "b62a3fb7_602007ae",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ae1789_735d5bfe",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 535,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-29T16:14:59Z",
      "side": 1,
      "message": "I think you confused `active` with `started but inactive`. `active` means RP is still open and active. `started but inactive` means onRenderPassFinished has been called we are about to endRP, but not yet end. The RP that started by UtilsVk::blitResolve is always a `started but inactive`, it never set ContextVk::mRenderPassCommandBuffer pointer. \n\nThe change here is that previously a clear call on a `started but inactive` render pass will go down deferred clear code path. i.e., isMidRenderPassClear will set to false because we were checking ContextVk::hasActiveRenderPassWithCommands(). After this CL, it now allows a midRenderPassClear on a `started but inactive` render pass, exactly try to address your comment in the other CL. No app actually runs into this but one of your test does. (Blit to depth buffer and then clear color buffer, which sounds like reasonable usage).",
      "parentUuid": "8a0b6b6b_cfad418a",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90230af6_ffbde1cc",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 3
      },
      "lineNbr": 535,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-29T16:22:27Z",
      "side": 1,
      "message": "Oh right, so the clear is now applied to the started/inactive RP and then `handleDirtyGraphicsRenderPass` makes the RP active right? Would it be easier if the RP is activated before the midRP clear is applied to it?\n\nResolving the thread nevertheless",
      "parentUuid": "07ae1789_735d5bfe",
      "revId": "cf9f27e1c529a56013fc20b86c383c567640e867",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}