{
  "comments": [
    {
      "key": {
        "uuid": "e4e74f4b_02f8a973",
        "filename": "src/libANGLE/ErrorStrings.h",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-06-20T21:19:29Z",
      "side": 1,
      "message": "thought:\n\nWhat about using a macro to reduce redundancy in this file.  Something like:\n\n   #define ERRMSG(name, message) static constexpr char *g_kError#name \u003d #message\n\nand then the messages become a bit more concise:\n\n   ERRMSG(InvalidDrawMode, \"Invalid draw mode.\");\n\nAdditionally, because this kinda mangles the variable names, there can be a getter to use in the error message generation if we want:\n\n   #define GET_ERROR_MESSAGE(name) g_kError#name\n\nI\u0027m open to ideas on this, there may be cleaner ways.",
      "range": {
        "startLine": 11,
        "startChar": 0,
        "endLine": 11,
        "endChar": 69
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65625b37_c30cf775",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1328,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-06-20T21:19:29Z",
      "side": 1,
      "message": "We\u0027ll need to be careful about cases like this.  These two errors are both due to an invalid program name but for a different reason and should be kept as distinct messages.",
      "range": {
        "startLine": 1321,
        "startChar": 8,
        "endLine": 1328,
        "endChar": 9
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b303729_59a765d3",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1328,
      "author": {
        "id": 1166724
      },
      "writtenOn": "2017-06-21T16:23:41Z",
      "side": 1,
      "message": "I feel the extra detail is informative/helpful. What if we ran with your earlier suggestion but also add a \"detail\" param to disambiguate there.",
      "parentUuid": "65625b37_c30cf775",
      "range": {
        "startLine": 1321,
        "startChar": 8,
        "endLine": 1328,
        "endChar": 9
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9abc7c9_b66cf3ff",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1328,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2017-06-21T20:17:20Z",
      "side": 1,
      "message": "The existing message \"Expected a program name, but found a shader name\" has only one occurrence I\u0027ve found - so would we rather keep this as a literal, or make a error message string for this one-off message? \n\nBryan\u0027s suggestion of a \"detail\" param is interesting - but I\u0027m having a hard time coming up with a detail message that is as informative and less verbose than the existing literal - at that point, why not just keep the literal?\n\nMy preference would be to keep one-off messages as literals.",
      "parentUuid": "3b303729_59a765d3",
      "range": {
        "startLine": 1321,
        "startChar": 8,
        "endLine": 1328,
        "endChar": 9
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33ad98f4_7dbe9fb0",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 5
      },
      "lineNbr": 5593,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-06-20T21:19:29Z",
      "side": 1,
      "message": "Not sure how I feel about loss of information like this.  Ones that are invalid due to missing extensions will be hard to make static.  Thoughts from others?",
      "range": {
        "startLine": 5593,
        "startChar": 54,
        "endLine": 5593,
        "endChar": 78
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64b4cfee_23fc8294",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 5
      },
      "lineNbr": 5593,
      "author": {
        "id": 1221469
      },
      "writtenOn": "2017-06-21T20:17:20Z",
      "side": 1,
      "message": "I was thinking in the context of the browser debug window, this error message would be accompanied by the line in the user\u0027s code that threw the message (how it currently works) - at that point it should be easy for the user to determine what function caused it, and which extension is not enabled.",
      "parentUuid": "33ad98f4_7dbe9fb0",
      "range": {
        "startLine": 5593,
        "startChar": 54,
        "endLine": 5593,
        "endChar": 78
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a64b8ba7_b8e5604c",
        "filename": "src/tests/gl_tests/WebGLCompatibilityTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 86,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-06-20T21:19:29Z",
      "side": 1,
      "message": "nit: add an operator\u003d\u003d for your message struct and use ASSERT_EQ below.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 86,
        "endChar": 1
      },
      "revId": "dbbdecc727fdbf49bcb9f2c5b277fd22c198d447",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}