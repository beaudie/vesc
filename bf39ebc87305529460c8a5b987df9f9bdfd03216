{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf50884_3aee1abe",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-22T14:08:27Z",
      "side": 1,
      "message": "I was expecting a fix to ValidateCopyTexImageParametersBase or something similar to that. We have this code:\n\n    if (std::numeric_limits\u003cGLsizei\u003e::max() - xoffset \u003c width ||\n        std::numeric_limits\u003cGLsizei\u003e::max() - yoffset \u003c height)\n    {\n        context-\u003evalidationError(entryPoint, GL_INVALID_VALUE, kOffsetOverflow);\n        return false;\n    }\n    \nMaybe we need a similar check for x/y?",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5d123e2_37f147dc",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-04-22T16:51:53Z",
      "side": 1,
      "message": "Yes that was my first patch. After the discussion during the scrum meeting, I think we would prefer to not throw errors more than what OpenGL spec states: https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glCopyTexImage2D.xml. But it seems that the kOffsetOverflow error above is also not in the spec. If we are already throwing errors more than what spec states, then I agree that adding the checking in validate call is a better solution.",
      "parentUuid": "7bf50884_3aee1abe",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2eed26f_a8576f22",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-04-22T17:29:53Z",
      "side": 1,
      "message": "You can try it on native GLES driver to see what their behavior is. We should have consistent behavior to existing drivers regarding error.\n\nI thought this whole logic can be as simple as this:\n\n...\nif(ClipRectangle(...))\n{\n   ...\n}\nelse\n{\n    // Source area is out of bounds. Force using copySubImage when we\u0027re not \n    // copying to and from the same texture\n    forceCopySubImage \u003d (sourceReadAttachment-\u003egetResource() !\u003d this);\n}\n\nI thought clipRectangle is already doing the out of bounds check? (maybe I am wrong, so please do verify)",
      "parentUuid": "f5d123e2_37f147dc",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cab65fd0_339658c4",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-22T17:38:37Z",
      "side": 1,
      "message": "maybe what\u0027s missing is just if (!ClipRectangle) ( destBox \u003d {} )\n\nYuxin throwing errors is definitely permitted on integer overflow. We can request a spec clarification from the GLES working group if needed.",
      "parentUuid": "c2eed26f_a8576f22",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb93d58_e0d8227e",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-04-22T21:17:15Z",
      "side": 1,
      "message": "I tried running the test with configuration ES2_OpenGLES on Pixel6, and the overflow x+width does not trigger any GL errors on native driver. \n\nThe ClipRectangle() should work. I saw that we call ClipRectangle() in both mTexture-\u003ecopySubImage() and mTexture-\u003ecopyImage() below, that\u0027s why I was hesitant to call ClipRectangle() one more time to just verify integer overflow.\n\nNow that I saw we use these equations x+width and y+height in more than one place: \nTextureGL::copyImage(): https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/gl/TextureGL.cpp;l\u003d691\n\nTextureD3D::copyImage():\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/d3d/TextureD3D.cpp;l\u003d1074\nShould we consider adding the check in validation function, so that we can prevent these functions being called at all?",
      "parentUuid": "cab65fd0_339658c4",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2546d7d_b837eba9",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-04-23T02:10:30Z",
      "side": 1,
      "message": "Integer overflow really just comes from tests and fuzzers. Even if not strictly per spec, I believe it\u0027s helpful to app developers to actively throw an error in such an obviously erroneous case.\n\nSo +1 for doing it in validation for me.",
      "parentUuid": "8fb93d58_e0d8227e",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}