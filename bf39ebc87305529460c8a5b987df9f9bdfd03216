{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7bf50884_3aee1abe",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-04-22T14:08:27Z",
      "side": 1,
      "message": "I was expecting a fix to ValidateCopyTexImageParametersBase or something similar to that. We have this code:\n\n    if (std::numeric_limits\u003cGLsizei\u003e::max() - xoffset \u003c width ||\n        std::numeric_limits\u003cGLsizei\u003e::max() - yoffset \u003c height)\n    {\n        context-\u003evalidationError(entryPoint, GL_INVALID_VALUE, kOffsetOverflow);\n        return false;\n    }\n    \nMaybe we need a similar check for x/y?",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5d123e2_37f147dc",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-04-22T16:51:53Z",
      "side": 1,
      "message": "Yes that was my first patch. After the discussion during the scrum meeting, I think we would prefer to not throw errors more than what OpenGL spec states: https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glCopyTexImage2D.xml. But it seems that the kOffsetOverflow error above is also not in the spec. If we are already throwing errors more than what spec states, then I agree that adding the checking in validate call is a better solution.",
      "parentUuid": "7bf50884_3aee1abe",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2eed26f_a8576f22",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1383,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-04-22T17:29:53Z",
      "side": 1,
      "message": "You can try it on native GLES driver to see what their behavior is. We should have consistent behavior to existing drivers regarding error.\n\nI thought this whole logic can be as simple as this:\n\n...\nif(ClipRectangle(...))\n{\n   ...\n}\nelse\n{\n    // Source area is out of bounds. Force using copySubImage when we\u0027re not \n    // copying to and from the same texture\n    forceCopySubImage \u003d (sourceReadAttachment-\u003egetResource() !\u003d this);\n}\n\nI thought clipRectangle is already doing the out of bounds check? (maybe I am wrong, so please do verify)",
      "parentUuid": "f5d123e2_37f147dc",
      "range": {
        "startLine": 1372,
        "startChar": 8,
        "endLine": 1383,
        "endChar": 0
      },
      "revId": "bf39ebc87305529460c8a5b987df9f9bdfd03216",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}