{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b912071e_001d2317",
        "filename": "src/libANGLE/CLCommandQueue.cpp",
        "patchSetId": 18
      },
      "lineNbr": 555,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T03:46:40Z",
      "side": 1,
      "message": "On second thought, not a fan of enforcing this at the frontend.\n\nWill push another patchset to move this back to the VK backend.",
      "range": {
        "startLine": 555,
        "startChar": 8,
        "endLine": 555,
        "endChar": 60
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6eebe3b_5cbedc0f",
        "filename": "src/libANGLE/CLCommandQueue.cpp",
        "patchSetId": 18
      },
      "lineNbr": 555,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b912071e_001d2317",
      "range": {
        "startLine": 555,
        "startChar": 8,
        "endLine": 555,
        "endChar": 60
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d22bc144_efd4e2be",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 441,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "```suggestion\n                // Retain this resource until its associated dispatch completes\n```",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "656e4743_07fe87f1",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 441,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d22bc144_efd4e2be",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7440c4b7_5b0515ec",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 445,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "Should this be based on `arg.type \u003d\u003d NonSemanticClspvReflectionArgumentUniform` instead?",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce2fbc4e_25caf5f7",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 445,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Looking for resource(s) that a shader/kernel could both read and write to here.\n\nCorrect me if I\u0027m wrong, but I thought UBO\u0027s are readonly inside of a shader?\n(Unlike SSBOs which can also be written to inside of a shader/kernel)\n\nAny reason to not use top-level API buffer flags here?",
      "parentUuid": "7440c4b7_5b0515ec",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28c330b3_01b609b3",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 445,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-13T02:39:44Z",
      "side": 1,
      "message": "Oops I meant `arg.type !\u003d NonSemanticClspvReflectionArgumentUniform` (which is *based on* `arg.type \u003d\u003d NonSemanticClspvReflectionArgumentUniform`, just the `!` of it :P)\n\nThe reason I mentioned is that the API could declare a buffer as READ_WRITE, but then sometimes the app uses the buffer as SSBO and sometimes as UBO. You\u0027ll be synchronizing for no reason in the UBO cases. Like if the app does:\n\n- Calculate something, write to SSBO\n- Use it as UBO in further calculation\n- Use it as UBO ...\n- Use it as UBO ...\n- Use it as UBO ...\n\nI noticed this because of the code a few lines below that determines `writeDescriptorSet.descriptorType`, so it seemed like if you already know it\u0027s UBO or SSBO, might as well use that more precise info.",
      "parentUuid": "ce2fbc4e_25caf5f7",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c14c6333_52178179",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "You might want to consider using dynamic offsets; if you ever cache these desc sets, that\u0027ll come in handy.",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a756e1fe_aabd3893",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 460,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "c14c6333_52178179",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2499e794_2954410b",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 127,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "FYI (and minor optimization), when the max size is known and small, you can use our `angle::FixedVector\u003cT, N\u003e` to get the array on the stack.\n\nFY(Future)I, we also have `angle::FastVector\u003cT, N\u003e` that doesn\u0027t have a fixed size, but uses a fixed storage for up to N elements (i.e. no allocation for the most common cases where the size ends up smaller than N).",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 127,
        "endChar": 53
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "572a8045_f87abf06",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 127,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "+1 - will update these guys.\n\nDone.",
      "parentUuid": "2499e794_2954410b",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 127,
        "endChar": 53
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfbd007a_5dde6cac",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 151,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "```suggestion\n        const std::array\u003cuint32_t, 3\u003e \u0026specConstantWorkgroupSizeIDs \u003d\n```",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc863b89_30317959",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 151,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "+1\n\nDone",
      "parentUuid": "bfbd007a_5dde6cac",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cf5d177_9b3f209b",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 172,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "Should these calculate ciel instead of floor? Or is workgroupSize guaranteed to divide globalWorkSize?\n\nAlso, per our style:\n\n```suggestion\n    (*workgroupCountOut)[0] \u003d static_cast\u003cuint32_t\u003e(ndrange.globalWorkSize[0] / workgroupSize[0]);\n    (*workgroupCountOut)[1] \u003d static_cast\u003cuint32_t\u003e(ndrange.globalWorkSize[1] / workgroupSize[1]);\n    (*workgroupCountOut)[2] \u003d static_cast\u003cuint32_t\u003e(ndrange.globalWorkSize[2] / workgroupSize[2]);\n```",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 172,
        "endChar": 87
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b8bdcba_fc28ce54",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 172,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Forgor C++ style cast, will update.\n\n\u003e Or is workgroupSize guaranteed to divide globalWorkSize\n\nYes, that is correct (this is referred to in OpenCL as `Uniform WGS`).\nUser is responsible to query support, and provide uniform values.\n```\nOtherwise, when non-uniform work-groups are not supported, \nthe size of each work-group must be uniform.\nIf local_work_size is specified, the values specified in \nglobal_work_size[0], ‚Ä¶‚Äã, global_work_size[work_dim - 1] must \nbe evenly divisible by the corresponding values specified in \nlocal_work_size[0], ‚Ä¶‚Äã, local_work_size[work_dim - 1]\n```\n\nWe currently do not support `Non-Uniform WGS` at the moment (optional for 3.0)\nhttps://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_non_uniform_work_groups\n\nDefinitely on our todo list to support in the future.",
      "parentUuid": "0cf5d177_9b3f209b",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 172,
        "endChar": 87
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4422abc_8f3e2970",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "```suggestion\n        .mapEntryCount \u003d static_cast\u003cuint32_t\u003e(mapEntries.size()),\n```",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71912f8c_244efa19",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4422abc_8f3e2970",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75b0ffe7_003acc0e",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 177,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "nit: to avoid repeating the type (and mistakes if type ever changes):\n\n```suggestion\n        .dataSize      \u003d specConstantData.size() * sizeof(specConstantData[0]),\n```",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d345183a_1824e95d",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 18
      },
      "lineNbr": 177,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "+1\n\nDone",
      "parentUuid": "75b0ffe7_003acc0e",
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ded02c74_9db2ad89",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 18
      },
      "lineNbr": 3481,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-12T14:11:03Z",
      "side": 1,
      "message": "Please avoid default values for args per our style.\n\n```suggestion\n        const char *shaderName,\n        VkSpecializationInfo *specializationInfo) const;\n```",
      "range": {
        "startLine": 3480,
        "startChar": 0,
        "endLine": 3481,
        "endChar": 66
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81f9b1b2_e0433cc6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 18
      },
      "lineNbr": 3481,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-04-12T18:59:47Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ded02c74_9db2ad89",
      "range": {
        "startLine": 3480,
        "startChar": 0,
        "endLine": 3481,
        "endChar": 66
      },
      "revId": "bb341c8eda0268014401e54b1f0495209b4e921f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}