{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a5ab3a3d_1d908df3",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3415,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "Let\u0027s come up with a solution to create dummyTextures without hard-coding the texture ID, and also not colliding with the ID that the app uses.",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d5002bc_b0efc0fc",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3415,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T23:20:55Z",
      "side": 1,
      "message": "I am thinking we can keep track of the last texture ID used before we populate glGenTextures for the dummy texture, and use lastTextureID+1 for the dummy texture. I \"think\" we can delete the dummy texture after we created the eglImage using it as the EGLClientBuffer source. So the populated call would be:\n\n```\n// dummy texture\nglGenTextures(1, reinterpret_cast\u003cGLuint *\u003e(gReadBuffer));\nUpdateTextureID(lastTextureID+1, 0);\nglBindTexture(GL_TEXTURE_2D, gTextureMap[lastTextureID+1]);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, 9728);\nglTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, 9728);\nglTexImage2D(GL_TEXTURE_2D, ...);\n\n// create the eglImage using the dummy texture as the EGLClientBuffer\ngEGLImageMap[0ul] \u003d eglCreateImage(static_cast\u003cEGLContext\u003e(gContextMap[0]), static_cast\u003cEGLContext\u003e(gContextMap[1]), 12465, GetClientBuffer(12465, hexformat(lastTextureID+1)), reinterpret_cast\u003cGLint64 *\u003e(\u0026gBinaryData[176]));\nglEGLImageTargetTexture2DOES(GL_TEXTURE_EXTERNAL_OES, gEGLImageMap[reinterpret_cast\u003cuintptr_t\u003e(0ul)]);\n\n// Delete the dummy texture\nconst GLuint deleteTextures[] \u003d {gTextureMap[lastTextureID+1]}; \nglDeleteTextures(1, deleteTextures);\n``` \n\nI am still reading the spec on whether the deletion of the dummy texture will impact the eglImage: https://registry.khronos.org/EGL/extensions/KHR/EGL_KHR_image_base.txt. Maybe @Jamie or @Cody knows.\n\nIf we have another texture to process after the external texture, whose id stored in textureManager is lastTextureID+1, we can safely use the lastTextureID+1 entry for that texture, as the dummy texture is no longer using that entry in the gTextureMap.",
      "parentUuid": "a5ab3a3d_1d908df3",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9947b21e_788da483",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3415,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-07T14:40:37Z",
      "side": 1,
      "message": "I believe we can use the same method employed by shader population, where we track the highest ID used by the app, and then we use IDs higher than that (which is safe).  See the following:\n```\ngl::ShaderProgramID tempShaderStartID \u003d {resourceTracker-\u003egetMaxShaderPrograms()};\n```\nYou will need to add a function called `onTextureAccess` similar to `onShaderProgramAccess`.\n\nAs to whether the staging image can immediately be deleted, I think the answer is yes, but haven\u0027t found hard evidence.  Give it a try, we can back it out if it becomes clear we need to preserve it.",
      "parentUuid": "1d5002bc_b0efc0fc",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85a8e135_275cb14c",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3415,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-09T00:57:58Z",
      "side": 1,
      "message": "Can we just use `mMaxAccessedResourceIDs[ResourceIDType::Texture]`? It is updated in `maybeCapturePreCallUpdates()`, which is called for every capture call the app issues. e.g. if the app has created 3 textures when we trigger the capture, the `mMaxAccessedResourceIDs[ResourceIDType::Texture]` should store 3 (or 2)., then we can use `mMaxAccessedResourceIDs[ResourceIDType::Texture]+1` for the dummy texture. If we do this, we have to make sure we call glDeleteTextures on the dummy texture, otherwise if the app creates new textures in the frames after, it will use a texture ID that is collide with the dummy texture ID.",
      "parentUuid": "9947b21e_788da483",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3d3e979_b13b1746",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3415,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-09T22:09:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85a8e135_275cb14c",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "642eb901_c8f9853e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3437,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "I think we should place the `glGenTextures`, `UpdateTextureID` `glTexParameteri`,`glBindTextures` for the dummy texture together with the `glTexImage2D` for the dummy texture. More specifically, we should place these calls for the dummy texture together:\n\nglGenTextures(...);\nUpdateTextureID(...);\nglBindTexture(GL_TEXTURE_2D, ...);\nglTexParameteri(GL_TEXTURE_2D, ...)\nglTexImage2D(GL_TEXTURE_2D, ...);\n\nOtherwise, you could run into a problem where the last call in texGenCall/textureSetupCalls is of external texture type, and you are binding another texture to the GL_TEXTURE_2D target, later when you insert the call `glTexImage2D(GL_TEXTURE_2D, ...)`, it will be populating data for the last texture that is bound to GL_TEXTURE_2D target, not populating for the dummy texture. In short, we should make sure we bind dummy texture to `GL_TEXTURE_2D`, before we call `glTexImage2D` on the dummy texture.",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bae2ebdf_95ac4317",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3437,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:29:13Z",
      "side": 1,
      "message": "typo: *** you could run into a problem where the last call in texGenCalls/textureSetupCalls is NOT of external texture type.",
      "parentUuid": "642eb901_c8f9853e",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f5f75b_874d45a5",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3437,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-07T14:40:37Z",
      "side": 1,
      "message": "Right, we can\u0027t have back to back BindTexture calls or it changes which texture subsequent calls apply to.\n\nWith this code it looks like you are trying to create a staging texture that matches the original texture, including all its parameters.  I don\u0027t know if we need that level of duplication.  I think we can simplify this by hard coding the parameters of the staging texture.\n\nIf it turns out we need to apply all the same parameters to each texture, we\u0027ll need to move this block of code to a helper and apply the full sequence to the new staging texture, i.e. everything including `BindTexture` down to `GL_TEXTURE_MAX_LEVEL` would move into a helper.\n\nThere may end up being a subset of parameters that we want to duplicate between the staging and real texture, but let\u0027s defer that for now.",
      "parentUuid": "bae2ebdf_95ac4317",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0ca271f_ce47824e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3437,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-08T17:36:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60f5f75b_874d45a5",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c30ad944_e48e1b7b",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3637,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "Let\u0027s try to combine this if condition with `if (context-\u003egetExtensions().getImageANGLE)` below.",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f5f2cc5_c8eacc7c",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3637,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-07T14:40:37Z",
      "side": 1,
      "message": "+1, okay to prototype like this, but looks like there is a decent amount of code shared.",
      "parentUuid": "c30ad944_e48e1b7b",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7553eb9d_938a3cfb",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3637,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2022-08-10T23:21:25Z",
      "side": 1,
      "message": "This got lost.  If you are out of time, go ahead and land it, but I think this can be refactored to reduce code duplication.",
      "parentUuid": "1f5f2cc5_c8eacc7c",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a4c5145_676f9d8b",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3689,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "should we use `gl::TextureType::External` instead?",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "168f0016_b6760186",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3689,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-09T18:05:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a4c5145_676f9d8b",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ed0752a_c62ffa47",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5529,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "We should mention that to run this test with the right capture setting, make sure to set these environment variables:\n\nLinux:\nexport ANGLE_CAPTURE_FRAME_START\u003d2\nexport ANGLE_CAPTURE_FRAME_END\u003d2\nexport ANGLE_CAPTURE_LABEL\u003dexternal_textures\nexport ANGLE_CAPTURE_OUT_DIR\u003d[PATH_TO_ANGLE]/src/tests/restricted_traces/external_textures/\n\nAndroid:\nadb shell setprop debug.angle.capture.frame_start 2\nadb shell setprop debug.angle.capture.frame_end 2\nadb shell setprop debug.angle.capture.label external_textures\nadb shell setprop debug.angle.capture.out_dir /data/data/externaltextures/angle_capture",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1c7589c_16dab346",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5529,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-06T00:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ed0752a_c62ffa47",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e23c811_5644ec85",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5576,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "the comment should be updated to:\n\n\"calls On EndFrame(), with MidExecutionSetup to restore external texture targetTexture1 above.\"",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0cb90a91_d1a82883",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5576,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-06T00:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e23c811_5644ec85",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af5f8d08_4b537980",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5582,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "the comment should be changed to:\n\n\"draw using the eglImage texture targetTexture1 created in frame 1\"",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "387d80b9_a1401db9",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5582,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-06T00:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af5f8d08_4b537980",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f27ba9f_10cd3c1b",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5621,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2022-08-05T22:23:24Z",
      "side": 1,
      "message": "Let\u0027s update the comment to:\n\n// swap buffer - calls OnEndFrame() that saves the gl calls creating the external texture targetTexture2. We use this as a reference to check the gl calls we restore for targetTexture1 in MidExecutionSetup.",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cfc76cd0_55f88641",
        "filename": "src/tests/gl_tests/ImageTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5621,
      "author": {
        "id": 1544099
      },
      "writtenOn": "2022-08-06T00:21:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f27ba9f_10cd3c1b",
      "revId": "f98866010c34ba6042631a4997cefc5b4625d079",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}