{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "80c9936f_982871a4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1996,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T19:34:39Z",
      "side": 1,
      "message": "No need for an Impl helper. Only the ones that share code with compute have these Impl functions. You can just move the code from the Impl helpers to here and remove those.",
      "range": {
        "startLine": 1996,
        "startChar": 11,
        "endLine": 1996,
        "endChar": 34
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "895daec7_cb6a86dd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1996,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T19:57:28Z",
      "side": 1,
      "message": "Okay, will do.",
      "parentUuid": "80c9936f_982871a4",
      "range": {
        "startLine": 1996,
        "startChar": 11,
        "endLine": 1996,
        "endChar": 34
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aeb7916c_dcb5430a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 1996,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T21:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "895daec7_cb6a86dd",
      "range": {
        "startLine": 1996,
        "startChar": 11,
        "endLine": 1996,
        "endChar": 34
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cab7c3d_4176fcaf",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3235,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T20:09:32Z",
      "side": 1,
      "message": "I think we should check if mScissor actually changed or not and only set dirty bit if changed. Given this is command buffer state, if you switch two FBOs with same size, you really don\u0027t need dirty bit set.\n\nSame for viewport.",
      "range": {
        "startLine": 3235,
        "startChar": 4,
        "endLine": 3235,
        "endChar": 46
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8f0f1ea_a9e43648",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3235,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T20:21:46Z",
      "side": 1,
      "message": "If you switch FBOs we start a new render pass and we always set a bunch of state including viewport/scissor (not just conservatively, we have to for multithreading and multicontexts). So I don\u0027t think that\u0027s a concern here.\n\nWe do have this sort of check in the front-end to ignore no-op state changes (see `State::setScissorParams` for example).\n\nYou could potentially add some debug thing here though to warn if unnecessary state change happens. Something similar to ANGLE_PERF_WARNING, but which has a counter and only warns if the condition is true more than N times. Then we could have `if (!already_dirty \u0026\u0026 prev_scissor \u003d\u003d new_scissor) ANGLE_INTERNAL_PERF_WARNING(20, ...)`",
      "parentUuid": "4cab7c3d_4176fcaf",
      "range": {
        "startLine": 3235,
        "startChar": 4,
        "endLine": 3235,
        "endChar": 46
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72358b88_e77d5f93",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3235,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T20:28:10Z",
      "side": 1,
      "message": "\u003e\"we have to for multithreading and multicontexts\", \nEven for multi context, you only need to do so if multiple context are actually used (Not sure if it is done so right now, but be another improvement opportunity if not). Otherwise, I am not seeing why this is required even when you start a new RP but in the same command buffer.",
      "parentUuid": "a8f0f1ea_a9e43648",
      "range": {
        "startLine": 3235,
        "startChar": 4,
        "endLine": 3235,
        "endChar": 46
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6029ab04_8a7c6f41",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3235,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T20:45:31Z",
      "side": 1,
      "message": "Well yes, there are many states like that we don\u0027t need to set if we are the only context (like binding the pipeline). I\u0027d leave that as a separate optimization (if even necessary, since render passes are supposed to be few anyway). That optimization could move the setting of mNewGraphicsCommandBufferDirtyBits from startRP to flush if single-context.",
      "parentUuid": "72358b88_e77d5f93",
      "range": {
        "startLine": 3235,
        "startChar": 4,
        "endLine": 3235,
        "endChar": 46
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "486b19ef_982135e0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 3235,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T21:12:28Z",
      "side": 1,
      "message": "I am okay to defer as separate optimization along with other dirty bits. I think with the change to submit each FBO, we are actually getting new command buffers for each FBO, so this likely is not an issue.",
      "parentUuid": "6029ab04_8a7c6f41",
      "range": {
        "startLine": 3235,
        "startChar": 4,
        "endLine": 3235,
        "endChar": 46
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06aa2566_a5903d4f",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 785,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T19:34:39Z",
      "side": 1,
      "message": "Don\u0027t need this (emphasis mine):\n\n\u003e dynamic state can be modified at any time and **persists for the lifetime of the command buffer**, or until modified by another dynamic state setting command or another pipeline bind.\n\nRemoving this should save you a lot of unnecessary calls. You should be able to see the removal of the calls visually in RenderDoc or AGI to confirm.",
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a197848_e208aefe",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 785,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T19:57:28Z",
      "side": 1,
      "message": "Those were the last additions to the CL to get dEQP passing.  See 5-\u003e6:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2954925/5..6\n\nThe failures before that can be seen here:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2954925/5\n\nIt was inspired by Jamie\u0027s original change here:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/1316888/8/src/libANGLE/renderer/vulkan/ContextVk.cpp#1065\n\nI think the alternative is to find where to dirty the bits for viewport/scissor individually?",
      "parentUuid": "06aa2566_a5903d4f",
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcd74e28_b6e18975",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 785,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T20:03:23Z",
      "side": 1,
      "message": "I suspect it was UtilsVk code that\u0027s setting the scissor/viewport and not dirtying the bit. It\u0027s only clear that\u0027s not starting its own render pass, so that must have been the problem. See this in ContextVk.h:\n\n    // When UtilsVk issues draw or dispatch calls, it binds a new pipeline and descriptor sets that\n    // the context is not aware of.  These functions are called to make sure the pipeline and\n    // affected descriptor set bindings are dirtied for the next application draw/dispatch call.\n    void invalidateGraphicsPipelineBinding();\n    void invalidateComputePipelineBinding();\n    void invalidateGraphicsDescriptorSet(DescriptorSetIndex usedDescriptorSet);\n    void invalidateComputeDescriptorSet(DescriptorSetIndex usedDescriptorSet);\n\nYou would need to add an `invalidateScissorAndViewport()` and call it from UtilsVk where necessary.",
      "parentUuid": "0a197848_e208aefe",
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2673e5c_fee8c9c7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 785,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T20:09:32Z",
      "side": 1,
      "message": "+1. Thanks Shabi, this is exact what I was looking for in spec this morning.",
      "parentUuid": "06aa2566_a5903d4f",
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6f2415f_d3a8c194",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 10
      },
      "lineNbr": 785,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T21:36:43Z",
      "side": 1,
      "message": "Okay, I\u0027ve marked them dirty anywhere we directly modified viewport and scissor in UtilsVk.cpp, thanks for the pointer!",
      "parentUuid": "a2673e5c_fee8c9c7",
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83d2a5b6_a5958ba0",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2079,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T20:09:32Z",
      "side": 1,
      "message": "Given the dynamic state is per command buffer, I don\u0027t think you need this and scissor at line 2082. I think this should already covered in contextVk.cpp.\n\nSame thing apply to other places in UtilsVk.cpp",
      "range": {
        "startLine": 2079,
        "startChar": 4,
        "endLine": 2079,
        "endChar": 48
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba890573_54e8d06a",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2079,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T20:21:46Z",
      "side": 1,
      "message": "You do if this function starts the render pass itself, because context dirty bits are not processed.",
      "parentUuid": "83d2a5b6_a5958ba0",
      "range": {
        "startLine": 2079,
        "startChar": 4,
        "endLine": 2079,
        "endChar": 48
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a024b265_3415bfa8",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2079,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T21:12:28Z",
      "side": 1,
      "message": "I think you only do if context dirty bit is still set, right?",
      "parentUuid": "ba890573_54e8d06a",
      "range": {
        "startLine": 2079,
        "startChar": 4,
        "endLine": 2079,
        "endChar": 48
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e85411d_f1836205",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2079,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T21:54:08Z",
      "side": 1,
      "message": "Actually looking again that\u0027s not even true. The viewport set here is not the same as the context\u0027s; it has the clear depth value set in it. The scissor should be the same, though technically the function could work with any scissor.\n\nThere _may_ be some cleanup possible (for example by not setting scissor, but instead asking the context to flush its scissor dirty bit), but honestly it\u0027s both minor and a complication better left to another change.",
      "parentUuid": "a024b265_3415bfa8",
      "range": {
        "startLine": 2079,
        "startChar": 4,
        "endLine": 2079,
        "endChar": 48
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b92e7ca_13d20929",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 2079,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-06-17T22:04:10Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "6e85411d_f1836205",
      "range": {
        "startLine": 2079,
        "startChar": 4,
        "endLine": 2079,
        "endChar": 48
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91c6d899_f2511b2a",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 10
      },
      "lineNbr": 817,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-17T19:34:39Z",
      "side": 1,
      "message": "nit: we used to disallow non-const references. That limitation was lifted in chromium, though I personally like to see it continued in ANGLE. I don\u0027t remember if we reached a consensus.\n\nMy own reasoning is that it\u0027s not clear looking at the call site if the variable is being passed by value or reference, so makes the code harder to reason about.",
      "range": {
        "startLine": 817,
        "startChar": 30,
        "endLine": 817,
        "endChar": 31
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3e266f8_6e328514",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 10
      },
      "lineNbr": 817,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T19:57:28Z",
      "side": 1,
      "message": "Sure, can switch it to consuming a pointer.",
      "parentUuid": "91c6d899_f2511b2a",
      "range": {
        "startLine": 817,
        "startChar": 30,
        "endLine": 817,
        "endChar": 31
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6448446_a8b80b3b",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.cpp",
        "patchSetId": 10
      },
      "lineNbr": 817,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-17T21:36:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3e266f8_6e328514",
      "range": {
        "startLine": 817,
        "startChar": 30,
        "endLine": 817,
        "endChar": 31
      },
      "revId": "f4e7726fd2baebd6347773165c1521e8422adae4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}