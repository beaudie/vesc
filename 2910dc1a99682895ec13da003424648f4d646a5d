{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "572e0a71_03aef029",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-28T17:00:35Z",
      "side": 1,
      "message": "Is there way to make it not holding the mCommandQueueMutex?",
      "range": {
        "startLine": 393,
        "startChar": 18,
        "endLine": 393,
        "endChar": 32
      },
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8410dc8_c7f87164",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 393,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-10-28T20:05:27Z",
      "side": 1,
      "message": "Currently all the enqueue api calls are structured this way - taking a lock at the call site. Will be revisited in the future to see if the locks can be fine grained.",
      "parentUuid": "572e0a71_03aef029",
      "range": {
        "startLine": 393,
        "startChar": 18,
        "endLine": 393,
        "endChar": 32
      },
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef55006f_2d0e832f",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 397,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-29T03:11:07Z",
      "side": 1,
      "message": "Nit: for consistency with unmap:\n\n```suggestion\n    CLBufferVk \u0026bufferVk \u003d buffer.getImpl\u003cCLBufferVk\u003e();\n```",
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2b9ee64_59cc48aa",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 397,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-10-29T14:03:54Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ef55006f_2d0e832f",
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61839507_4fef38ae",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-29T03:11:07Z",
      "side": 1,
      "message": "This _looks_ like it\u0027s copying from the buffer to itself. I imagine `getHostPtr()` is returning a different buffer from `bufferVk`\u0027s internal memory, like a shadow buffer? If that\u0027s true, shouldn\u0027t this be done when `CL_MEM_USE_HOST_PTR` is **not** provided?",
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95721b7b_399e6977",
        "filename": "src/libANGLE/renderer/vulkan/CLCommandQueueVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 403,
      "author": {
        "id": 1603052
      },
      "writtenOn": "2024-10-29T14:03:54Z",
      "side": 1,
      "message": "`buffer-\u003ecopyTo(ptr)` api intent here is to it to read as copy the buffer to pointer ptr\n\n\u003e I imagine getHostPtr() is returning a different buffer from bufferVk\u0027s internal memory, like a shadow buffer?\n\nThe host ptr is provided as part of buffer creation with `CL_MEM_USE_HOST_PTR` flag. It\u0027s read as create a cl buffer using the contents from the provided host pointer. And map semantics is that to return the same host ptr to the user. So in here, we copy the buffer content back to user host ptr.",
      "parentUuid": "61839507_4fef38ae",
      "revId": "2910dc1a99682895ec13da003424648f4d646a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}