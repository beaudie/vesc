{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3e3be70b_7edea823",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2021-11-04T23:20:35Z",
      "side": 1,
      "message": "LGTM, thanks for the test.",
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ceac4290_022f2686",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "Is all of the normalized data, float data, numTris, etc. all necessary?   Since this is just trying to measuring mapping/writing to a buffer, it seems this can be simplified quite a bit by just filling an SSBO or UBO with color data.   Then you can copy as much data anywhere you\u0027d like within it, especially if the buffer is already pre-initialized to the output color.\n\nIt\u0027s possible I\u0027m oversimplifying a bit though.",
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a859e5e1_9fe82484",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "nit: can update",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2bf2cbe_70d6b1be",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "I think it would be better for these to both be powers of 2, since that\u0027s likely how most apps will behave.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 32,
        "endChar": 35
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd0411ee_4eb3b435",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "nit: please use a RAII type like std::vector",
      "range": {
        "startLine": 68,
        "startChar": 13,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32bfcf9a_bf070b27",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "you can return a const *, or a std::vector to be safer",
      "range": {
        "startLine": 72,
        "startChar": 9,
        "endLine": 72,
        "endChar": 21
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82c55b19_5fae0950",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "nit: maybe use UNREACHABLE()",
      "range": {
        "startLine": 95,
        "startChar": 19,
        "endLine": 95,
        "endChar": 26
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8782fe52_57327a1b",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "I feel like we already have utilities for this. Is this color data? We have GLColor::toNormalizedVector, maybe you could restructure this into using GLColor if it\u0027s color data.",
      "range": {
        "startLine": 100,
        "startChar": 11,
        "endLine": 100,
        "endChar": 28
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6d4a613_6eeed4b5",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "UNREACHABLE() for these, depending on how much sticks around based on Jamie\u0027s comment.",
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e5e365f_4b57f85e",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 242,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "Maybe \"unknown\" instead to be more obvious we don\u0027t know what this is.   Or just UNREACHABLE().",
      "range": {
        "startLine": 242,
        "startChar": 23,
        "endLine": 242,
        "endChar": 29
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0acf7e38_1c4147ba",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-11-05T15:44:48Z",
      "side": 1,
      "message": "if update rate doesn\u0027t need to vary I suggest taking it out from the name to keep the test name a bit simpler",
      "range": {
        "startLine": 247,
        "startChar": 26,
        "endLine": 247,
        "endChar": 36
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd47fa13_cbe1b02e",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 296,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "Have GetVertexData return a GLsizei directly.",
      "range": {
        "startLine": 296,
        "startChar": 26,
        "endLine": 296,
        "endChar": 46
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ea5d5a9_026184b2",
        "filename": "src/tests/perf_tests/MapBufferRange.cpp",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-11-08T04:20:23Z",
      "side": 1,
      "message": "Is there a way to vary this offset, so we can get the cost of copying in the middle of a buffer, and potentially staging updates to the middle of the buffer?",
      "range": {
        "startLine": 335,
        "startChar": 61,
        "endLine": 335,
        "endChar": 62
      },
      "revId": "ae88a27fcc7e98189028b0d2e8f09bf79730a707",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}