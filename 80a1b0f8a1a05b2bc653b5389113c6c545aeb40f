{
  "comments": [
    {
      "key": {
        "uuid": "d603b18d_eb9ba813",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 22
      },
      "lineNbr": 129,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "nit: remove \"angle::\" here too?",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 11
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2849f17_1e2c8e62",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 22
      },
      "lineNbr": 129,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d603b18d_eb9ba813",
      "range": {
        "startLine": 129,
        "startChar": 4,
        "endLine": 129,
        "endChar": 11
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab7ec499_3147ec81",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3619,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "This pattern is used a few places and should probably be put into a textureVk-\u003egetImage().hasImmutableSampler().",
      "range": {
        "startLine": 3619,
        "startChar": 32,
        "endLine": 3619,
        "endChar": 79
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "978607e1_2aaef971",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3619,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab7ec499_3147ec81",
      "range": {
        "startLine": 3619,
        "startChar": 32,
        "endLine": 3619,
        "endChar": 79
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "506f6f4c_35fc9ad0",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3630,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "The only way to get into here is if the executable has textures, so this check can be removed.",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e60d9a_64591efd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3630,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "506f6f4c_35fc9ad0",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e15edce_ed62edb9",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Passing in \u0027\u0026mActiveTextures\u0027 seems unnecessary since ProgramExecutableVk::updatePipelineLayout() has access to the ContextVk, so it can call ContextVk::getActiveTextures() on its own.",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3320b06c_9db749ac",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "That\u0027s how I know there are immutable samplers to process, that way I have one value I need to pass around that acts as both a flag and source of truth.\nThe first time updatePipelineLayout is called as part of LinkProgram, ContextVk::getActiveTextures() is not valid, we don\u0027t know it\u0027s good until we get a draw call.",
      "parentUuid": "6e15edce_ed62edb9",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5144ef1a_ab0f359d",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T17:12:37Z",
      "side": 1,
      "message": "There are 2 flags to determine if there is an immutable sampler:\n1.) null pointer or not\n2.) getImage().getExternalFormat() !\u003d 0\n\nI\u0027m not sure how invalid ContextVk::getActiveTextures() is during LinkProgram, but hopefully it\u0027s at least good enough not to trick us into thinking there is an immutable sampler.   That would allow us to simplify to just using (2) and remove the pointer stuff.",
      "parentUuid": "3320b06c_9db749ac",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2375d017_356103f3",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T17:50:31Z",
      "side": 1,
      "message": "Different flags.\ngetImage().hasImmutableShader() indicates that that specific image has / requires an immutable sampler.\nThe activeTextures pointer indicates that some activeTexture has an immutable sampler and we figure out which exact image in a loop in the function using the information available in the referenced list of activeTextures.\n\nContextVk::getActiveTextures() is completely untrustworthy at LinkProgram time. E.g. I could have just completed a draw that used an immutable sampler, link a bunch of programs and then change the texture state for the next draw. That previously immutable sampler is not helpful during those links.\n\nI can change the interface to pass a bool flag and then lookup the current getActiveTextures() when needed. Does that make the interface better?",
      "parentUuid": "5144ef1a_ab0f359d",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6eae24c_8c205e91",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T18:31:05Z",
      "side": 1,
      "message": "I see (well, not entirely, but there\u0027s clearly more complexity here than I fully understand).\n\nMaybe I\u0027m getting tripped up on having to do the full updatePipelineLayout() call here.   Why are immutable samplers special in this regard?",
      "parentUuid": "2375d017_356103f3",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0337ee2c_0248cd41",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T19:26:55Z",
      "side": 1,
      "message": "Immutable samplers are special in that they must be specified in the DescriptorSetLayout. That\u0027s normally computed at link time but we don\u0027t know what the immutable samplers are at that time so we have to re-compute the DescriptorSetLayouts again when we see that we need them.\nAnd PipelineLayout as well since it\u0027s dependent.",
      "parentUuid": "b6eae24c_8c205e91",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfc33698_f7324d98",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 3632,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T22:07:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0337ee2c_0248cd41",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fc3ca747_1ab48f15",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 461,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Since ContextVk::getActiveTextures() can always be called, this can be a const ref also, removing any need to check if the pointer is valid.",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53bfe32a_d5749ce5",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 461,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "ContextVK is not available here unless I add it to the arg list, or am I missing something?\nI\u0027m using the pointer as a flag as well so can\u0027t be a reference.",
      "parentUuid": "fc3ca747_1ab48f15",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e789e968_329f2c45",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 461,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T17:12:37Z",
      "side": 1,
      "message": "This is only called by ProgramExecutableVk::createPipelineLayout(), which has a ContextVk and can pass in the const ref returned by ContextVk::getActiveTextures().",
      "parentUuid": "53bfe32a_d5749ce5",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d327f4d5_bf98c125",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 461,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T17:50:31Z",
      "side": 1,
      "message": "Yeah I could.\nDoes it make the interface better?\nPart of the reason I pass it in is to make it clear that\u0027s the statement of truth. It is the same as ContextVk::getActiveTextures(), but ContextVk::getActiveTextures() is not always valid for this use when executing this function.",
      "parentUuid": "e789e968_329f2c45",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b65e3059_3e0f9a79",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 461,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T18:31:05Z",
      "side": 1,
      "message": "Ack.   This seems like a good approach based on those constraints.",
      "parentUuid": "d327f4d5_bf98c125",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0959b2d3_8f7c720d",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 523,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Does this need to pass nullptr?   Looks like it could just keep calling the original function:\n\n\n    void update(uint32_t bindingIndex,\n                VkDescriptorType type,\n                uint32_t count,\n                VkShaderStageFlags stages);\n    void update(uint32_t bindingIndex,\n                VkDescriptorType type,\n                uint32_t count,\n                VkShaderStageFlags stages,\n                const vk::Sampler *immutableSampler);",
      "range": {
        "startLine": 522,
        "startChar": 0,
        "endLine": 523,
        "endChar": 55
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "933edb69_e0203400",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 22
      },
      "lineNbr": 523,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0959b2d3_8f7c720d",
      "range": {
        "startLine": 522,
        "startChar": 0,
        "endLine": 523,
        "endChar": 55
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bffd94b_f769b102",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 22
      },
      "lineNbr": 59,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Can you update this comment to explain why you\u0027re checking if the format support sampling if the format is undefined?",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcd16fe_d957a771",
        "filename": "src/libANGLE/renderer/vulkan/android/HardwareBufferImageSiblingVkAndroid.cpp",
        "patchSetId": 22
      },
      "lineNbr": 59,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bffd94b_f769b102",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3bfdb56_aa03eb4b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 1869,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "With the change for getYuvConversion() to return the pointer directly, this can become:\n\n    yuvConversionInfo.conversion \u003d\n        contextVk-\u003egetRenderer()-\u003egetYuvConversionCache().getYuvConversion(mExternalFormat);\n    ASSERT(yuvConversionInfo.conversion);",
      "range": {
        "startLine": 1868,
        "startChar": 0,
        "endLine": 1869,
        "endChar": 61
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "664b6025_55754f9e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2231,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Rather than returning an angle::Result, it\u0027s probably better to just return the VkSamplerYcbcrConversion* directly.",
      "range": {
        "startLine": 2229,
        "startChar": 0,
        "endLine": 2231,
        "endChar": 44
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8393d632_44ce305d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2231,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "I\u0027m not returning a pointer here, I\u0027m returning a VkSamplerYcbcrConversion handle. A non-dispatchable Vulkan object. There are no guarantees to the value of a non-dispatchable handle so the only way to know if it\u0027s valid or not is by having the return value indicate that.",
      "parentUuid": "664b6025_55754f9e",
      "range": {
        "startLine": 2229,
        "startChar": 0,
        "endLine": 2231,
        "endChar": 44
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f1e7049_a0355863",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2231,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T17:12:37Z",
      "side": 1,
      "message": "\u003e I\u0027m not returning a pointer here, I\u0027m returning a VkSamplerYcbcrConversion handle.\n\nHa, duh.   Probably shouldn\u0027t do reviews so late.\n\n\u003e There are no guarantees to the value of a non-dispatchable handle so the only way to know if it\u0027s valid or not is by having the return value indicate that.\n\nThis should probably set the value to VK_NULL_HANDLE before searching, which the user can check for to see if anything was found (or crashing earlier if they don\u0027t).   I think that makes the code clearer and prevents any random values that could have been hanging around from being used.",
      "parentUuid": "8393d632_44ce305d",
      "range": {
        "startLine": 2229,
        "startChar": 0,
        "endLine": 2231,
        "endChar": 44
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4531e059_b1f8a138",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2231,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T17:50:31Z",
      "side": 1,
      "message": "Non-dispatchable handles have no guaranteed invalid value. They are just a 64bit value, can be anything, including 0 and be valid so only way to know if I found one is by the return code.\nI\u0027m following GL behavior here, only change the return value if we find something.",
      "parentUuid": "4f1e7049_a0355863",
      "range": {
        "startLine": 2229,
        "startChar": 0,
        "endLine": 2231,
        "endChar": 44
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "331aaced_85edacd4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2231,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T18:31:05Z",
      "side": 1,
      "message": "Ah, ok.",
      "parentUuid": "4531e059_b1f8a138",
      "range": {
        "startLine": 2229,
        "startChar": 0,
        "endLine": 2231,
        "endChar": 44
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3645e089_1386f938",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2243,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "This function only returns angle::Result::Continue, so it can be updated to just return void.",
      "range": {
        "startLine": 2243,
        "startChar": 0,
        "endLine": 2243,
        "endChar": 13
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10c95ad4_b1ee55ca",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2243,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3645e089_1386f938",
      "range": {
        "startLine": 2243,
        "startChar": 0,
        "endLine": 2243,
        "endChar": 13
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a18cda9_99d0e85b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 653,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "It doesn\u0027t look like anyone calls this.   Remove?",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb52e68f_3b92e440",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 653,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a18cda9_99d0e85b",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a6ce3db_d03a7686",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 669,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Since Android is likely where we are the most memory constrained, it\u0027s #ifdef\u0027ing is probably not worth the extra complexity.",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afa2256d_0346fade",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 669,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "I expect that to be the case, but thought it worth asking since adding the externalFormat increases the size of this packed struct considerably.",
      "parentUuid": "5a6ce3db_d03a7686",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ef4ab53_3450d68c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 693,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Rather than mixing types, I\u0027ve typically seen arrays used instead:\n\n    uint16_t mReserved[3];\n\nThat lets future users grab only the portion they need a little more easily and avoids all the padding vs reserved naming conflicts.",
      "range": {
        "startLine": 692,
        "startChar": 0,
        "endLine": 693,
        "endChar": 18
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56636e2b_fe829b67",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 693,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ef4ab53_3450d68c",
      "range": {
        "startLine": 692,
        "startChar": 0,
        "endLine": 693,
        "endChar": 18
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "150d66d3_078964e9",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 697,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "The \"apparently\" can probably be removed.\n\nMaybe I\u0027m used to some type of \u0027-malign-double\u0027 always being used (e.g., to avoid 64b values spanning multiple cache lines), but the general rule for alignment I always follow is that structs are aligned to the largest member (uint64_t in this case).",
      "range": {
        "startLine": 697,
        "startChar": 3,
        "endLine": 697,
        "endChar": 13
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3539a2c2_9393721c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 22
      },
      "lineNbr": 697,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "150d66d3_078964e9",
      "range": {
        "startLine": 697,
        "startChar": 3,
        "endLine": 697,
        "endChar": 13
      },
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ded2fa32_35bbac7b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2583,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-12T07:56:16Z",
      "side": 1,
      "message": "Need to mark the TODO with a bug number if you\u0027re planning to defer this work.",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1b59bf5_2572b178",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2583,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T15:39:30Z",
      "side": 1,
      "message": "Plan to fix this before landing.",
      "parentUuid": "ded2fa32_35bbac7b",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a04bf0c4_28307542",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 22
      },
      "lineNbr": 2583,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-06-12T16:54:24Z",
      "side": 1,
      "message": "Fixed. Removed this entirely, instead free up conversioncache when we destroy the renderer, same as the sampler cache.",
      "parentUuid": "d1b59bf5_2572b178",
      "revId": "80a1b0f8a1a05b2bc653b5389113c6c545aeb40f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}