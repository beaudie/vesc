{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3c2beda0_ddfbb71d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-01T15:36:11Z",
      "side": 1,
      "message": "nit: avoid clang-format off except for emergencies, as it makes the code harder to maintain.\n\nSome codes design constaints:\n\nHere you\u0027re checking GLES extensions. This function currently is for checking Vulkan properties. If you want to check GLES 3.2 support via extensions, we can redo our Context.cpp checking to instead determine GLES 3.2 from available extensions. That\u0027s totally fine if you\u0027d prefer to move that there. Especially for GLES 3.2, which is determined entirely by extensions. As a benefit of placing the check in the front end, other eligible back-ends would be able to re-use the GLES 3.2 support checking code.",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63a3fcf5_b613e776",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-03-01T16:51:50Z",
      "side": 1,
      "message": "Regarding the \"clang-format off\", the problem is that the re-formatting puts more than one extension on one line, and I think that this makes the code a lot less readable. \n\nI\u0027ll see how I can move the code into the front-end.",
      "parentUuid": "3c2beda0_ddfbb71d",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a320348_9f17e090",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-01T16:58:11Z",
      "side": 1,
      "message": "Yes, auto-formatting can in many cases make code less readable than manually formatted code. For an open-source project we prioritize maintainability over readability in most cases. With some exceptions. I don\u0027t think this is a case where we need the exception. If you disagree we can ask for feedback from other maintainers.\n\nThanks for looking at moving it to the front-end!",
      "parentUuid": "63a3fcf5_b613e776",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c167cccc_56adca5d",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-03-02T14:53:42Z",
      "side": 1,
      "message": "There seems to be a problem here: `renderer-\u003egetMaxSupportedESVersion()` is called in `vk_caps_utils.cpp_:1222`, which means one has to evaluate the version here in the Vulkan back-end, otherwise the code runs into trouble to create a context.",
      "parentUuid": "63a3fcf5_b613e776",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d9f0e75_b7fd5ccb",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-02T15:31:37Z",
      "side": 1,
      "message": "What happens if you return ES 3.1 here, and in Context.cpp upgrade the available context version if all the ES 3.1 extensions are available?",
      "parentUuid": "c167cccc_56adca5d",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "949cac3f_14375c74",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-03-02T15:45:43Z",
      "side": 1,
      "message": "There are two problems: first there is this IDC mock check that forces GLES 3.2 and must be forced in the vulkan backend and somehow be maintained in the front-end, and then there is forcing GLES 3.2 by using the feature, which also would have to be done in the back-end, because the context version is already needed in vk_caps_utils.cpp:1222. So far I didn\u0027t test what happens if that piece always gets 3.2 as version ...",
      "parentUuid": "9d9f0e75_b7fd5ccb",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4576ba12_9a473801",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-03-02T15:54:39Z",
      "side": 1,
      "message": "Hm, I guess I\u0027m still unclear - what tests or apps start failing if we return 3.2 instead of 3.1 from (!mFeatures.exposeNonConformantExtensionsAndVersions.enabled)?\n\nAs far as I can see vk_caps_utils only uses the major version, not the minor.",
      "parentUuid": "949cac3f_14375c74",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "500df8b4_7fe7ddd1",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2660,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-03-03T20:09:13Z",
      "side": 1,
      "message": "There are two tests in the expectations that fail (crash). \n\nNow after trying to somehow move the checks to the front-end I realized that `exposeNonConformantExtensionsAndVersions` is a Vulkan only feature, so it can\u0027t be used outside the Vulkan back-end. This complicates things. I thought that overriding the enabled extensions in the back-end would work, but then I saw that I actually end up in DisplayGLX and not in DisplayVK, but there I also don\u0027t have access to the feature override, so something goes wrong and the otherwise passing test  GetImageTestES32.CompressedTexImageCubeMapArray/ES3_2_Vulkan crashes with a null-pointer deref because some function pointer is 0, probably because the front-end still thinks that it is GLES 3.1. In summary, I could imagine that the only way to move this into the front-end would be to also move `exposeNonConformantExtensionsAndVersions` into front-end features.",
      "parentUuid": "4576ba12_9a473801",
      "range": {
        "startLine": 2658,
        "startChar": 0,
        "endLine": 2660,
        "endChar": 27
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d840fe8b_36e189cd",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2768,
      "author": {
        "id": 1359667
      },
      "writtenOn": "2022-03-02T19:45:37Z",
      "side": 1,
      "message": "This is choosing the min of these two values. So even if `getMaxSupportedESVersion()` returns 3.2, it is still capped here to 3.1. This also needs to be updated.",
      "range": {
        "startLine": 2768,
        "startChar": 11,
        "endLine": 2768,
        "endChar": 62
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "942daa99_1ad77070",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2768,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2022-03-03T20:09:13Z",
      "side": 1,
      "message": "`getMaxConformantESVersion()` is only called in `Context.cpp:GetClientVersion` and it is only used to upgrade the requested client version under certain circumstances. If the client requests 3.2 it is of no consequence if this function returns a value that is lower.",
      "parentUuid": "d840fe8b_36e189cd",
      "range": {
        "startLine": 2768,
        "startChar": 11,
        "endLine": 2768,
        "endChar": 62
      },
      "revId": "7c3ed59026984b0ba2a4ce73bccf89080754bb79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}