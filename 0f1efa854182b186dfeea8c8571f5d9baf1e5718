{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "582d6511_311306e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-21T00:38:45Z",
      "side": 1,
      "message": "Performance results with this change:\nhttps://docs.google.com/spreadsheets/d/1Wr6GpJlUfnAHhHol9v9D1UT8wETG03gESZOFG_82eMU/edit?usp\u003dsharing",
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "064dbfe1_4a05476f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-01-21T14:36:07Z",
      "side": 1,
      "message": "drive-by : please summarize the results in the commit message",
      "parentUuid": "582d6511_311306e0",
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66a6d841_1f84e213",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-01-21T18:22:03Z",
      "side": 1,
      "message": "The reason for the change is we think VkCmdClearAttachments is faster than a draw call, right? The result sheet is evaluating app traces. Do you know which app trace actually run into it? Or better, I think you can do the perf measurement on the test you wrote with a loop, which will be more telling, I think. ",
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "461017b2_ee9f94c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-21T19:26:43Z",
      "side": 1,
      "message": "Now _this_ looks like noise. I agree with Charlie that it\u0027d be useful to find out if any trace actually hits this, and investigate the performance of that more closely, or write a micro-benchmark.",
      "parentUuid": "064dbfe1_4a05476f",
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "718bc25e_d3e924cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-22T02:34:23Z",
      "side": 1,
      "message": "I created a CL with a new test to measure this CL:\n3408457: Vulkan: Add ClearBenchmark.Run/vulkan_scissoredClear | https://chromium-review.googlesource.com/c/angle/angle/+/3408457\n\nThis gives the following results on Pixel 6:\nBefore:\n    [ RUN      ] ClearBenchmark.Run/vulkan_scissoredClear\n    *RESULT Clear_vulkan.cpu_time: scissoredClear\u003d 1473.1687851453 ns\n    *RESULT Clear_vulkan.wall_time: scissoredClear\u003d 1205.4494506141 ns\n    *RESULT Clear_vulkan.gpu_time: scissoredClear\u003d 893.3167845498 ns\n    [       OK ] ClearBenchmark.Run/vulkan_scissoredClear (9160 ms)\n    \nAfter:\n    [ RUN      ] ClearBenchmark.Run/vulkan_scissoredClear\n    Clear_vulkan.cpu_time: scissoredClear\u003d 1327.6442658209 ns\n    Clear_vulkan.wall_time: scissoredClear\u003d 1114.3499904306 ns\n    Clear_vulkan.gpu_time: scissoredClear\u003d 822.3592952574 ns\n    [       OK ] ClearBenchmark.Run/vulkan_scissoredClear (9281 ms)\n    \nThis looks like a clear win to me with the RP render area size fixed.",
      "parentUuid": "461017b2_ee9f94c7",
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69f97edd_cfc48d6c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-21T19:26:43Z",
      "side": 1,
      "message": "Is this really better than using the draw? At least the scissored clear with the draw only opens a render pass with the scissored size. What does this do?\n\nIn fact, while we don\u0027t do this now, the UtilsVk clear can be made to use loadOp\u003dCLEAR when starting the render pass (and if clear is not masked etc) and not issue a draw at all, but this would use loadOp\u003dLOAD just to clear afterwards.",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "523e3b09_029105e5",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-22T02:34:23Z",
      "side": 1,
      "message": "\u003e Is this really better than using the draw? At least the scissored clear with the draw only opens a render pass with the scissored size. What does this do?\n\nGood catch.   Reducing this to `scissoredRenderArea` allows this CL to improve performance with the new benchmark test.\n\n\u003e In fact, while we don\u0027t do this now, the UtilsVk clear can be made to use loadOp\u003dCLEAR when starting the render pass (and if clear is not masked etc) and not issue a draw at all, but this would use loadOp\u003dLOAD just to clear afterwards.\n\nI\u0027ve opened anglebug.com/6939 to look into this.",
      "parentUuid": "69f97edd_cfc48d6c",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4df69fe_52b97856",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-25T03:29:12Z",
      "side": 1,
      "message": "That\u0027s nice, but this seems like an incomplete solution. Why start an RP just to use vkCmdClearAttachments right away? Why not use loadOp\u003dCLEAR right away and forgo the clear command/draw altogether?\n\nBut this change makes me feel queasy for more reasons. For example, the mergeClearsWithDeferredClears below assumes any clears given to it are whole-frame clears; because they may end up getting re-deferred. Mixing in scissored clears means scissored clears can accidentally end up being stored as deferred clears. I guess setting isMidRenderPassClear makes it work, but it breaks my mental model at least (because in this duration there are clears in mDeferredClears that are actually scissored).\n\nWhat if there is a full-frame deferred clear and then a scissored clear? Wouldn\u0027t mergeClearsWithDeferredClears override the full-frame deferred clear with the scissored one and cause trouble? You can try that in a test by clearing an attachment, then clear the middle with a scissor and see how your change performs.\n\n---\n\nI\u0027m ok with what you are trying to achieve here nevertheless (even if it\u0027s a bit arguable, because if you start the RP with a scissor and loadOp\u003dLOAD, then you have to break it if the scissor sizes increases, but who\u0027s gonna do _that_!).",
      "parentUuid": "523e3b09_029105e5",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d439387d_ae45fa2f",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-25T03:39:46Z",
      "side": 1,
      "message": "On further look, startRenderPass is clearing mDeferredClears, which was supposed to affect the whole frame, but it\u0027s given a scissored region! The test should still fail (but for this other reason).\n\nHow about refactoring things to look like this:\n\n    // line 502\n    if (scissored \u0026\u0026 mDeferredClears.empty() \u0026\u0026 !midRP)\n    {\n        // Start a render pass with the scissor region\n        // and loadOp\u003dCLEAR where appropriate.  No need for vkCmdClearAttachments.\n        return startScissoredClearRenderPass(...);\n    }\n\n    // the usual logic otherwise\n\n    // After the mDeferredClears.any() loop, right before clearWithDraw(), check for scissored unmasked clears and use vkCmdClearAttachments. Call clearWithDraw() only for left-overs if any.\n\nIn fact the above can be split in two changes; one is that you clear scissored clears before clearWithDraw() with vkCmdClearAttachments. Keep everything else as-is.\n\nThen follow up change could try to optimize a !midRP scissored clear by starting a render pass right away.\n\nHow does that sound?",
      "parentUuid": "a4df69fe_52b97856",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fcbd9a7_5dd47520",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2022-01-26T00:05:58Z",
      "side": 1,
      "message": "\u003e Why start an RP just to use vkCmdClearAttachments right away? Why not use loadOp\u003dCLEAR right away and forgo the clear command/draw altogether?\n\nPlease take a look at ClearTest.InceptionScissorClears, which is hitting this case and doing what you\u0027re describing:\n- RP is using loadOp\u003dCLEAR for the full FBO render region (EID 5)\n- vkCmdClearAttachment() is used for scissored clears (EIDs 6-11)\n\n     EID  | Event                                                                                    | Action #\n    4-16  | - Copy/Clear Pass #1                                                                     | 1-8   \n    5     |  \\- vkCmdBeginRenderPass(Clear)                                                          | 1     \n    6     |   - vkCmdClearAttachments({ 0 })                                                         | 1     \n    7     |   - vkCmdClearAttachments({ 0 })                                                         | 2     \n    8     |   - vkCmdClearAttachments({ 0 })                                                         | 3     \n    9     |   - vkCmdClearAttachments({ 0 })                                                         | 4     \n    10    |   - vkCmdClearAttachments({ 0 })                                                         | 5     \n    11    |   - vkCmdClearAttachments({ 0 })                                                         | 6     \n    12    |   - Render pass closed due to non-render-pass read of image that was used in render pass |       \n    13    |   - vkCmdEndRenderPass(Store)                                                            | 7   \n\nHere\u0027s the RenderDoc capture if you\u0027d like to take a look (captured on Linux/Nvidia):\nhttps://drive.google.com/file/d/1HxmF54LcivcsgenLXwWy0epHxedwvjyV/view?usp\u003dsharing\n\n\u003e You can try that in a test by clearing an attachment, then clear the middle with a scissor and see how your change performs.\n\nThis is already tested with ClearBenchmark.Run/vulkan_scissoredClear and ClearTest.InceptionScissorClears (which it\u0027s copied from).   PTAL at those and let me know if there\u0027s another variation you\u0027d like.",
      "parentUuid": "d439387d_ae45fa2f",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dda57e98_9ac844fa",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 11
      },
      "lineNbr": 536,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-01-27T02:48:58Z",
      "side": 1,
      "message": "The test is not hitting the bug I described because the first clear is not scissored. So the RP is opened with the full area instead of a scissored area.\n\nHere\u0027s a test that would be interesting:\n\n1. Initialize a framebuffer with red (however you want), readback to make sure all updates are flushed\n2. Clear the whole framebuffer with green\n3. Clear a scissored region with blue\n4. Readback and verify that inside the scissor is blue and outside is green.\n\nStep 1 is to avoid reading uninitialized values\nStep 2 creates a deferred clear\nStep 3 opens a render pass with the scissored area, using loadOp\u003dCLEAR green, but that only affects inside the scissor, and then overrides it with blue\nStep 4 would read red outside the scissor instead of green.\n\nI still maintain that it\u0027s best to split this particular optimization and land the other part (using vkCmdClearAttachments for scissored clears) separately. Doing that, the change becomes _much_ simpler, basically everything is kept as is, except right before clearWithDraw you check for scissored but unmasked clears and apply those with vkCmdClearAttachments before moving on to clearWithDraw.",
      "parentUuid": "8fcbd9a7_5dd47520",
      "range": {
        "startLine": 533,
        "startChar": 0,
        "endLine": 536,
        "endChar": 40
      },
      "revId": "0f1efa854182b186dfeea8c8571f5d9baf1e5718",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}