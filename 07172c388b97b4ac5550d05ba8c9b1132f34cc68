{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4b018f9d_3b9cdd59",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-02T15:54:54Z",
      "side": 1,
      "message": "Driving by!",
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2c1f26a_f73e00f0",
        "filename": "src/libANGLE/renderer/vulkan/linux/DmaBufImageSiblingVkLinux.cpp",
        "patchSetId": 3
      },
      "lineNbr": 540,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-02T15:54:54Z",
      "side": 1,
      "message": "`getImageFormatFeatureBits` already does `\u0026 bit`, but even better, we have a `hasImageFormatFeatureBits`:\n\n```suggestion\n        bool linearFilterSupported \u003d renderer-\u003ehasImageFormatFeatureBits(\n            actualImageFormatID,\n            VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT);\n\n```",
      "range": {
        "startLine": 535,
        "startChar": 0,
        "endLine": 540,
        "endChar": 86
      },
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "295b262a_feec008b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4710,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-02T15:54:54Z",
      "side": 1,
      "message": "To be clear, regarding the enum class thing, this can still stay a bit:\n\n```suggestion\n    SetBitField(mLinearFilterSupported, linearFilterSupport \u003d\u003d YCbCrLinearFilterSupport::Supported);\n```",
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca626e12_d798ddbc",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4710,
      "author": {
        "id": 1298072
      },
      "writtenOn": "2024-02-02T18:31:09Z",
      "side": 1,
      "message": "Understood, I will make this change.",
      "parentUuid": "295b262a_feec008b",
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "082b8c77_1274ac74",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4727,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-02-02T18:25:55Z",
      "side": 1,
      "message": "I think the cleaner way is make this function simply just do this:\n        `SetBitField(mChromaFilter, preferredChromaFilter);`\n        \nAnd move all other logic that actually decide the filter based on feature bit and format into the helper function `RendererVk::getPreferredFilterForYUV` (possibly rename it to  `getChromeFilterForYUV(FormatID format, bool mIsExternalFormat, uint64_t mExternalOrVkFormat)`)\n\nThis way all logic to decide the filter is in one central place and the filter value stored in YcbcrConversionDesc is the final value.\n\nOr, instead of caching mLinearFilterSupported here, why not just pass the FormatID to updateChromaFilter and check feature support bit here? Either way looks more straight forward to me since you have less things cached.",
      "range": {
        "startLine": 4727,
        "startChar": 26,
        "endLine": 4727,
        "endChar": 44
      },
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7781509a_f29ffbe5",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 4727,
      "author": {
        "id": 1298072
      },
      "writtenOn": "2024-02-02T18:31:09Z",
      "side": 1,
      "message": "In the case of a non-renderable external texture we don\u0027t have a format id to use for lookup. We don\u0027t assign EXTERNALn ids unless we need them.",
      "parentUuid": "082b8c77_1274ac74",
      "range": {
        "startLine": 4727,
        "startChar": 26,
        "endLine": 4727,
        "endChar": 44
      },
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f169a13_0ac58259",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 1080,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-02T15:54:54Z",
      "side": 1,
      "message": "We avoid `bool` params as much as we can. In this case, please use an `enum class`:\n\n```\nenum class YCbCrLinearFilterSupport\n{\n    Supported,\n    Unsupported,\n};\n```",
      "range": {
        "startLine": 1080,
        "startChar": 16,
        "endLine": 1080,
        "endChar": 42
      },
      "revId": "07172c388b97b4ac5550d05ba8c9b1132f34cc68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}