{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f3924b67_a547d733",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-21T22:38:56Z",
      "side": 1,
      "message": "PTAL",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "964a1eec_58466845",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-22T14:27:06Z",
      "side": 1,
      "message": "You should redefer clears here to fix the problem.",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4308401_cf3e4435",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-22T16:32:17Z",
      "side": 1,
      "message": "\u003e fix the problem\n\nwhich problem shabi?",
      "parentUuid": "964a1eec_58466845",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26cdeda4_8579f4e4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-22T17:27:06Z",
      "side": 1,
      "message": "I think is to fix the exact assertion you are seeing with SimpleStateChangeTestES3.ClearThenZeroSizeScissoredClearThenRebindAtt\nachment/ES3_Vulkan. Instead of changes in line 2088, you just call redeferClears(contextVk) here to avoid that assertion.",
      "parentUuid": "f4308401_cf3e4435",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f4510f8_bbe5a0c4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-22T18:04:12Z",
      "side": 1,
      "message": "Yeah, the problem of assertion saying there are already clears in mDeferredClears. You asked in another thread how to deal with that (and was going to avoid gathering clears for scissored clears, which is not the right solution).",
      "parentUuid": "26cdeda4_8579f4e4",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50e7b57b_312a3464",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-22T20:35:27Z",
      "side": 1,
      "message": "should rename `redeferClears` to something more aligned with implementation like `stageDeferredClears`",
      "parentUuid": "7f4510f8_bbe5a0c4",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4bc72a38_7b8255f6",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-22T20:38:56Z",
      "side": 1,
      "message": "+1. I also found this redeferClears name very confusing, it is opposite of what it does. Or maybe `restageDeferredClears`",
      "parentUuid": "50e7b57b_312a3464",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da11dba6_63bbf53a",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-22T20:41:22Z",
      "side": 1,
      "message": "+1 to `restageDeferredClears`.\n\nFWIW, my reasoning was that the clears were deferred, we picked them up, but now decided to \"defer them again\" (hence re-defer).",
      "parentUuid": "4bc72a38_7b8255f6",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "932188f6_d3a00a3b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-22T20:59:10Z",
      "side": 1,
      "message": "\"re\" implies \"again\" but the method has no memory of whether it is the 1st time a clear is being staged or the nth time\n\ncurious why both of you want \"restage\" instead of just \"stage\"?",
      "parentUuid": "da11dba6_63bbf53a",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "750facbb_32e8f12b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 460,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-25T15:27:22Z",
      "side": 1,
      "message": "If there is anything in `mDeferredClears`, it means that it was a clear that was previously deferred, got picked up by syncState, and now we are deferring it again. So yes, there _is_ memory of it.",
      "parentUuid": "932188f6_d3a00a3b",
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d504705_0fd21f61",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2088,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-21T23:07:08Z",
      "side": 1,
      "message": "Do we have similar bugs with color mask as well? For example, this sequence:\n\nglClear(Red) // Normal clear entire buffer to red color, which gets deferred\nglColorMask(BlueChannel); // only allow write of blue channel\nglClear(Blue); // only clear blue channel to blue\n\nPixel value should be red+blue. But if we have this bug that two clears got merged incorrectly, then you will only see the second clear, which you will see blue. The red clear get dropped. Right?",
      "range": {
        "startLine": 2088,
        "startChar": 63,
        "endLine": 2088,
        "endChar": 83
      },
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1552d2e8_5047881e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2088,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-22T01:07:12Z",
      "side": 1,
      "message": "\u003e if we have this bug that two clears got merged incorrectly\n\nthe bug i was working on was where render area became invalid. The bug you mention seems different? `ClearTestES3.MaskedScissoredClearThenFullMaskedClear` seems to have some sort of scissored clear then masked clear, is that not the usecase you had in mind?",
      "parentUuid": "5d504705_0fd21f61",
      "range": {
        "startLine": 2088,
        "startChar": 63,
        "endLine": 2088,
        "endChar": 83
      },
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e438225b_c7cf2bb3",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2088,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-22T16:59:49Z",
      "side": 1,
      "message": "I think I am thinking different \"bug\". I just debugged it locally and realized that the case I was thinking actually works properly. The full clear gets deferred and then the scissored clear is called, FramebufferVk::clearImpl will end up call flushDeferredClears() to flush out the full clear and then use draw to do the scissored clear.\n\nSo I am not sure what this diff line 2088 to 2093 try to fix? I removed these lines of code, and all EGLSurfaceTest (including your newly added tests) are still passing on my pixel device and all ClearTest* still pass on linux.",
      "parentUuid": "1552d2e8_5047881e",
      "range": {
        "startLine": 2088,
        "startChar": 63,
        "endLine": 2088,
        "endChar": 83
      },
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d98abd05_b033ff9b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2088,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2023-09-22T17:03:17Z",
      "side": 1,
      "message": "can you try `SimpleStateChangeTestES3.ClearThenZeroSizeScissoredClearThenRebindAtt\nachment/ES3_Vulkan` without changes in line 2088 to 2093? it should trigger an assert somewhere in `syncState` without those lines",
      "parentUuid": "e438225b_c7cf2bb3",
      "range": {
        "startLine": 2088,
        "startChar": 63,
        "endLine": 2088,
        "endChar": 83
      },
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d838c5c_b7e4a755",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 21
      },
      "lineNbr": 2088,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-22T17:27:06Z",
      "side": 1,
      "message": "Thanks. I reproduce the assertion. I think what Shabi suggested above is the way to do.",
      "parentUuid": "d98abd05_b033ff9b",
      "range": {
        "startLine": 2088,
        "startChar": 63,
        "endLine": 2088,
        "endChar": 83
      },
      "revId": "cd2cb954b56422d5ca14c8ffba8baa0f66163c08",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}