{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "054c2aa2_0214cfcd",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5743,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2024-09-22T02:39:13Z",
      "side": 1,
      "message": "Major issue discovered.\n\nThis introduced recursion in ensurePiplineCacheInitialized, so it can deadlock with itself:\n\n```\n \tlibGLESv2.dll!std::__Cr::unique_lock\u003cangle::priv::MutexOnStd\u003e::unique_lock(angle::priv::MutexOnStd \u0026 __m) Line 40\tC++\n \tlibGLESv2.dll!rx::vk::Renderer::ensurePipelineCacheInitialized(rx::vk::Context * context) Line 5615\tC++\n \tlibGLESv2.dll!rx::vk::Renderer::getPipelineCache(rx::vk::Context * context, rx::vk::PipelineCacheAccess * pipelineCacheOut) Line 5652\tC++\n\u003e\tlibGLESv2.dll!rx::vk::Renderer::getPipelineCacheSize(rx::vk::Context * context, unsigned __int64 * pipelineCacheSizeOut) Line 5733\tC++\n \tlibGLESv2.dll!rx::vk::Renderer::ensurePipelineCacheInitialized(rx::vk::Context * context) Line 5628\tC++\n \tlibGLESv2.dll!rx::vk::Renderer::getPipelineCache(rx::vk::Context * context, rx::vk::PipelineCacheAccess * pipelineCacheOut) Line 5652\tC++\n \tlibGLESv2.dll!rx::ContextVk::createGraphicsPipeline() Line 2088\tC++\n```",
      "revId": "167b9e8d2243e68f611ebdd837bd7af498025dc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8de443dd_b0105fdd",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5743,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2024-09-22T02:43:41Z",
      "side": 1,
      "message": "Seems to happen only when the blob cache is used, because the recursion is triggered by:\n```\n    if (loadedFromBlobCache)\n    {\n        ANGLE_TRY(getPipelineCacheSize(context, \u0026mPipelineCacheSizeAtLastSync));\n    }\n```",
      "parentUuid": "054c2aa2_0214cfcd",
      "revId": "167b9e8d2243e68f611ebdd837bd7af498025dc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eeff3ae1_903c500c",
        "filename": "src/libANGLE/renderer/vulkan/vk_renderer.cpp",
        "patchSetId": 2
      },
      "lineNbr": 5743,
      "author": {
        "id": 1169885
      },
      "writtenOn": "2024-09-22T02:47:34Z",
      "side": 1,
      "message": "Possible fix:\n```\ndiff --git a/src/libANGLE/renderer/vulkan/vk_renderer.cpp b/src/libANGLE/renderer/vulkan/vk_renderer.cpp\nindex 4290be8384..d2967facac 100644\n--- a/src/libANGLE/renderer/vulkan/vk_renderer.cpp\n+++ b/src/libANGLE/renderer/vulkan/vk_renderer.cpp\n@@ -5631,13 +5631,14 @@ angle::Result Renderer::ensurePipelineCacheInitialized(vk::Context *context)\n     // We should now create the pipeline cache with the blob cache pipeline data.\n     bool loadedFromBlobCache \u003d false;\n     ANGLE_TRY(initPipelineCache(context, \u0026mPipelineCache, \u0026loadedFromBlobCache));\n+\n+    mPipelineCacheInitialized \u003d true;\n+\n     if (loadedFromBlobCache)\n     {\n         ANGLE_TRY(getPipelineCacheSize(context, \u0026mPipelineCacheSizeAtLastSync));\n     }\n\n-    mPipelineCacheInitialized \u003d true;\n-\n     return angle::Result::Continue;\n }\n```",
      "parentUuid": "8de443dd_b0105fdd",
      "revId": "167b9e8d2243e68f611ebdd837bd7af498025dc7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}