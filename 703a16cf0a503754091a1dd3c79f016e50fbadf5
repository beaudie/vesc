{
  "comments": [
    {
      "key": {
        "uuid": "d1cc697f_101b4659",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "I think it\u0027s at least worth pausing and thinking about this - this could be a really nice suggestion.\n\nIf the tree transformation layer stores sampler register itself, those could be appended to the end or inserted at the beginning of the sampler registers used in the program.\n\nThe advantage I see is that you could replace the sampler indexing expressions with \u0027internal\u0027 variables, and not need to use the \u0027angle\u0027 prefix, which has a fair bit of places where you need to use specific logic.\n\nCan you estimate how hard it would be to use this design, if the API query part were to work out well?",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 29
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_a6998649",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "I did briefly consider this, though now that I think of it more maybe the uniform API wouldn\u0027t cause too much trouble. But tree transformations are currently a bit hard to write and not very readable, and there\u0027s no pressing need to do this change with transformations.\n\nI think using the angle_ prefix combined with the original variable name is good either way - this is the only way to make querying registers for these added uniforms simple, and makes the HLSL output more readable.",
      "parentUuid": "d1cc697f_101b4659",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 29
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e37549_6a6feb34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 18,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "I think that\u0027s fine, I do agree the tree transformations as they are now are not particularly readable.",
      "parentUuid": "5177990e_a6998649",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 18,
        "endChar": 29
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "913af1f4_a33d24c2",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1570,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-03-25T20:33:49Z",
      "side": 1,
      "message": "nit: isPartOfSamplerInStruct?",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_30a76a7e",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1570,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "I think I like using ancestor, but Returns implies the C++ \u0027return\u0027 keyword, maybe ancestorIndexesSamplerInStruct (or technically, ancestor or self?)",
      "parentUuid": "913af1f4_a33d24c2",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1e62928_5290b40a",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1570,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Made it \"ancestorEvaluatesToSamplerInStruct\". Self is not included in the checked nodes, the first node checked is the parent node.",
      "parentUuid": "d1cc697f_30a76a7e",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_704d726e",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2181,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "ASSERT, this is our usual policy for internal errors",
      "range": {
        "startLine": 2181,
        "startChar": 4,
        "endLine": 2181,
        "endChar": 6
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d198e991_e2d486c4",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2181,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Of course, this if can be removed. I don\u0027t think that the code generally asserts to avoid null pointer access though, since that should terminate the program either way?",
      "parentUuid": "d1cc697f_704d726e",
      "range": {
        "startLine": 2181,
        "startChar": 4,
        "endLine": 2181,
        "endChar": 6
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e37549_2a75e306",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2181,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "We do in a few places to catch early NULL before it is dereferenced. I\u0027m not really sure what the expected behaviour on null is, but I\u0027m fine if you don\u0027t want the ASSERT. (It serves as partial documentation I would say, to make explicit our implicit assumptions)",
      "parentUuid": "d198e991_e2d486c4",
      "range": {
        "startLine": 2181,
        "startChar": 4,
        "endLine": 2181,
        "endChar": 6
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_309daa23",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2612,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "nit: 4.1+",
      "range": {
        "startLine": 2612,
        "startChar": 47,
        "endLine": 2612,
        "endChar": 50
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_06a97a56",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 2612,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc697f_309daa23",
      "range": {
        "startLine": 2612,
        "startChar": 47,
        "endLine": 2612,
        "endChar": 50
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_b060dad8",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3391,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "comment here would be good, as this is the key logic you\u0027re adding",
      "range": {
        "startLine": 3391,
        "startChar": 13,
        "endLine": 3391,
        "endChar": 42
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1b08d0b_5b132380",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3391,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc697f_b060dad8",
      "range": {
        "startLine": 3391,
        "startChar": 13,
        "endLine": 3391,
        "endChar": 42
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_1077c6a0",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3414,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "assert the output type",
      "range": {
        "startLine": 3414,
        "startChar": 16,
        "endLine": 3414,
        "endChar": 21
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_e60c5e5e",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3414,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc697f_1077c6a0",
      "range": {
        "startLine": 3414,
        "startChar": 16,
        "endLine": 3414,
        "endChar": 21
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_aeacfcc4",
        "filename": "src/compiler/translator/Types.cpp",
        "patchSetId": 5
      },
      "lineNbr": 249,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "you can make this return by value, since either move-assignment or RVO will ensure we don\u0027t do a full copy. You can also keep a const\u0026 to the RV in the calling code to ensure there is no copy.",
      "range": {
        "startLine": 249,
        "startChar": 17,
        "endLine": 249,
        "endChar": 37
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_66014e26",
        "filename": "src/compiler/translator/Types.cpp",
        "patchSetId": 5
      },
      "lineNbr": 249,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "I don\u0027t think that copies can be fully avoided here without having the out parameter. The symbols need to be gathered from possibly multiple nested levels of structs. If this returns by value the return value of the recursive function calls would still need to be copied to the vector created for the return value.",
      "parentUuid": "d1cc697f_aeacfcc4",
      "range": {
        "startLine": 249,
        "startChar": 17,
        "endLine": 249,
        "endChar": 37
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_2e98eca0",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 213,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "comment wrapping is messed up",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 213,
        "endChar": 17
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1bdedca_f3f5106e",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 213,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc697f_2e98eca0",
      "range": {
        "startLine": 212,
        "startChar": 4,
        "endLine": 213,
        "endChar": 17
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_30b12a0a",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "can\u0027t this be initialized as\n\n TVector\u003cTVector\u003cconst TIntermSymbol *\u003e\u003e groupedSamplerUniforms(HLSL_TEXTURE_MAX + 1, nullptr);",
      "range": {
        "startLine": 239,
        "startChar": 5,
        "endLine": 240,
        "endChar": 56
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1bdedca_3307883f",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Changed to initialization with the constructor that just takes count as parameter (it\u0027s a vector inside a vector).",
      "parentUuid": "d1cc697f_30b12a0a",
      "range": {
        "startLine": 239,
        "startChar": 5,
        "endLine": 240,
        "endChar": 56
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e37549_b5979866",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "Sounds good. I\u0027m not super familiar with vector, but does this initialize to nullptr?",
      "parentUuid": "f1bdedca_3307883f",
      "range": {
        "startLine": 239,
        "startChar": 5,
        "endLine": 240,
        "endChar": 56
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce3684de_72845803",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-31T15:46:20Z",
      "side": 1,
      "message": "The vectors inside the outer vector are initialized to empty vectors, no pointer entries are added when initializing.",
      "parentUuid": "b1e37549_b5979866",
      "range": {
        "startLine": 239,
        "startChar": 5,
        "endLine": 240,
        "endChar": 56
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e59ec47_5cdf1df8",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 240,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-31T15:52:16Z",
      "side": 1,
      "message": "Ah, missed that they were value types. Thanks.",
      "parentUuid": "ce3684de_72845803",
      "range": {
        "startLine": 239,
        "startChar": 5,
        "endLine": 240,
        "endChar": 56
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_70e1f2e4",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "ASSERT(outputType \u003d\u003d SH_HLSL_3_0_OUTPUT) or similarly correct check",
      "range": {
        "startLine": 284,
        "startChar": 24,
        "endLine": 284,
        "endChar": 47
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_50f30eb1",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "I\u0027d rather see you pull out the struct field sampler declaration into its own function to avoid the if statement inside declareAndOutputUniform - it seems we\u0027ll always know at this point in the code, and not have to check for nullptr in a the uniform map.",
      "range": {
        "startLine": 284,
        "startChar": 24,
        "endLine": 284,
        "endChar": 47
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_2607563f",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Unfortunately it\u0027s not quite that straightforward: outputHLSLSamplerUniformGroup doesn\u0027t know whether it\u0027s dealing with regular uniforms or samplers extracted from structs, so it still needs the if statement. Still, the code is maybe a bit cleaner with your suggestion.",
      "parentUuid": "d1cc697f_50f30eb1",
      "range": {
        "startLine": 284,
        "startChar": 24,
        "endLine": 284,
        "endChar": 47
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_46fc5257",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1cc697f_70e1f2e4",
      "range": {
        "startLine": 284,
        "startChar": 24,
        "endLine": 284,
        "endChar": 47
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e37549_55a72cce",
        "filename": "src/compiler/translator/UniformHLSL.cpp",
        "patchSetId": 5
      },
      "lineNbr": 284,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "Ok, looks good. I didn\u0027t notice the nested functions.",
      "parentUuid": "5177990e_2607563f",
      "range": {
        "startLine": 284,
        "startChar": 24,
        "endLine": 284,
        "endChar": 47
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "913af1f4_23bf54d6",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1863,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-03-25T20:33:49Z",
      "side": 1,
      "message": "Just to be sure I understand correctly: here we are creating a dummy encoder so that the sampler2d doesn\u0027t get encoded but the rest goes through?",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_f31a6f53",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1863,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "This code was already pretty messy before and I\u0027m a concerned about keeping it maintainable. I think we can clean it up by moving the sampler register assignment out of defineUniforms into assignSamplerRegisters. Step-by-step:\n\n 1) Add a new method hasUniformRegister to ShaderD3D\n 2) In ProgramD3D::assignSamplerRegisters, replace the d3dUniform-\u003exsRegisterIndex !\u003d GL_INVALID_INDEX checks with hasUniformRegister calls.\n 3) Now use getUniformRegister to init the register indexes before the call to AssignSamplers.\n 4) You can then pass a nullptr encoder through defineUniform for all sampler types, and in defineUniform, avoid initializing register indexes for sampler types.\n\nLet me know if this works out as I expect.",
      "parentUuid": "913af1f4_23bf54d6",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_2652f60f",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1863,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "The encoder is created so that calling defineUniform with the sampler doesn\u0027t affect the register mapping for the other struct members, and so that the sampler gets the right register assigned.",
      "parentUuid": "913af1f4_23bf54d6",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_666dce8f",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1863,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Agreed that this is a cleaner way to implement this. I don\u0027t see any issues here.",
      "parentUuid": "d1cc697f_f31a6f53",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e37549_75aeb0a9",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1863,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "Looks much better!",
      "parentUuid": "5177990e_666dce8f",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "910bd117_8d02112d",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1865,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2016-03-25T20:33:49Z",
      "side": 1,
      "message": "nit: assert shaderD3D is not null",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_c67be249",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1865,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Code was refactored so that this is no longer relevant. Also, I think usually assert to check for nullptr is unnecessary?",
      "parentUuid": "910bd117_8d02112d",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_d06b9eea",
        "filename": "src/libANGLE/renderer/d3d/ShaderD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "at this point I think we should change the API for ShGetUniformRegister to just return the whole map. This API is not used by Chrome or Firefox AFAIK. The change would eliminate the need for this fairly large block of code.\n\nNote to return a const \u0026 and copy the map inside ShaderD3D, because of complications with the memory boundary of DLLs. (See prior examples for ShGetUniforms, ShGetVaryings, etc)",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5177990e_c6d2027a",
        "filename": "src/libANGLE/renderer/d3d/ShaderD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-29T14:52:39Z",
      "side": 1,
      "message": "Note that this code also maps \"us[0].tex\" to \"angle_us_0_tex\". This mapping wouldn\u0027t fit in very nicely to the translator side either I think. So changing the ShGetUniformRegister API isn\u0027t enough in itself to make this code unnecessary. I didn\u0027t do any changes here yet, but can consider them if you still think changing this would be better.",
      "parentUuid": "d1cc697f_d06b9eea",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b168d59f_39a44fc8",
        "filename": "src/libANGLE/renderer/d3d/ShaderD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-30T15:24:23Z",
      "side": 1,
      "message": "Hm, I didn\u0027t notice the mapping. I\u0027ve given this some thought - I don\u0027t think the ANGLE-side code should be aware of the specifics of the name mapping, this seems like a layering violation.\n\nI think we should rework the code a bit to get the uniforms map to store the same uniform name that the ShaderD3D would query. To do this, I think you could:\n\n 1) In TStructure::createSamplerSymbols, generate a TMap from the unmapped name (with . and []) to the new symbol.\n 2) This will require passing around a few more params for the unmapped name.\n 3) Take the unmapped name as a parameter to  UniformHLSL::assignSamplerInStructUniformRegister, use that to init the uniform map\n 4) In UniformHLSL::uniformsHeader, you will have the unampped name from createSamplerSymbols for the \"old\" style samplers\n 5) In \"4.1+\" style, store the unmapped name in the sampler group for later use\n 6) Then switch to the new map query here, pulling in the whole std::map.\n\nThis will add some code to the translator-side, but will clean up the ANGLE-side, and the remove need for the ANGLE-side mapping and struct traversal.",
      "parentUuid": "5177990e_c6d2027a",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae14f033_f9283777",
        "filename": "src/libANGLE/renderer/d3d/ShaderD3D.cpp",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1142464
      },
      "writtenOn": "2016-03-31T15:46:20Z",
      "side": 1,
      "message": "I agree that the translator is better encapsulated if the API offers querying the registers with the names in .[] format. I was worried that filling in the uniform map would get ugly, but in fact it seems manageable.\n\nGenerating the names in .[] format in createSamplerSymbols can be optional, so the full cost for that isn\u0027t paid in places where the map is not needed.",
      "parentUuid": "b168d59f_39a44fc8",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 153,
        "endChar": 10
      },
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1cc697f_30f92a6b",
        "filename": "src/tests/deqp_support/deqp_gles3_test_expectations.txt",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-03-28T22:41:40Z",
      "side": 1,
      "message": "this makes me very happy",
      "revId": "703a16cf0a503754091a1dd3c79f016e50fbadf5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}