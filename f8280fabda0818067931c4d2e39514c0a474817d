{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1ac65fc8_dae54638",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-30T19:06:08Z",
      "side": 1,
      "message": "Is there an existing trace or an end2end test that I could retrace to try this change? If not, what would be a typical sequence of calls that we would be capturing?",
      "revId": "f8280fabda0818067931c4d2e39514c0a474817d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "796997a4_e47065f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-05-30T19:20:44Z",
      "side": 1,
      "message": "Yeah, you can retrace `infinity_ops` or `kentucky_route_zero` to see the effect. I started with frame 2 and ended at 3 just for speed.  The difference will be:\n```\n    # In Setup, you will see an EGL sync created\n    CreateEGLSyncKHR(gEGLDisplay, 12537, 0, 1);\n\n    # In Reset, you will see an EGL sync destroyed and the original one restored.\n    eglDestroySyncKHR(gEGLDisplay, gEGLSyncMap[1]);\n    CreateEGLSyncKHR(gEGLDisplay, 12537, 0, 1);\n```",
      "parentUuid": "1ac65fc8_dae54638",
      "revId": "f8280fabda0818067931c4d2e39514c0a474817d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6b72da13_cde87a92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-30T23:05:26Z",
      "side": 1,
      "message": "Alright I tried this on the interpreter and it crashes the same way (before/after this CL) as it doesn\u0027t currently support `eglDestroySyncKHR` at all:\nwe gather `egl_ext_commands` here:\nhttps://crsrc.org/c/third_party/angle/scripts/generate_entry_points.py;drc\u003d7d4c6d1d07ac52b486d9b4d589dcd92678ad68c5;l\u003d3248\nbut then they\u0027re only used in a `write_stubs_header` call and nowhere else. So they are missing from the mapping in `frame_capture_replay_autogen.cpp` and the interpreter can\u0027t call the function. If I just skip the assert and call in that file, interpreter can run the trace before or after this CL.",
      "parentUuid": "796997a4_e47065f2",
      "revId": "f8280fabda0818067931c4d2e39514c0a474817d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4cbd176_6d0cf8f6",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-05-30T19:06:08Z",
      "side": 1,
      "message": "Could you add a comment why we need this here and how `count` is used?\n\nI see similar code here:\nhttps://crsrc.org/c/third_party/angle/src/libANGLE/capture/FrameCapture.cpp;drc\u003d9e47cbd300ca9d9948be7aef33887a0b57daf666;l\u003d1005\n\nbut there we\u0027re calling `UpdateResourceIDBuffer` so it makes sense.",
      "range": {
        "startLine": 1406,
        "startChar": 17,
        "endLine": 1406,
        "endChar": 40
      },
      "revId": "f8280fabda0818067931c4d2e39514c0a474817d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e64f563e_cf61dae5",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1406,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2023-06-08T19:38:54Z",
      "side": 1,
      "message": "The other resources in this function are using a shared `DeleteResourcesInReset` call.  We can\u0027t use that for EGLSync because it uses Destroy instead of Delete, and you can only do one at a time, instead of in a block.\n \nSo my intention here was to delete all the new or modified syncs, while counting how many we had, and then resizing the `maxResourceIDBufferSize`, even though we aren\u0027t calling `UpdateResourceIDBuffer` here.\n\nLooking closer, I can see we never use `UpdateResourceIDBuffer` or `gResourceIDBuffer` for syncs, so I can drop this line.",
      "parentUuid": "f4cbd176_6d0cf8f6",
      "range": {
        "startLine": 1406,
        "startChar": 17,
        "endLine": 1406,
        "endChar": 40
      },
      "revId": "f8280fabda0818067931c4d2e39514c0a474817d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}