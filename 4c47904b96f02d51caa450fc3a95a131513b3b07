{
  "comments": [
    {
      "key": {
        "uuid": "cfe559f4_5b02639e",
        "filename": "extensions/EGL_ANGLE_window_fixed_size.txt",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "Missed this before-- we need company affiliation.",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf26394f_671c1a80",
        "filename": "extensions/EGL_ANGLE_window_fixed_size.txt",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000608
      },
      "writtenOn": "2014-02-18T18:53:43Z",
      "side": 1,
      "message": "It looks to me like the standard (as much as there is one) is to do this under \"Contacts\", so I\u0027ll do it there.",
      "parentUuid": "cfe559f4_5b02639e",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fdcd12e_5da6db5e",
        "filename": "extensions/EGL_ANGLE_window_fixed_size.txt",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "Also missed this-- I think we\u0027ve usually used Google addresses. (Actually, I was TG last time I wrote an extension; had to check the registry to see what people have done before.)",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfe559f4_1b21bb2e",
        "filename": "extensions/EGL_ANGLE_window_fixed_size.txt",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "Extra leading quote.",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fdcd12e_fdfc0723",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "This error is no longer called out in the extension text. We should either specify an error for zero values when fixed size is set, or silently allow creation of zero-sized surfaces if the application asks for them. The extension text would be cleaner with the latter, but it\u0027d be less friendly to careless users. I... could go either way on this one.",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf26394f_c7208e82",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000608
      },
      "writtenOn": "2014-02-18T18:53:43Z",
      "side": 1,
      "message": "I think D3D9 gives an error if we try to create a 0-size surface, so we can\u0027t just do that (we could emulate with 1x1 surfaces, but that\u0027s tricky to get perfect). It would also be weird to specify that the implementation must error out when the default values of EGL_WIDTH or EGL_HEIGHT are used.\n\nWith this I was mostly trying to match what we were doing with pbuffer surfaces, where we have the same issue. We could try generating EGL_BAD_ALLOC instead (because we can\u0027t allocate a swapchain like that), which is allowed by the spec, but that error is less obvious.",
      "parentUuid": "0fdcd12e_fdfc0723",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f696973_9be3bb45",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-19T22:00:32Z",
      "side": 1,
      "message": "Ah-- strictly speaking, our behavior for pbuffer surfaces is also out of spec (although, for EGL, a lot of our behavior is across the board). As far as silent creation of a 0x0, I was thinking just return without error, but not actually create anything D3D-side? Not sure-- I\u0027m just particularly concerned about obeying the spec on a vendor-specific extension that we write ourselves and are likely to be the only implementors of.\n\nJamie-- I think you had some run-ins with 0x0 windows around this time last year. Do you have any opinion/insight on this one?",
      "parentUuid": "cf26394f_c7208e82",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef577db2_aab8aba9",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-02-19T22:20:00Z",
      "side": 1,
      "message": "I think it\u0027s fine either way. We can handle zero-sized surfaces correctly. I think we fixed that at the time Shannon was thinking of. It\u0027s also okay to stop zero sized surfaces from happening as they are basically do nothing beneficial.",
      "parentUuid": "4f696973_9be3bb45",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f78b56e_1cbe9d94",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1000608
      },
      "writtenOn": "2014-02-20T23:11:14Z",
      "side": 1,
      "message": "I just tried without this check and creating a 0x0 surface fails in D3D. I\u0027ll try adding language to the spec to say that creating a 0-width or 0-height surface is disallowed.",
      "parentUuid": "ef577db2_aab8aba9",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f58891a_d268820a",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 4
      },
      "lineNbr": 248,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2014-02-24T15:04:03Z",
      "side": 1,
      "message": "Where does it fail? Is it possible to trigger the failure in our codebase currently? I thought we had proofed against 0x0.",
      "parentUuid": "2f78b56e_1cbe9d94",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fdcd12e_fd15e79a",
        "filename": "src/libEGL/Surface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "I doubt it\u0027s a functional issue, but should we continue to initialize these to -1 if fixedSize is false, so that it\u0027s easier to tell if something goes wrong in that case?",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afb4a5de_9a14edd2",
        "filename": "src/libEGL/Surface.cpp",
        "patchSetId": 4
      },
      "lineNbr": 65,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-02-13T17:33:04Z",
      "side": 1,
      "message": "Is this defaulting to EGL_TRUE because this is the constructor called for offscreen surfaces? If so, please comment to that effect.",
      "revId": "4c47904b96f02d51caa450fc3a95a131513b3b07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}