{
  "comments": [
    {
      "key": {
        "uuid": "be09b9ec_178537f3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1251,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-11-29T15:47:51Z",
      "side": 1,
      "message": "The minimum values for these limits seem to be VK_SAMPLE_COUNT_1_BIT | VK_SAMPLE_COUNT_4_BIT according to the spec, so this `if` is unnecessary. Please double check.",
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d389ff2_aad61093",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1251,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-12-02T19:28:12Z",
      "side": 1,
      "message": "Great point, the check is unnecessary.",
      "parentUuid": "be09b9ec_178537f3",
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5592ed9_cda67f54",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-27T17:47:59Z",
      "side": 1,
      "message": "possible to omit this new overload?",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fc00cd4_8ab0fc66",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-11-27T19:35:08Z",
      "side": 1,
      "message": "No.  I tried taking it out, and it caused 79 tests to fail.  They all seem to get the same validation error about trying to do multisample with an image that only has 1 sample.",
      "parentUuid": "a5592ed9_cda67f54",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "202e9b76_79151fda",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-27T19:37:56Z",
      "side": 1,
      "message": "Let\u0027s figure out how to fix that.",
      "parentUuid": "3fc00cd4_8ab0fc66",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988e8864_3a42d8cc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-11-29T15:47:51Z",
      "side": 1,
      "message": "I agree with Jamie. This value is set in `init()` among many other properties, it doesn\u0027t make sense for it to be special-cased (and duplicated) here.\n\nBased on your comment, it sounds like the issue is `TextureVk::initImage()` that\u0027s using `mImage-\u003egetSamples()` to `init()` the image. You should probably instead retrieve the number of samples from the frontend\u0027s TextureState, in which case you don\u0027t need to pass `samples` to `new vk::ImageHelper()` in `TextureVk::ensureImageAllocated()`",
      "parentUuid": "202e9b76_79151fda",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6167848_dc177978",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-12-02T19:28:12Z",
      "side": 1,
      "message": "I made the suggested change, but it doesn\u0027t make sense to me.  I\u0027d like to understand this. \n Here\u0027s what I\u0027m seeing/reading ...\n\nThe ImageHelper class has an mSamples member and a getSamples() method.  ImageHelper::getSamples() is called by a number of classes, including the TextureVk and RenderbufferVk classes.  However, the TextureVk class should not populate ImageHelper::mSamples when it creates an ImageHelper for a multisample texture, nor call ImageHelper::getSamples() (at least not in TextureVk::initImage()).  Instead, TextureVk::initImage() should query the number of samples from the front-end TextureState and pass that number down to ImageHelper::init() method.\n\nIs that correct?\n\nIf so, should ImageHelper::mSamples be removed, and other callers of ImageHelper::getSamples() be replaced with queries to the front-end (as part of a different CL)?",
      "parentUuid": "988e8864_3a42d8cc",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "756c2569_7a67c1f6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-02T19:56:27Z",
      "side": 1,
      "message": "First, yes, your understanding is correct. There are cached data (including mSamples) in ImageHelper that are only valid after init() is called.\n\nBut we still want them cached in ImageHelper. Not all images come from TextureVks, so we can\u0027t replace all calls to getSamples() (or similar) to a front-end query.",
      "parentUuid": "a6167848_dc177978",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4972bbe_f220e0c9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-12-02T20:44:40Z",
      "side": 1,
      "message": "A number of new failures as a result of this.  I\u0027m looking into them.",
      "parentUuid": "756c2569_7a67c1f6",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dae78a45_863c96e2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2019-12-02T21:06:38Z",
      "side": 1,
      "message": "The reason for the new test failures is that TextureVk::initImage() now queries the number of samples from the front-end; and the front-end sometimes constructs the ImageDesc struct with 0 samples.  There are 3 ImageDesc constructors, 2 of which set the number of samples to 0.\n\nFrom a design point-of-view, it seems like there\u0027s danger in having struct/class members that are sometimes initialized (or initialized to reasonable values) and sometimes not.\n\nWhat direction do you want me to go in now?",
      "parentUuid": "f4972bbe_f220e0c9",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8deedc_f47c9509",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 17
      },
      "lineNbr": 663,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-12-02T21:22:09Z",
      "side": 1,
      "message": "\u003e the front-end sometimes constructs the ImageDesc struct with 0 samples\n\nIs that a bug? Or is it a result of the ImageDesc being updated *after* the Impl call instead of before the Impl call. If we create a Texture or Renderbuffer as multisampled and record a zero samples ImageDesc after the init call that seems like a bug.",
      "parentUuid": "dae78a45_863c96e2",
      "range": {
        "startLine": 663,
        "startChar": 4,
        "endLine": 663,
        "endChar": 31
      },
      "revId": "ea66cf81ff1791b93a0968d43e52293a57824e31",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}