{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d93563be_aff909c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-20T17:57:34Z",
      "side": 1,
      "message": "Here\u0027s a +1 you didn\u0027t ask for",
      "revId": "6b06fa16d8110faedded36dd3129299d23158760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23f166dd_2ce06d94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297347
      },
      "writtenOn": "2024-03-21T04:16:46Z",
      "side": 1,
      "message": "One of the multithreaded vulkan tests failed (flakily) with this error message, not sure if it\u0027s useful:\n\n[17647/19115] MultithreadingTest.EGLImageProduceConsume/ES3_Vulkan (FAIL)\n\n[ RUN      ] MultithreadingTest.EGLImageProduceConsume/ES3_Vulkan\n..\\..\\src\\tests\\test_utils\\ANGLETest.cpp(65): error: vk_renderer.cpp:804 (DebugUtilsMessenger): [ VUID-vkCmdDraw-None-08114 ] Validation Error: [ VUID-vkCmdDraw-None-08114 ] Object 0: handle \u003d 0x62e000000062e, type \u003d VK_OBJECT_TYPE_DESCRIPTOR_SET; | MessageID \u003d 0x2ba3a98e | vkCmdDraw():  the descriptor (VkDescriptorSet 0x62e000000062e[], binding 0, index 0) is using imageView VkImageView 0x0[] that is invalid or has been destroyed. The Vulkan spec states: Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid as described by descriptor validity if they are statically used by the VkPipeline bound to the pipeline bind point used by this command and the bound VkPipeline was not created with VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#VUID-vkCmdDraw-None-08114)\n                            Object: 0x62e000000062e (type \u003d Descriptor Set(23))\n\nERR: vk_renderer.cpp:804 (DebugUtilsMessenger): [ VUID-vkCmdDraw-None-08114 ] Validation Error: [ VUID-vkCmdDraw-None-08114 ] Object 0: handle \u003d 0x62e000000062e, type \u003d VK_OBJECT_TYPE_DESCRIPTOR_SET; | MessageID \u003d 0x2ba3a98e | vkCmdDraw():  the descriptor (VkDescriptorSet 0x62e000000062e[], binding 0, index 0) is using imageView VkImageView 0x0[] that is invalid or has been destroyed. The Vulkan spec states: Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid as described by descriptor validity if they are statically used by the VkPipeline bound to the pipeline bind point used by this command and the bound VkPipeline was not created with VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT (https://www.khronos.org/registry/vulkan/specs/1.3-extensions/html/vkspec.html#VUID-vkCmdDraw-None-08114)\n                            Object: 0x62e000000062e (type \u003d Descriptor Set(23))\n\nBacktrace:\n    angle::PrintStackBacktrace (o:\\util\\windows\\win32\\test_utils_win32.cpp:147)\n    angle::`anonymous namespace\u0027::TestPlatform_logError (o:\\src\\tests\\test_utils\\ANGLETest.cpp:68)\n    angle::LoggingAnnotator::logMessage (o:\\src\\libANGLE\\LoggingAnnotator.cpp:0)\n    gl::LogMessage::~LogMessage (o:\\src\\common\\debug.cpp:185)\n    rx::vk::`anonymous namespace\u0027::DebugUtilsMessenger (o:\\src\\libANGLE\\renderer\\vulkan\\vk_renderer.cpp:812)\n    LogMsg (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\error_message\\logging.cpp:465)\n    ValidationObject::LogError (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\vulkan\\generated\\chassis.h:2355)\n    vvl::DescriptorValidator::ValidateDescriptor (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\drawdispatch\\descriptor_validator.cpp:284)\n    vvl::DescriptorValidator::ValidateDescriptor (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\drawdispatch\\descriptor_validator.cpp:949)\n    vvl::DescriptorValidator::ValidateDescriptors\u003cvvl::DescriptorBindingImpl\u003cvvl::ImageSamplerDescriptor\u003e \u003e (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\drawdispatch\\descriptor_validator.cpp:47)\n    CoreChecks::ValidateDrawState (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\core_checks\\cc_descriptor.cpp:818)\n    CoreChecks::ValidateActionState (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\core_checks\\cc_drawdispatch.cpp:1638)\n    CoreChecks::PreCallValidateCmdDraw (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\core_checks\\cc_drawdispatch.cpp:161)\n    vulkan_layer_chassis::CmdDraw (o:\\third_party\\vulkan-deps\\vulkan-validation-layers\\src\\layers\\vulkan\\generated\\chassis.cpp:3209)\n    rx::vk::priv::SecondaryCommandBuffer::executeCommands (o:\\src\\libANGLE\\renderer\\vulkan\\SecondaryCommandBuffer.cpp:409)\n    rx::vk::RenderPassCommandBufferHelper::flushToPrimary (o:\\src\\libANGLE\\renderer\\vulkan\\vk_helpers.cpp:2742)\n    rx::vk::CommandQueue::flushRenderPassCommands (o:\\src\\libANGLE\\renderer\\vulkan\\CommandProcessor.cpp:1351)\n    rx::vk::Renderer::flushRenderPassCommands (o:\\src\\libANGLE\\renderer\\vulkan\\vk_renderer.cpp:0)\n    rx::ContextVk::flushCommandsAndEndRenderPassWithoutSubmit (o:\\src\\libANGLE\\renderer\\vulkan\\ContextVk.cpp:8072)\n    rx::ContextVk::flushImpl (o:\\src\\libANGLE\\renderer\\vulkan\\ContextVk.cpp:7667)\n    rx::ContextVk::onSyncObjectInit (o:\\src\\libANGLE\\renderer\\vulkan\\ContextVk.cpp:8169)\n    rx::vk::SyncHelper::initialize (o:\\src\\libANGLE\\renderer\\vulkan\\SyncVk.cpp:144)\n    rx::EGLSyncVk::initialize (o:\\src\\libANGLE\\renderer\\vulkan\\SyncVk.cpp:640)\n    egl::Sync::initialize (o:\\src\\libANGLE\\EGLSync.cpp:78)\n    egl::Display::createSync (o:\\src\\libANGLE\\Display.cpp:1695)\n    egl::CreateSyncKHR (o:\\src\\libGLESv2\\egl_ext_stubs.cpp:155)\n    EGL_CreateSyncKHR (o:\\src\\libGLESv2\\entry_points_egl_ext_autogen.cpp:1448)\n    std::__Cr::__thread_proxy\u003cstd::__Cr::tuple\u003cstd::__Cr::unique_ptr\u003cstd::__Cr::__thread_struct,std::__Cr::default_delete\u003cstd::__Cr::__thread_struct\u003e \u003e,`lambda at ..\\..\\src\\tests\\gl_tests\\MultithreadingTest.cpp:786:32\u0027\u003e \u003e (o:\\third_party\\libc++\\src\\include\\__thread\\thread.h:202)\n    configthreadlocale - 00007FFCB56F1BB2 (ucrtbase): (filename not available)\n    BaseThreadInitThunk - 00007FFCB73F7034 (KERNEL32): (filename not available)\n    RtlUserThreadStart - 00007FFCB7C22651 (ntdll): (filename not available)\n[  FAILED  ] MultithreadingTest.EGLImageProduceConsume/ES3_Vulkan, where GetParam() \u003d ES3_Vulkan (7685 ms)",
      "parentUuid": "d93563be_aff909c7",
      "revId": "6b06fa16d8110faedded36dd3129299d23158760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a76fb32_91dfde63",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-21T13:30:27Z",
      "side": 1,
      "message": "Thanks for flagging it, but definitely an unrelated flake",
      "parentUuid": "23f166dd_2ce06d94",
      "revId": "6b06fa16d8110faedded36dd3129299d23158760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "6b06fa16d8110faedded36dd3129299d23158760",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "6b06fa16d8110faedded36dd3129299d23158760",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "6b06fa16d8110faedded36dd3129299d23158760",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}