{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cb23d7dd_fa777785",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-18T16:02:58Z",
      "side": 1,
      "message": "You can call `ContextVk::onImageReleaseToExternal()` instead.\n\nThat said, is there a more constrained place we could call this? Like at the call site which specifically has something to do with external images?\n\nThis seems like it\u0027s in the wrong place, other than the `(void)` cast being an indication, in the very least it should be done after finalizeImageLayoutInShareContexts(), don\u0027t you think?",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e9adf63_6d6394b9",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2023-04-18T16:27:50Z",
      "side": 1,
      "message": "```\n         else\n         {\n-            if (contextVk-\u003ehasUnsubmittedUse(mImage-\u003egetResourceUse()))\n-            {\n-                ANGLE_TRY(contextVk-\u003eflushImpl(nullptr, RenderPassClosureReason::ImageUseThenReleaseToExternal));\n-            }\n-\n             mImage-\u003efinalizeImageLayoutInShareContexts(renderer, contextVk, mImageSiblingSerial);\n+\n+            (void)contextVk-\u003eonImageReleaseToExternal(*mImage);\n+\n             mImageObserverBinding.bind(nullptr);\n             mImage \u003d nullptr;\n         }\n```\n\ndoes not seem to work. Potentially a render pass is not actually started since SurfaceFlinger is not actually doing any \"real work\" and is just repeatedly \n\n```\neglCreateImage(ahb);\nglGenTexture();\nglBindTexture();\nglEGLImageTargetTexture2DOES(image);\nglDeleteTextures();\neglDestroyImage();\n```",
      "parentUuid": "cb23d7dd_fa777785",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2dd128a8_12e44639",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-18T16:34:21Z",
      "side": 1,
      "message": "Ok, does this work?\n\n```\n         else\n         {\n-            if (contextVk-\u003ehasUnsubmittedUse(mImage-\u003egetResourceUse()))\n-            {\n-                ANGLE_TRY(contextVk-\u003eflushImpl(nullptr, RenderPassClosureReason::ImageUseThenReleaseToExternal));\n-            }\n-\n             mImage-\u003efinalizeImageLayoutInShareContexts(renderer, contextVk, mImageSiblingSerial);\n+\n+            if (contextVk-\u003ehasUnsubmittedUse(mImage-\u003egetResourceUse()))\n+            {\n+                ANGLE_TRY(contextVk-\u003eflushImpl(nullptr, RenderPassClosureReason::ImageUseThenReleaseToExternal));\n+            }\n+\n             mImageObserverBinding.bind(nullptr);\n             mImage \u003d nullptr;\n         }\n```\n\nSomething still feels wrong to me; like `glDeleteTextures` and `eglDestroyImage` may come from another context, so now you need to call flush on all contexts in the share group, not just the current context.\n\nAnd then `finalizeImageLayoutInShareContexts` becomes redundant because the flush would do the same thing.\n\n@Igor who recently added the finalizeImageLayoutInShareContexts() call here",
      "parentUuid": "3e9adf63_6d6394b9",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a68c674_5fbb42c1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2023-04-18T16:45:20Z",
      "side": 1,
      "message": "Yup, that still works.\n\nre: the `ANGLE_TRY()`, I tried plumbing the `angle::Result` further up in patchset 3 but cclao@ suggested to just drop the result in https://chromium-review.googlesource.com/c/angle/angle/+/4436529/comment/cd02cd8b_ede70764/ .",
      "parentUuid": "2dd128a8_12e44639",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "133363cf_7eb8b48e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-18T17:24:13Z",
      "side": 1,
      "message": "\u003e like glDeleteTextures and eglDestroyImage may come from another context, so now you need to call flush on all contexts in the share group, not just the current context.\n\nThe hasUnsubmittedUse() check will only return true if resource has an unsubmitted queue serial of *this* context. So in case of two context, only one context will end up with flush.",
      "parentUuid": "8a68c674_5fbb42c1",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67ad74d3_05006cce",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-18T17:30:50Z",
      "side": 1,
      "message": "You probably can move the fix one call higher, add into TextureVk::releaseAndDeleteImageAndViews instead of here, since all other places that calls releaseImage are due to respecify, which won\u0027t happen with AHB. But I think just ignore the return value might still good to avoid having to change all other APIs to return angle::Result.",
      "parentUuid": "133363cf_7eb8b48e",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dbf3de9_baa76466",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-18T17:50:24Z",
      "side": 1,
      "message": "\u003e The hasUnsubmittedUse() check will only return true if resource has an unsubmitted queue serial of this context. So in case of two context, only one context will end up with flush.\n\nI mean that\u0027s the problem. You don\u0027t know which context the texture is used in, because any context can be releasing it, so you\u0027d have to do this for all contexts in the share group, not just this context.",
      "parentUuid": "67ad74d3_05006cce",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcac93c2_21ee8b5e",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3277,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-18T17:51:33Z",
      "side": 1,
      "message": "\u003e The hasUnsubmittedUse() check will only return true if resource has an unsubmitted queue serial of this context. So in case of two context, only one context will end up with flush.\n\n\u003e I mean that\u0027s the problem. You don\u0027t know which context the texture is used in, because any context can be releasing it, so you\u0027d have to do this for all contexts in the share group, not just this context.\n\nI guess this CL should do similar thing to `finalizeImageLayoutInShareContexts()`.\nIt should go over each context in a share group, check if it `hasUnsubmittedUse` and if it does - call `flushImpl`.\n\nMay name this function `flushUsubmittedUseInShareContexts()`, for example.\n\n\u003e And then finalizeImageLayoutInShareContexts becomes redundant because the flush would do the same thing.\n\nI think you are right. If Image Layout is not finalized it must have unsubmitted use. Calling `flushImpl()` will finalize the layout.\n\n---\n\nAnother question. Should similar be performed in the `RenderbufferVk::releaseImage()` for consistency? If yes, then `flushUsubmittedUseInShareContexts` will replace `finalizeImageLayoutInShareContexts` completely.",
      "parentUuid": "133363cf_7eb8b48e",
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "636a8064_7b9a5be5",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1860,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-18T00:07:02Z",
      "side": 1,
      "message": "Does it need to be 2000 to reproduce (it increases test time)? If this is deterministic (if I understand problem correctly), then loop once should be enough?",
      "range": {
        "startLine": 1860,
        "startChar": 24,
        "endLine": 1860,
        "endChar": 28
      },
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a35c246_5f8d0e8e",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1860,
      "author": {
        "id": 1379716
      },
      "writtenOn": "2023-04-18T16:45:20Z",
      "side": 1,
      "message": "I guess the issue is that there is not really an available and clean mechanism for checking how many outstanding gralloc buffers are imported and being kept alive (there is a `gralloc-\u003edumpBuffers()` but IIUC that is intended for debugging) so the failures manifest as the device running out of memory (and/or in this specific Cuttlefish case when we are using GPU passthrough with Gfxstream, the host GPU running out of memory) and kind of dying in weird ways. Maybe these tests are better left downstream if there is worry about the test time?",
      "parentUuid": "636a8064_7b9a5be5",
      "range": {
        "startLine": 1860,
        "startChar": 24,
        "endLine": 1860,
        "endChar": 28
      },
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3de41bf9_3ccc86dd",
        "filename": "src/tests/egl_tests/EGLSurfaceTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1860,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-18T17:24:13Z",
      "side": 1,
      "message": "I also realized this after commenting. One way to deal with it is add a performance counter to how many active ImageHelper object in the system (i.e, you keep std::atomic\u003csize_t\u003e mTotalActivateImageHelperCount in the renderer and then retrieve it via performance counter. See vkQueueSubmitCallsTotal and VulkanPerformanceCounterTest.cpp for example. Or you can check number of submissions to ensure after each release there is a submit call. Check on submit call sounds a bit odd since what you really care is AHB coounts. Or you can count how many HardwareBufferImageSiblingVkAndroid objects instead of ImageHelper. Either way should work, I think.",
      "parentUuid": "3a35c246_5f8d0e8e",
      "range": {
        "startLine": 1860,
        "startChar": 24,
        "endLine": 1860,
        "endChar": 28
      },
      "revId": "5b5d6f34b5336874127e7033dd059fcdc17f021e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}