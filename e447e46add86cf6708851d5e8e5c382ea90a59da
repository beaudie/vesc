{
  "comments": [
    {
      "key": {
        "uuid": "758fc75b_5de59f6e",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "We can try to get this up-streamed to Khronos but I think it\u0027s reasonable to just leave it as a HWND too.  The user would static_cast\u003cEGLNativeWindowType\u003e(window) before calling eglCreateWindowSurface.",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 35
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81f03ef_460ea908",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "I\u0027m OK either way.  I originally had left it as HWND, changed to void* based on feedback from Rafael.  There is certainly less churn from leaving it as HWND.",
      "parentUuid": "758fc75b_5de59f6e",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 35
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "719d706a_6c2ad777",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-01T17:30:08Z",
      "side": 1,
      "message": "I\u0027m OK with trying to get it changed to a void* if we think that\u0027s best but the proper way is to try to upstream these changes to the official headers.",
      "parentUuid": "a81f03ef_460ea908",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 35
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc04e855_9af8c709",
        "filename": "include/EGL/eglplatform.h",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2018-10-05T02:27:50Z",
      "side": 1,
      "message": "I do not feel super strong about changing from an HWND to a pointer, just a little bit dirty. \nI think the static_cast should already handle cases where the two types are incompatible with one another",
      "parentUuid": "719d706a_6c2ad777",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 35
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ab7d822_891451fa",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "EGL_ANGLE_windows_ui_composition",
      "range": {
        "startLine": 731,
        "startChar": 7,
        "endLine": 731,
        "endChar": 38
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7e7bd01_eef755f5",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "Done in next update",
      "parentUuid": "7ab7d822_891451fa",
      "range": {
        "startLine": 731,
        "startChar": 7,
        "endLine": 731,
        "endChar": 38
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd4864ca_7533c942",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-03T01:06:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7e7bd01_eef755f5",
      "range": {
        "startLine": 731,
        "startChar": 7,
        "endLine": 731,
        "endChar": 38
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d93e7e5_d59a2da7",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 1
      },
      "lineNbr": 731,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-03T01:10:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd4864ca_7533c942",
      "range": {
        "startLine": 731,
        "startChar": 7,
        "endLine": 731,
        "endChar": 38
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f192a647_949b9dc1",
        "filename": "src/libANGLE/Surface.h",
        "patchSetId": 1
      },
      "lineNbr": 185,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "This is never assigned.  I don\u0027t thin it\u0027s needed anyways.",
      "range": {
        "startLine": 184,
        "startChar": 28,
        "endLine": 185,
        "endChar": 31
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a92dd34_42c661e4",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2831,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "This probably should not be a surface query.  The user should check if the display extension is present to determine if they can create surfaces from this window type.",
      "range": {
        "startLine": 2822,
        "startChar": 8,
        "endLine": 2831,
        "endChar": 18
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7688b9bb_ccb3cfd1",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2831,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "OK thx for the feedback, I was modelling the approach on the EGL_DIRECT_COMPOSITION_ANGLE case above.  How / where would I indicate that EGL_WINDOWS_UI_COMPOSITION_ANGLE is available, and how would the user query for that (appols for my ignorance here)?",
      "parentUuid": "6a92dd34_42c661e4",
      "range": {
        "startLine": 2822,
        "startChar": 8,
        "endLine": 2831,
        "endChar": 18
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9279b03e_f57e837f",
        "filename": "src/libANGLE/queryutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2831,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-10-01T17:30:08Z",
      "side": 1,
      "message": "Yes, this is a bit different from the direct composition query.  That one is to ask if the window was created with the direct composition attribute.\n\nThe user would determine if they can create a surface from a sprite visual by simply checking if the extension string is present in the display extension strings: eglQueryString(display, EGL_EXTENSIONS).  The changes you made in Caps.h/cpp ensure that the string will be in the list if the extension is enabled.\n\nWhat we missed here was updating Renderer11::generateDisplayExtensions to mark this extension as available under these circumstances.",
      "parentUuid": "7688b9bb_ccb3cfd1",
      "range": {
        "startLine": 2822,
        "startChar": 8,
        "endLine": 2831,
        "endChar": 18
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cafb87_4f04992f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1262,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "Instead of using an attrib, could we just check if it is a win32 window or compositor window and create the correct NativeWindow class?",
      "range": {
        "startLine": 1262,
        "startChar": 4,
        "endLine": 1262,
        "endChar": 93
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8d5a91c_51709a3e",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1262,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "Can do.",
      "parentUuid": "44cafb87_4f04992f",
      "range": {
        "startLine": 1262,
        "startChar": 4,
        "endLine": 1262,
        "endChar": 93
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84cf369d_b6ec7f83",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "I think you could move this whole class into CompositorNativeWindow11.cpp with a forward declaration in CompositorNativeWindow11.h",
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d20186c1_098204bc",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "Sounds good.",
      "parentUuid": "84cf369d_b6ec7f83",
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e96ed2ce_3233f77a",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "What does Ro stand for?",
      "range": {
        "startLine": 7,
        "startChar": 3,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "438287b4_bf5d2135",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "RuntimeObject as used in RoActivateInstance",
      "parentUuid": "e96ed2ce_3233f77a",
      "range": {
        "startLine": 7,
        "startChar": 3,
        "endLine": 7,
        "endChar": 11
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ec964f9_ad94d21a",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "This could be factored better:\n\n    mFpWindowsCreateStringReference \u003d reinterpret_cast\u003c_WindowsCreateStringReference *\u003e(\n        GetProcAddress(mComBaseModule, \"WindowsCreateStringReference\"));\n    if (mFpWindowsCreateStringReference \u003d\u003d nullptr)\n    {\n        return\n    }\n\n    // etc..\n\nOr you could add a helper to do the assignments in one line each:\n\n    template \u003ctypename T\u003e\n    bool AssignProcAddress(HMODULE comBaseModule, const char* name, T* outProc)\n    {\n        *outProc \u003d reinterpret_cast\u003cT\u003e(GetProcAddress(comBaseModule, name));\n        return *outProc !\u003d nullptr;\n    }",
      "range": {
        "startLine": 31,
        "startChar": 8,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f892e713_d77bf74a",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "Agree this is much nicer, will go ahead and do this.",
      "parentUuid": "7ec964f9_ad94d21a",
      "range": {
        "startLine": 31,
        "startChar": 8,
        "endLine": 88,
        "endChar": 9
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bba761fe_1eddbcd9",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "I believe identifiers starting with underscores followed by capital letters are reserved by the language.",
      "range": {
        "startLine": 213,
        "startChar": 10,
        "endLine": 213,
        "endChar": 12
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab900d0_565b1e10",
        "filename": "src/libANGLE/renderer/d3d/d3d11/converged/RoHelper.h",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "Indeed, nice catch.  I will change to a trailing underscore which I believe is legal.",
      "parentUuid": "bba761fe_1eddbcd9",
      "range": {
        "startLine": 213,
        "startChar": 10,
        "endLine": 213,
        "endChar": 12
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d47237a5_7c9047cc",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1151,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2018-09-24T20:04:22Z",
      "side": 1,
      "message": "May not be needed either.",
      "range": {
        "startLine": 1146,
        "startChar": 0,
        "endLine": 1151,
        "endChar": 22
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d472902_eac2d779",
        "filename": "src/libANGLE/validationEGL.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1151,
      "author": {
        "id": 1304759
      },
      "writtenOn": "2018-10-01T15:35:20Z",
      "side": 1,
      "message": "I was modelling on the direct_composition case above.  I can remove this check.",
      "parentUuid": "d47237a5_7c9047cc",
      "range": {
        "startLine": 1146,
        "startChar": 0,
        "endLine": 1151,
        "endChar": 22
      },
      "revId": "e447e46add86cf6708851d5e8e5c382ea90a59da",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}