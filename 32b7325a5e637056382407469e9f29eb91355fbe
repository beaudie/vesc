{
  "comments": [
    {
      "key": {
        "uuid": "ecd21471_880dd6be",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-21T03:04:14Z",
      "side": 1,
      "message": "Copying requires a source and a destination, and this name doesn\u0027t indicate which side the image will be on.   Based on your description, the image will always be the source; can we call it getImageForRead(), so it can be the corollary to getImageForWrite()?",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee97a69f_7cdf362a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-21T04:12:58Z",
      "side": 1,
      "message": "See other comment on the same subject.",
      "parentUuid": "ecd21471_880dd6be",
      "range": {
        "startLine": 19,
        "startChar": 2,
        "endLine": 19,
        "endChar": 17
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37817c4d_fd5599c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-20T03:24:09Z",
      "side": 1,
      "message": "See [1] for some context if the change description is not clear:\n\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2304170/9/src/libANGLE/renderer/vulkan/RenderTargetVk.cpp",
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee57f312_a0e5663d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1046,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-21T03:04:14Z",
      "side": 1,
      "message": "I like \u0027readImageView\u0027 more since it indicates this is the source image.",
      "range": {
        "startLine": 1046,
        "startChar": 33,
        "endLine": 1046,
        "endChar": 46
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ef9fe6b_237b6974",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1046,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-21T04:12:58Z",
      "side": 1,
      "message": "This terminology is used throughout the backend in a couple of places. `copy` views are those that don\u0027t have the application swizzle applied on them (only the format swizzle (for emulation)). `read` views on the other hand do. Blit doesn\u0027t take application swizzle into account, hence it needs a copy view.\n\nGranted, the terminology came from these views being used in texture copy operations so it\u0027s a little out of context here. I wouldn\u0027t mind a rename, but IMO should be a different CL to make a consistent change all across the board.",
      "parentUuid": "ee57f312_a0e5663d",
      "range": {
        "startLine": 1046,
        "startChar": 33,
        "endLine": 1046,
        "endChar": 46
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "afa0a9da_50a06204",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-07-21T03:04:14Z",
      "side": 1,
      "message": "Why not getImageForRenderPass() for these since this is inside clearWithRenderPassOp()?",
      "range": {
        "startLine": 1768,
        "startChar": 22,
        "endLine": 1768,
        "endChar": 38
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69d9fc1d_2e423888",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1768,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-07-21T04:12:58Z",
      "side": 1,
      "message": "This will become more apparent with the next change that enables resolve attachments. We are not starting a render pass here, so we don\u0027t use getImageForRenderPass().\n\ngetImageForWrite() will return the image that \"owns\" the data. When resolve attachments are added, that would be the resolve image not the one used as the color attachment of the render pass!",
      "parentUuid": "afa0a9da_50a06204",
      "range": {
        "startLine": 1768,
        "startChar": 22,
        "endLine": 1768,
        "endChar": 38
      },
      "revId": "32b7325a5e637056382407469e9f29eb91355fbe",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}