{
  "comments": [
    {
      "key": {
        "uuid": "4cfdf22d_5b3d0a01",
        "filename": "src/compiler/translator/StaticType.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-12-20T18:25:00Z",
      "side": 1,
      "message": "Could enforce with an assert that arraySizes[0] \u003c 10 and numArraySizes \u003d\u003d 1",
      "range": {
        "startLine": 59,
        "startChar": 39,
        "endLine": 59,
        "endChar": 48
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0efe63af_f9e36c89",
        "filename": "src/compiler/translator/StaticType.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-20T21:20:01Z",
      "side": 1,
      "message": "They are asserted below in comment marked with Reference.\n\nI can\u0027t ASSERT here, as that makes the function not constexpr. The caller static_asserts.",
      "parentUuid": "4cfdf22d_5b3d0a01",
      "range": {
        "startLine": 59,
        "startChar": 39,
        "endLine": 59,
        "endChar": 48
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d79629_3a1b1356",
        "filename": "src/compiler/translator/StaticType.h",
        "patchSetId": 4
      },
      "lineNbr": 188,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-20T21:20:01Z",
      "side": 1,
      "message": "Reference*",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 188,
        "endChar": 100
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27cfb755_f9474934",
        "filename": "src/compiler/translator/StaticType.h",
        "patchSetId": 4
      },
      "lineNbr": 188,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-12-20T22:51:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "43d79629_3a1b1356",
      "range": {
        "startLine": 187,
        "startChar": 0,
        "endLine": 188,
        "endChar": 100
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a66ece2c_a70ec7cc",
        "filename": "src/compiler/translator/SymbolTable_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1330,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-12-20T18:25:00Z",
      "side": 1,
      "message": "This doesn\u0027t look right.  What does the \"2\" represent here?  Is there any precedent in here for putting the size before the type?  Could this instead be IntArray4 or something similar that keeps the type first?",
      "range": {
        "startLine": 1330,
        "startChar": 82,
        "endLine": 1330,
        "endChar": 88
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73af46c6_f000f849",
        "filename": "src/compiler/translator/SymbolTable_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1330,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-20T21:20:01Z",
      "side": 1,
      "message": "The function takes vec2[4]. Int2 means the elements are ivec2. I added 4x before as a way to say there are 4x ivec2s (i.e. an array of size 4). (Can\u0027t put after FYI, as it gets mistaken with matrix types).\n\nIt could be Int2Array4 if that helps. I figured this would be clear, like when you say \"we need 4x screws and 2x nuts\", we need 4x Int2s here :D\n\nDo you still want the name changed?",
      "parentUuid": "a66ece2c_a70ec7cc",
      "range": {
        "startLine": 1330,
        "startChar": 82,
        "endLine": 1330,
        "endChar": 88
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb317c5b_3544aa27",
        "filename": "src/compiler/translator/SymbolTable_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1330,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-12-20T22:51:49Z",
      "side": 1,
      "message": "Ah, right, I forgot there was x and y offset in the array, hence the 2.\n\nI\u0027m torn on the name.  You\u0027re right that it is clear as 4xInt2.  But when I\u0027m scanning through code like this, my eyes expect a consistent pattern (type then size).  I\u0027d be interested to hear any other opinions though, not going to make you go through all the work of changing it if the current name is preferred.",
      "parentUuid": "73af46c6_f000f849",
      "range": {
        "startLine": 1330,
        "startChar": 82,
        "endLine": 1330,
        "endChar": 88
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90ba8ea2_6ea93c2c",
        "filename": "src/compiler/translator/SymbolTable_autogen.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1330,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-12-21T03:31:12Z",
      "side": 1,
      "message": "It\u0027s autogenerated, so no big deal.\n\nLet\u0027s leave it to Jiajia to break the tie: 4xInt2 or Int2Array4?",
      "parentUuid": "eb317c5b_3544aa27",
      "range": {
        "startLine": 1330,
        "startChar": 82,
        "endLine": 1330,
        "endChar": 88
      },
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc2875db_3f3c1229",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 4
      },
      "lineNbr": 689,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-12-20T18:25:00Z",
      "side": 1,
      "message": "Excellent.",
      "revId": "a7e865f0d8df45bd69f9ebeb4112c2078f2fbd85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}