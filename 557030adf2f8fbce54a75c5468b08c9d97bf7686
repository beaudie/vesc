{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e55ca98d_0555abfa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-25T20:05:13Z",
      "side": 1,
      "message": "PTAL",
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4183ef52_56dba160",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-25T21:19:33Z",
      "side": 1,
      "message": "Excellent work, LGTM.",
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "870efb91_ef45321d",
        "filename": "src/libANGLE/Caps.h",
        "patchSetId": 4
      },
      "lineNbr": 723,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-26T02:42:06Z",
      "side": 1,
      "message": "nit: relaxedVertexAttributeTypeANGLE",
      "range": {
        "startLine": 723,
        "startChar": 34,
        "endLine": 723,
        "endChar": 35
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8097d65_3b02da51",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-25T21:51:19Z",
      "side": 1,
      "message": "this should have taken care of your concerns where we override attribute\u0027s format with the programAttrib\u0027s type, no jamie?",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "512bc904_8c0da17f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-25T22:11:51Z",
      "side": 1,
      "message": "looks like a bug to me. it\u0027s changing the width of the type. thanks for pointing that out.",
      "parentUuid": "e8097d65_3b02da51",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ff0be71_0acfd9e2",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-03-25T22:14:43Z",
      "side": 1,
      "message": "we could remove float from \"kMismatchedComponentTypeMap\" and see if any bots complain else land",
      "parentUuid": "512bc904_8c0da17f",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c0008a4_97848608",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1505517
      },
      "writtenOn": "2021-04-02T18:22:56Z",
      "side": 1,
      "message": "Hey Jamie, I don\u0027t think it\u0027s a bug \n\nIn the ESSL 3.0 spec, on page 39, it prohibits using booleans as a vertex attribute input.\n```\nIt is a compile-time error to declare a vertex shader input with, or that contains, any of the following types(see  4.1.10 “Definitions of Terms”):\n•A boolean type\n```\n\nOn page 19 of the ESSL spec it states:\n```\nThe following are the keywords reserved for future use. Using them will result in an error:\n... (ommitted list of irrelevant keywords)\nlong    short    double    half    fixed  \n```\n\nOn page 22 of the ESSL spec it has a table listing the supported basic data types. If we look at it, apart from bool which is prohibited due to the first quote, there are only data types of type int, unsigned int, float, and data types that consist of multiple components of the previously mentioned types. All 3 of these types that are allowed as vertex attributes and their vec/mat derivatives have a bit width of 32, which matches up with the current bit widths in kMismatchedComponentTypeMap. This means that if we\u0027re always going to use 4 channels, the only allowed vkFormats are the ones listed in kMismatchedComponentTypeMap. If we use any other, we\u0027ll end up triggering a vulkan validation layer complaint about mismatched formats\n\nNow, glVertexAttrib(i)Pointer can take in GL_BYTE and GL_SHORT data, but this isn\u0027t an issue either as the way these are interpreted are defined by the GLES spec. It\u0027ll either be converted to a float, unsigned int, or int.\nIn the GLES 3.0 spec on page 25 there\u0027s a table captioned with the following:\n```\nTable 2.4: Vertex array sizes (values per vertex) and data types. The “Integer Han-dling” column indicates how fixed-point data types are handled:  “integer” means that they remain as integer values, and “flag” means that they are either converted to floating-point directly, or converted by normalizing to[0,1](for unsigned types)or[−1,1](for signed types), ...\n```\n\nWithin angle, we do convert GL_UNSIGNED_BYTE into a gl::ComponentType of Float. If we pass in GL_UNSIGNED_BYTE to glVertexAttribIPointer, and we have an ivec in the glsl shader as the vertex attribute, the vkFormat will be set to match the program\u0027s(VK_FORMAT_R32G32B32A32_SINT). \n\nAs for data correctness - if the app specifies a GL_UNSIGNED_BYTE in glVertexAttribIPointer and they specified ivec in the shader, we\u0027re going to read in 4 bytes per component since we set the vkFormat to VK_FORMAT_R32G32B32A32_SINT. This is enough to fill out each component. I believe this to be the behavior expected by glVertexAttribPointer when used with bytes or any specifier smaller than the shader\u0027s (it\u0027s also how it works on the native gles driver - it packs in 4 bytes into a 32 bit format). \n\n\nSpecs referenced:\nhttps://www.khronos.org/registry/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf - referenced as ESSL\nhttps://www.khronos.org/registry/OpenGL/specs/es/3.0/es_spec_3.0.pdf - referenced as GLES\n\nThank you!",
      "parentUuid": "1ff0be71_0acfd9e2",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd345620_2c551df3",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-02T18:44:10Z",
      "side": 1,
      "message": "Hey Kevin,\n\nOn holiday. Please confirm with a debugger that a simple \"GL_UNSIGNED_BYTE in glVertexAttribIPointer\" produces VK_FORMAT_R32G32B32A32_SINT in the pipeline. This is not my expectation.",
      "parentUuid": "2c0008a4_97848608",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84f9bea5_8c11be61",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-04-02T18:45:35Z",
      "side": 1,
      "message": "Sorry, UINT. I\u0027d have to go digging in the spec to find the wording to prove this is going to produce incorrect results. If you could help confirm that it would help.",
      "parentUuid": "bd345620_2c551df3",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf7bf47f_c5e4258d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1850,
      "author": {
        "id": 1505517
      },
      "writtenOn": "2021-04-02T20:11:39Z",
      "side": 1,
      "message": "Hey Jamie,\nI verified and recorded it producing VK_FORMAT_R32G32B32A32_SINT here(no audio on the video due to other household member\u0027s meetings):\nyoutube.com/watch?v\u003d8EG3ck_u3uk\n\nWhat result do you expect when we do glVertexAttribIPointer with GL_UNSIGNED_BYTE and an ivec4?\nCurrently it seems to combine the bytes into ints like other drivers, but that can probably be changed(although I think it\u0027s fine as is) \n\nI\u0027ll go check and see if I can find anything disagreeing with the evaluation we\u0027re getting from the driver in the vk spec, I think it\u0027s just a descriptor though. Like we have a buffer of GLubytes [0x80,0x00,0x00,0x00], and we can say we have vkformat of bit width 32, and it tries to read from the buffer as if we had a bit with of 32 so it just takes our bytes and makes an int of it\n\nTY again :)",
      "parentUuid": "84f9bea5_8c11be61",
      "range": {
        "startLine": 1850,
        "startChar": 12,
        "endLine": 1850,
        "endChar": 70
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b62df61_b9c2d850",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1854,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-03-25T21:19:33Z",
      "side": 1,
      "message": "I think we\u0027re still using the wrong attribute type here - however we can defer action until the VVL produces an error on a mismatch. Maybe leave a small note that this could trigger a VVL error?",
      "range": {
        "startLine": 1852,
        "startChar": 13,
        "endLine": 1854,
        "endChar": 55
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2b97a9d_34f41d09",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1854,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-26T02:42:06Z",
      "side": 1,
      "message": "Shouldn\u0027t the previous `attribSize !\u003d shaderVarSize` check also be included here?",
      "parentUuid": "4b62df61_b9c2d850",
      "range": {
        "startLine": 1852,
        "startChar": 13,
        "endLine": 1854,
        "endChar": 55
      },
      "revId": "557030adf2f8fbce54a75c5468b08c9d97bf7686",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}