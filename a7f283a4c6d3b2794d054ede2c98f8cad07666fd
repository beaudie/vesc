{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e025eb9_ad4a0d75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-13T00:26:33Z",
      "side": 1,
      "message": "I   39.643s run_tests_on_device(localhost:2222)  [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 2 tests from 1 test suite.\nI   39.643s run_tests_on_device(localhost:2222)  [----------] Global test environment set-up.\nI   39.643s run_tests_on_device(localhost:2222)  [----------] 2 tests from EGLSingleBufferTest\nI   39.644s run_tests_on_device(localhost:2222)  [ RUN      ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES2_Vulkan_NoFixture\nI   39.644s run_tests_on_device(localhost:2222)  ../../src/tests/egl_tests/EGLSurfaceTest.cpp:1658: Failure\nI   39.644s run_tests_on_device(localhost:2222)  Expected equality of these values:\nI   39.644s run_tests_on_device(localhost:2222)    GLColor::green\nI   39.644s run_tests_on_device(localhost:2222)      Which is: Green\nI   39.644s run_tests_on_device(localhost:2222)    angle::ReadColor(1, 1)\nI   39.644s run_tests_on_device(localhost:2222)      Which is: Black\nI   39.644s run_tests_on_device(localhost:2222)  [  FAILED  ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES2_Vulkan_NoFixture, where GetParam() \u003d ES2_Vulkan_NoFixture (993 ms)\nI   39.644s run_tests_on_device(localhost:2222)  [ RUN      ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES3_Vulkan_NoFixture\nI   39.644s run_tests_on_device(localhost:2222)  ../../src/tests/egl_tests/EGLSurfaceTest.cpp:1658: Failure\nI   39.644s run_tests_on_device(localhost:2222)  Expected equality of these values:\nI   39.644s run_tests_on_device(localhost:2222)    GLColor::green\nI   39.644s run_tests_on_device(localhost:2222)      Which is: Green\nI   39.644s run_tests_on_device(localhost:2222)    angle::ReadColor(1, 1)\nI   39.644s run_tests_on_device(localhost:2222)      Which is: Black\nI   39.644s run_tests_on_device(localhost:2222)  [  FAILED  ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES3_Vulkan_NoFixture, where GetParam() \u003d ES3_Vulkan_NoFixture (899 ms)\nI   39.644s run_tests_on_device(localhost:2222)  [----------] 2 tests from EGLSingleBufferTest (1900 ms total)\nI   39.644s run_tests_on_device(localhost:2222)\nI   39.644s run_tests_on_device(localhost:2222)  [----------] Global test environment tear-down\nI   39.644s run_tests_on_device(localhost:2222)  [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 2 tests from 1 test suite ran. (1909 ms total)\nI   39.644s run_tests_on_device(localhost:2222)  [  PASSED  ] 0 tests.\nI   39.644s run_tests_on_device(localhost:2222)  [  FAILED  ] 2 tests, listed below:\nI   39.644s run_tests_on_device(localhost:2222)  [  FAILED  ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES2_Vulkan_NoFixture, where GetParam() \u003d ES2_Vulkan_NoFixture\nI   39.644s run_tests_on_device(localhost:2222)  [  FAILED  ] EGLSingleBufferTest.OnSetSurfaceAttrib/ES3_Vulkan_NoFixture, where GetParam() \u003d ES3_Vulkan_NoFixture\nI   39.644s run_tests_on_device(localhost:2222)\nI   39.644s run_tests_on_device(localhost:2222)   2 FAILED TESTS",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fce8a8a_0941711f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-13T00:30:46Z",
      "side": 1,
      "message": "Real apps working with Virgl driver also shows complete black screen under Angle (there\u0027re only flashed tile updates for the lines drawn while actively drawing, but will be swapped with a black buffer immediately after).\n\nHowever, the lines drawn were still there on the real buffer. I kinda feel ANGLE is presenting the wrong buffer to the display after presenting the correct one. Systrace also shows a redundant swap.",
      "parentUuid": "8e025eb9_ad4a0d75",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "846480b8_5bdc57aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-13T00:42:11Z",
      "side": 1,
      "message": "There\u0027s at least one bug with ANGLE. The app can do:\n1. eglSurfaceAttrib to set single buffer\n2. eglSurfaceAttrib to set auto refresh\n3. the next eglSwapBuffers will switch to use single buffer per requested\n\nIt seems angle (re)creates the swapchain at (3) but not (1), and the auto_refresh mode set on the native window gets lost.",
      "parentUuid": "8fce8a8a_0941711f",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c850907_bcacaccc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-13T01:12:22Z",
      "side": 1,
      "message": "After taking a closer look, the swapchain was recreated at the first `glDrawElements` which renders to the surface fbo, and that\u0027s currently in between (2) and (3).\n\nThen if angle can kick a swapchain recreation for (1), and records the render commands to the new single buffer backed swapchain image, the issue should get fixed. Otherwise, the app is left in the DEMOND_REFRESH mode if toggling to single_buffer.",
      "parentUuid": "846480b8_5bdc57aa",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "558674ea_3147dc22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-13T19:13:05Z",
      "side": 1,
      "message": "The extension expects that the Surface/Swapchain will change buffers/images/modes when eglSwapbuffers is called. That is when present mode is checked and if different, causes re-create Swapchain.",
      "parentUuid": "7c850907_bcacaccc",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84fbd215_036a28b0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2022-04-13T19:13:05Z",
      "side": 1,
      "message": "Comment. On eglSwapbuffers.\nI added eglSwapbuffers to test just after eglSurfaceAttrib - to cause mode change.. After that, glFlush should cause swapbuffer-on-flush and update the display.",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d68ab700_5fad01a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 1509302
      },
      "writtenOn": "2022-04-13T19:31:58Z",
      "side": 1,
      "message": "Indeed that\u0027s the extension\u0027s expected behavior, and much easier to follow for the native gl drivers. But angle has to workaround, and it already does to some extent.\n\nConsidering this flow (with KHR_mutable_render_buffer):\n1. app picks back_buffer and normally do swaps\n2. app sets single buffer\n3. app sets auto refresh\n4. app draws on wsi image\n5. app calls swap\n\nFor native driver, the mode switch happens at swap. For the current swap in (5), app still renders to the back buffer and the swap will queueBuffer for the back buffer to replace what\u0027s on the display.\n\nFor angle\u0027s currently behavior, it already recreates the swapchain at (4). So what the app renders for the current frame has already been redirected to the shared buffer. Upon swap, the shared buffer will be queued to display for presentation. So the behavior is correct mostly. (except that the out-fence on the shared buffer will be ignored by the display and is possbile to get latched for vsync before rendering is done)\n\nFor what I\u0027m proposing, moving swapchain recreation to (1) won\u0027t make any difference of above, but will fix the bug I mentioned.",
      "parentUuid": "558674ea_3147dc22",
      "revId": "a7f283a4c6d3b2794d054ede2c98f8cad07666fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}