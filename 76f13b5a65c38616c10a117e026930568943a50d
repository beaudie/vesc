{
  "comments": [
    {
      "key": {
        "uuid": "d1359735_a9441090",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 18,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "It would have been nice to make each of these a separate CL to make each review more managable.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c51e2412_0c1f5d13",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 18,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "I will try that from the next cl. It\u0027s just that I set out to do something, then something else comes up and I need to include it.",
      "parentUuid": "d1359735_a9441090",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "156ee4e8_4b755e1b",
        "filename": "samples/capture_replay/CaptureReplay.cpp",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Why was the file renamed?   It looks a little odd to include testing files.",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "127915ec_1781bbb2",
        "filename": "samples/capture_replay/CaptureReplay.cpp",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T18:33:41Z",
      "side": 1,
      "message": "This is a test. The file name probably confused you.",
      "parentUuid": "156ee4e8_4b755e1b",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "117fbefe_1c6b70c4",
        "filename": "samples/capture_replay/CaptureReplay.cpp",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "127915ec_1781bbb2",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3d218db_8e85054e",
        "filename": "src/libANGLE/BinaryStream.h",
        "patchSetId": 18
      },
      "lineNbr": 239,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "nit: can call this just getData",
      "range": {
        "startLine": 239,
        "startChar": 32,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa5f7f4b_74b8efb1",
        "filename": "src/libANGLE/BinaryStream.h",
        "patchSetId": 18
      },
      "lineNbr": 239,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3d218db_8e85054e",
      "range": {
        "startLine": 239,
        "startChar": 32,
        "endLine": 239,
        "endChar": 45
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bafe2d7a_85f17220",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 936,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Why is aligning the start of the data necessary?   It looks like it\u0027s just being memcpy()\u0027ed later, which should handle any alignment issues on its own without any problems.",
      "range": {
        "startLine": 936,
        "startChar": 34,
        "endLine": 936,
        "endChar": 83
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0c86495_89d7fb38",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 18
      },
      "lineNbr": 936,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "I think maybe memcpy doesn\u0027t handle 16-byte alignment, only 4 and 8? I\u0027m not sure however, I\u0027m just following the example here https://source.chromium.org/chromium/chromium/src/+/master:third_party/angle/src/libANGLE/FrameCapture.cpp;l\u003d419-421?q\u003dFrameCapture\u0026ss\u003dchromium\u0026originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "bafe2d7a_85f17220",
      "range": {
        "startLine": 936,
        "startChar": 34,
        "endLine": 936,
        "endChar": 83
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff05f0f5_f4d2cf2d",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 18,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "This is actually called \"stringification\":\n\nhttps://gcc.gnu.org/onlinedocs/gcc-4.8.5/cpp/Stringification.html\n\nThese macros already exist, so you can use those instead:\n\n    common/angleutils.h\n    329:#ifndef ANGLE_STRINGIFY\n    330:#    define ANGLE_STRINGIFY(x) #x\n    334:#ifndef ANGLE_MACRO_STRINGIFY\n    335:#    define ANGLE_MACRO_STRINGIFY(x) ANGLE_STRINGIFY(x)",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 49
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4fdb921_0e4000d7",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 18,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ff05f0f5_f4d2cf2d",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 49
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b51161dd_9660bc6f",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "I\u0027d recommend everywhere you can generate an error you return angle::Result and use ANGLE_TRY, then in FrameCapture.cpp / test you handle the Stop case as an implementation error.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 5
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a04ecaa_d35eae25",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b51161dd_9660bc6f",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 40,
        "endChar": 5
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fab593bc_f9a1533e",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 44,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "nit: To help readability,these should be a constant that explains what this magic number represents:\n\n    size_t kSizeOfGlFramebuffer \u003d 744;\n    ANGLE_STATIC_ASSERT_SIZE(gl::Framebuffer, kSizeOfGlFramebuffer)",
      "range": {
        "startLine": 44,
        "startChar": 46,
        "endLine": 44,
        "endChar": 49
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7a82f5a_c4231845",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 44,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fab593bc_f9a1533e",
      "range": {
        "startLine": 44,
        "startChar": 46,
        "endLine": 44,
        "endChar": 49
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5d99e24_c836e7a1",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 44,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fab593bc_f9a1533e",
      "range": {
        "startLine": 44,
        "startChar": 46,
        "endLine": 44,
        "endChar": 49
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23c8d0c1_0c7d93ed",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 77,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "nit: prefer c++-style casts.\n\nhttps://google.github.io/styleguide/cppguide.html#Casting",
      "range": {
        "startLine": 77,
        "startChar": 75,
        "endLine": 77,
        "endChar": 89
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af8b538d_39ff6e0f",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 77,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23c8d0c1_0c7d93ed",
      "range": {
        "startLine": 77,
        "startChar": 75,
        "endLine": 77,
        "endChar": 89
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf3ed076_4b661879",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "We prefer not to use non-const refs, so this should be a pointer.\n\nGoing further, does this need to be passed in?   Can you give ReadPixelsFromAttachment the BinaryOutputStream (and rename it to SerializePixelsFromAttachment) and let it do whatever it takes to serialize the data?",
      "range": {
        "startLine": 87,
        "startChar": 36,
        "endLine": 87,
        "endChar": 64
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f8e2843_3ace3422",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 87,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "I don\u0027t think that\u0027s possible. The readPixels method needs a pointer to an allocated block. I would need to call binaryOutputStream.writeBytes(sizeOfAllocatedBlock)then get the data pointer and subtract from it the size of the allocation block just to get the pointer to the start of the allocation block. So we still need either vector or scratch buffer. Jamie prefers scratch buffer because it will save us from unnecessary allocations, and there might be many since most framebuffer attachments will always have the same size.",
      "parentUuid": "bf3ed076_4b661879",
      "range": {
        "startLine": 87,
        "startChar": 36,
        "endLine": 87,
        "endChar": 64
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51abe95e_464a6674",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "can this be a const \u0026?",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 90
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a9afcdb_2c44efb9",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 89,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51abe95e_464a6674",
      "range": {
        "startLine": 89,
        "startChar": 69,
        "endLine": 89,
        "endChar": 90
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0237f349_5863babc",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 93,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "nit: I think this comment can be removed, since all of these functions are serializing something.",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f885675d_4a15a425",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 93,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Oh, I put it there because target member variable, unlike other member variables, has its own member variables that need to be serialized.",
      "parentUuid": "0237f349_5863babc",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33345f0f_83bec271",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 105,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "can you get this from the attachment \"binding\"?",
      "range": {
        "startLine": 105,
        "startChar": 24,
        "endLine": 105,
        "endChar": 28
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea41b1dc_5936e9ce",
        "filename": "src/libANGLE/frame_capture_utils.cpp",
        "patchSetId": 18
      },
      "lineNbr": 105,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33345f0f_83bec271",
      "range": {
        "startLine": 105,
        "startChar": 24,
        "endLine": 105,
        "endChar": 28
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "362441c6_baa8f57a",
        "filename": "src/libANGLE/frame_capture_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 49,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Are these really \"utility\" functions that we would expect to be used generally in many places in the future?   They seem to have very specific use-cases, so it might make more sense to rename these files to \"frame_capture_serialize\" (or something similar that\u0027s more descriptive of these functions).",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 49,
        "endChar": 88
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f959981c_4a0d39ed",
        "filename": "src/libANGLE/frame_capture_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 49,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "I think Cody mentioned to me once that it might be useful for mid-frame capture? I dont know how that works though. Anyway, I think Jamie prefers this name to my last name which is SerializeContext.h",
      "parentUuid": "362441c6_baa8f57a",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 49,
        "endChar": 88
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77cc9b2e_05749250",
        "filename": "src/libANGLE/frame_capture_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "can this be a private function in the cpp?",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 55,
        "endChar": 53
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38af620e_a9590fca",
        "filename": "src/libANGLE/frame_capture_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77cc9b2e_05749250",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 55,
        "endChar": 53
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dec596c_98a1fc6f",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 169,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Should be:\n\n    os.path.join(path, f)",
      "range": {
        "startLine": 169,
        "startChar": 28,
        "endLine": 169,
        "endChar": 42
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "693aaee0_5aac2c60",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 169,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dec596c_98a1fc6f",
      "range": {
        "startLine": 169,
        "startChar": 28,
        "endLine": 169,
        "endChar": 42
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92f0e24d_fc4f66ee",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Can you add a comment explaining which of the \"trace_files\" files can be missing if only 4 out of 5 are present?",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 175,
        "endChar": 53
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7482e226_a3ba83dc",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92f0e24d_fc4f66ee",
      "range": {
        "startLine": 173,
        "startChar": 0,
        "endLine": 175,
        "endChar": 53
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf44cd49_fbbdb0a8",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 221,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-06-29T18:29:57Z",
      "side": 1,
      "message": "Same as above, should be os.path.join().   Might be worth doing a fix-it CL to update each of these.",
      "range": {
        "startLine": 221,
        "startChar": 30,
        "endLine": 221,
        "endChar": 57
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f63e75d_f578a18b",
        "filename": "src/tests/capture_replay_tests.py",
        "patchSetId": 18
      },
      "lineNbr": 221,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:56:57Z",
      "side": 1,
      "message": "Done. I will get fix the two places you point out here and fix the rest on a separate CL.",
      "parentUuid": "cf44cd49_fbbdb0a8",
      "range": {
        "startLine": 221,
        "startChar": 30,
        "endLine": 221,
        "endChar": 57
      },
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8869ad2b_76cfbc38",
        "filename": "util/frame_capture_test_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-29T16:00:50Z",
      "side": 1,
      "message": "can you make this rename a separate CL?",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8df560_14e351d1",
        "filename": "util/frame_capture_test_utils.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1423953
      },
      "writtenOn": "2020-06-29T19:03:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8869ad2b_76cfbc38",
      "revId": "76f13b5a65c38616c10a117e026930568943a50d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}