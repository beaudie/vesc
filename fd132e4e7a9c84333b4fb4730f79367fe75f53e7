{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "21580f6b_ca92b331",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-19T03:11:28Z",
      "side": 0,
      "message": "The reason this works for FBOs is that when the format is emulated, we issue a one-time clear and make sure we never touch alpha afterwards. See ImageHelper::stageClearIfEmulatedFormat.\n\nWe should do something similar for the swapchain images.",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f37ed8dd_0d6bac90",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-19T16:10:25Z",
      "side": 0,
      "message": "Thank you Shabi!",
      "parentUuid": "21580f6b_ca92b331",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fff07a53_e067df98",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-19T23:24:42Z",
      "side": 0,
      "message": "ImageHelper::stageClearIfEmulatedFormat() is being called for the MSAA and for each swapchain image, but only when the swapchain is created.  The game is rendering to the MSAA buffer early, and to the swapchain images later.  The render passes are clearing those buffers, with the colorWriteMask set to RGB (not alpha).  I\u0027m guessing that this is causing the alpha channel to be cleared to 0.  Hard to tell since debugging on Android is so poor.\n\nI found that by calling ImageHelper::stageClearIfEmulatedFormat() with each ANI eliminates the problem except for one brief moment when the game transitions from MSAA to non-MSAA.  It looks like there\u0027s a clear of the swapchain image to alpha\u003d0 just before the swapchain recreation.  This appears to leave the swapchain image in place for a brief moment.",
      "parentUuid": "f37ed8dd_0d6bac90",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d235971_50314ee5",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-20T02:46:53Z",
      "side": 0,
      "message": "First off, we shouldn\u0027t need to clear the image on every ANI. It should be enough to stage it once per SwapchainImage::image. There may be some FramebufferVk dirty bit trickery necessary to make sure the clears are staged (I\u0027m not sure, but I\u0027m guessing after the first FramebufferVk::syncState, the next ANI doesn\u0027t trigger any dirty bits that would allow deferred clears to be extracted from the new swapchain image).\n\nAlso, there should be one stageClearIfEmulatedFormat called for the the MSAA image (but maybe that\u0027s automatically done? Please check).\n\n\u003e The render passes are clearing those buffers, with the colorWriteMask set to RGB (not alpha)\n\nI don\u0027t quite understand. The clear should end up as loadOp\u003dCLEAR, what\u0027s the colorWriteMask about?",
      "parentUuid": "fff07a53_e067df98",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb478dad_d89327cb",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-20T04:54:52Z",
      "side": 0,
      "message": "Shabi, the current ANGLE source seems to be doing what you suggest, but the result is wrong.  Something is clearing the alpha component after the staged clear.\n\nWhat could be causing the alpha channel to change to 0x00 after the staged clear set it to 0xFF?\n\n\u003e First off, we shouldn\u0027t need to clear the image on every ANI. It should be enough to stage it once per SwapchainImage::image.\n\nWith the current source, a vkCmdClearColorImage() is queued and executed the first time each is used.  At least that\u0027s what logcat-debugging is showing.\n\n\u003e Also, there should be one stageClearIfEmulatedFormat called for the the MSAA image (but maybe that\u0027s automatically done? Please check).\n\nWith the current source, a vkCmdClearColorImage() is queued and executed the first time the MSAA image is used.\n\nIn the steady-state (e.g. 4th-nth frames), the swapchain\u0027s image(s) are rendered to every frame.  The render passes have loadOp\u003dClear, and (since those images are emulated) ANGLE removes alpha from the colorWriteMask.  AGI shows the cleared/rendered-to/presented images have an alpha value of 0x00.  That also matches how SurfaceFlinger is treating them (as alpha\u003d0x00).\n\n\u003e \u003e The render passes are clearing those buffers, with the colorWriteMask set to RGB (not alpha)\n\n\u003e I don\u0027t quite understand. The clear should end up as loadOp\u003dCLEAR, what\u0027s the colorWriteMask about?\n\nIt was wrong speculation on my part (that the colorWriteMask is somehow messing with the loadOp\u003dCLEAR).  I also speculated that the MSAA resolve was somehow causing this, but the same alpha\u003d0x00 behavior occurs for MSAA and non-MSAA swapchains.\n\nAgain, what could be causing the alpha channel to change to 0x00 after the staged clear set it to 0xFF?",
      "parentUuid": "4d235971_50314ee5",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9376a336_0770131f",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-20T05:35:24Z",
      "side": 0,
      "message": "What\u0027s the clear color used for the loadOp\u003dCLEAR (the values in VkRenderPassBeginInfo::pClearValues)? Perhaps the alpha channel there is wrong.\n\nFramebufferVk::mEmulatedAlphaAttachmentMask is usually responsible for all this. See for example how FramebufferVk::mergeClearsWithDeferredClears is using this mask through getCorrectedColorClearValue() to set alpha\u003d1. An easy check would be to make sure mEmulatedAlphaAttachmentMask[0] (swapchain framebuffer has only one image attached, so other indices should be unused) is set.",
      "parentUuid": "bb478dad_d89327cb",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68c50066_bc3fee25",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-22T19:25:55Z",
      "side": 0,
      "message": "I was wrong!\n\nThe swapchain images are only cleared the first time they are used.  All of the render passes have loadOp \u003d DONT_CARE (i.e. undefined) for color attachments.  My old logcat instrumentation for loadOp/storeOp was busted.  Now that it\u0027s fixed, I see:\n\nCommandBufferHelper::endRenderPass(): colorAttachment[ 0]: loadOp\u003dDONT_CARE, storeOp\u003dSTORE\n\nSince no more staged clears are done, and the loadOp is DONT_CARE/undefined, it can be anything (including alpha\u003d0.0), instead of the alpha\u003d0.95 value that is in pClearValues.\n\nI have perf and Android triage to do, and so I may not get much farther today.  My next task is to figure out why ANGLE chose DONT_CARE.",
      "parentUuid": "9376a336_0770131f",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5c36743_18ff88f7",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-23T16:13:26Z",
      "side": 0,
      "message": "Maybe due to some invalidate call. But that actually brings up a bug. If a format is emulated, we should never let it use loadOp\u003dDONT_CARE. storeOp\u003dDONT_CARE may be fine? Probably something like this could be used:\n\n- On TBR devices: use loadOp\u003dCLEAR instead of loadOp\u003dDONT_CARE if format is emulated. storeOp can remain DONT_CARE because next loadOp would clear the alpha anyway\n- On immediate mode devices: use loadOp\u003dLOAD instead of loadOp\u003dDONT_CARE, use storeOp\u003dSTORE instead of storeOp\u003dDONT_CARE if format is emulated.",
      "parentUuid": "68c50066_bc3fee25",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6541c5bd_ad39e619",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-23T16:23:03Z",
      "side": 0,
      "message": "I forgot to send the messages I wrote last night:\n\n\u003e I see what needs to be done.  Hopefully, I can push a fix by tomorrow morning.\n\nI did quickly try this last night and saw that changing loadOp\u003dCLEAR was needed for emulated alpha.\n\n\u003e On TBR devices ...\n\nSorry, what does \"TBR\" mean?\n\n\u003e On immediate mode devices ...\n\nSorry again, does \"immediate mode devices\" mean non-tilers (e.g. normal desktop GPUs)?",
      "parentUuid": "68c50066_bc3fee25",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de54d80c_bafbec28",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-23T17:59:02Z",
      "side": 0,
      "message": "TBR \u003d Tile-Based Rendering, so mobile. Immediate mode rendering GPUs are desktop GPUs.",
      "parentUuid": "6541c5bd_ad39e619",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37b05322_a86768c4",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1631,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2021-02-23T19:06:19Z",
      "side": 0,
      "message": "Thanks.  For some reason, I could only think of \"to be reviewed\":-).\n\nI have tested a change that I\u0027ll push in PS3 that does a CLEAR.  Why is that not good for immediate mode devices?",
      "parentUuid": "de54d80c_bafbec28",
      "revId": "fd132e4e7a9c84333b4fb4730f79367fe75f53e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}