{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fa1de9b3_7fedd73e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-12T05:42:02Z",
      "side": 1,
      "message": "Tested locally with some of the tests I had written for row-major matrix transformation which tested side effects in short-circuit expressions. The suite (GLSLTests) is too large to enable yet.",
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20573b74_7f8716f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-14T15:35:38Z",
      "side": 1,
      "message": "stamp LGTM",
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "451bc730_9474deab",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1384,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T20:59:03Z",
      "side": 1,
      "message": "Why doesn\u0027t this result in the merge block being executed twice?\n\nIt looks like this is going straight to the merge block if the conditions are right, but then the merge block is added again by writeBranchConditionalBlockEnd().",
      "range": {
        "startLine": 1381,
        "startChar": 0,
        "endLine": 1384,
        "endChar": 89
      },
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ecbc842_7630c994",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1384,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T21:23:05Z",
      "side": 1,
      "message": "See the design doc for details. writeBranchConditionalBlockEnd() doesn\u0027t \"add\" the merge block (the merge block is simply whatever comes after the if-else), it issues a jump to it.\n\nSo basically the code looks like this (for \u0026\u0026):\n\n    result \u003d left\n    if result  jump block  else  jump merge\n       \n    block:\n       result \u003d right\n       jump merge\n       \n    merge:\n       rest of the code",
      "parentUuid": "451bc730_9474deab",
      "range": {
        "startLine": 1381,
        "startChar": 0,
        "endLine": 1384,
        "endChar": 89
      },
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdac2ab6_e14c8533",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1806,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-14T20:59:03Z",
      "side": 1,
      "message": "Why not always enable short-circuiting as an optimization?\n\nIt\u0027s common to order conditional checks based on how expensive they are to perform with the expectation that the expensive checks will be skipped if an earlier simple check is already enough to know the answer.",
      "range": {
        "startLine": 1805,
        "startChar": 0,
        "endLine": 1806,
        "endChar": 46
      },
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc8c1205_6de90367",
        "filename": "src/compiler/translator/OutputSPIRV.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1806,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-06-14T21:23:05Z",
      "side": 1,
      "message": "1. It produces many more instructions.\n2. You are absolutely right, and indeed the drivers do make this sort of optimizations translating from SPIR-V for the very same reason (so it\u0027s not necessary for ANGLE to do).\n\nOf course we need data to understand what\u0027s best here. Potentially we could change this to `!is_constant_or_symbol` and err on the side of if-else. I\u0027ll add a TODO to look into this when the work is done so we can actually try and compare the two. Until then, I prefer to generate smaller SPIR-V as I suspect the driver makes this optimization anyway (they do the opposite too, flattening the if-else).",
      "parentUuid": "cdac2ab6_e14c8533",
      "range": {
        "startLine": 1805,
        "startChar": 0,
        "endLine": 1806,
        "endChar": 46
      },
      "revId": "def3115dd20d573fe897c496da6424542021b586",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}