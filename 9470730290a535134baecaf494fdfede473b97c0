{
  "comments": [
    {
      "key": {
        "uuid": "b58de6f4_ef0acd45",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Should the #define say \u0027MAX\u0027 in it too? e.g. something like EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE\n\nCurrently, if I set EGL_PLATFORM_ANGLE_VERSION_MAJOR_ANGLE to 11 then I could still get a Feature Level 10 device. I think that\u0027s very surprising behavior, since I requested 11!\n\nIt would be far less surprising to get a Feature Level 10 device if I set EGL_PLATFORM_ANGLE_MAX_VERSION_MAJOR_ANGLE to 11, though.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "956b82dc_179b947f",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-24T14:32:47Z",
      "side": 1,
      "message": "It depends on how verbose we want to be in the enum names, stating this behaviour in the spec may be enough.  What are your thoughts, Shannon?",
      "parentUuid": "b58de6f4_ef0acd45",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_1d951449",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "Done, I added MAX to the names.",
      "parentUuid": "956b82dc_179b947f",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "153072e8_05e26633",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T15:36:10Z",
      "side": 1,
      "message": "I left this one implementation dependent but we could specify that if a minor version is requested then a major one must be too.",
      "range": {
        "startLine": 117,
        "startChar": 10,
        "endLine": 119,
        "endChar": 67
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b58de6f4_94d31468",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Yes I am strongly in favour of that. Is there any scenario in which it is useful to request a minor version, but not a major version?",
      "parentUuid": "153072e8_05e26633",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_6ca8031e",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "Commenting on this version because that\u0027s where the rest of my comments are-- this should probably return an error condition, no? EGL_BAD_ATTRIBUTE, maybe?",
      "parentUuid": "b58de6f4_94d31468",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_3da0d0aa",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 119,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "Done, I made this an error.",
      "parentUuid": "5594aafe_6ca8031e",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5d6dada_14c87a2e",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-24T22:13:20Z",
      "side": 1,
      "message": "Do we need to add special text here for Feature Level 9_3?\n\nI believe the behavior we agreed on was that ANGLE won\u0027t expose Feature Level 9_3 by default. To get 9_3, the user will have to specifically request it. Should we explain this here?",
      "range": {
        "startLine": 125,
        "startChar": 8,
        "endLine": 129,
        "endChar": 25
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5db2605_44ddee6f",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "I added language to the ANGLE_platform_angle_d3d spec that says that unless specifically requested, it wont use feature levels that don\u0027t offer conformant configurations.",
      "parentUuid": "d5d6dada_14c87a2e",
      "range": {
        "startLine": 125,
        "startChar": 8,
        "endLine": 129,
        "endChar": 25
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_cc4d9704",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "Wouldn\u0027t this make more sense to specify in the DX/GL/etc specific extensions?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 135,
        "endChar": 73
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5db2605_64cef2c0",
        "filename": "extensions/ANGLE_platform_angle.txt",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "Done, I moved a lot of the language from this spec into the child specs.  It was getting too crowded.",
      "parentUuid": "5594aafe_cc4d9704",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 135,
        "endChar": 73
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9592a210_33e7c06f",
        "filename": "extensions/ANGLE_platform_angle_d3d.txt",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "WARP is D3D11-only. I think it should only be valid when EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE is specified.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "956b82dc_77a690cc",
        "filename": "extensions/ANGLE_platform_angle_d3d.txt",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-24T14:32:47Z",
      "side": 1,
      "message": "How about stating that EGL_PLATFORM_ANGLE_USE_WARP_ANGLE is only allowed to be EGL_TRUE if using EGL_PLATFORM_ANGLE_TYPE_D3D11_ANGLE?  It\u0027s useful to always have it as part of the attrib list.",
      "parentUuid": "9592a210_33e7c06f",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7580cec4_a522a83f",
        "filename": "extensions/ANGLE_platform_angle_d3d.txt",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-24T22:13:20Z",
      "side": 1,
      "message": "Yep, that works for me.",
      "parentUuid": "956b82dc_77a690cc",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_2cb2fb8f",
        "filename": "extensions/ANGLE_platform_angle_opengl.txt",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "I see this has been corrected in the most recent patch, but as a side note-- our current reserved enumerant range only goes to 0x320A, so please be aware of that if more enums are added. We should be conservative about adding additional ones, but if we hit the limit, I\u0027ll need to request a new allocation. (And 0x3210 is already allocated for KHR.)",
      "range": {
        "startLine": 55,
        "startChar": 59,
        "endLine": 55,
        "endChar": 65
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f583dec2_82fd0f82",
        "filename": "include/EGL/eglext.h",
        "patchSetId": 3
      },
      "lineNbr": 460,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Should it be 0x320A instead of 0x3210?",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55210a94_3254794c",
        "filename": "include/EGL/eglext.h",
        "patchSetId": 3
      },
      "lineNbr": 460,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T22:22:37Z",
      "side": 1,
      "message": "Yep, fixed.",
      "parentUuid": "f583dec2_82fd0f82",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7529ae84_955a03cb",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T15:36:10Z",
      "side": 1,
      "message": "We still haven\u0027t come to a decision about if the mAttributeMap should be updated before returning the display if the display is in an uninitialized state.",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 45,
        "endChar": 5
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9592a210_6e06bf11",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Out of interest, what is the argument against it?",
      "parentUuid": "7529ae84_955a03cb",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_46d3a896",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-24T14:32:47Z",
      "side": 1,
      "message": "I think it makes sense but we wanted to look over some specs to see if that behaviour would be consistent with some other extensions.",
      "parentUuid": "9592a210_6e06bf11",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75244ea4_207e63a1",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "So, after checking around in other specs, the most analogous specs to the proposed major/minor version language would be the behavior of the EGL_CONTEXT_CLIENT_VERSION attrib in eglCreateContext, and the EGL_PLATFORM_X11_SCREEN_KHR attrib from EGL_KHR_platform_x11 (also passed to eglGetPlatformDisplay). Those are both intended as exact matches, and generate errors (EGL_BAD_CONFIG and EGL_BAD_ATTRIBUTE, respectively) if they aren\u0027t supported-- but they have the added benefit of knowing at display creation time whether the attributes are supported, instead of having to chance it and wait until initialization...\n\nI\u0027d say either this is an indication that we need to somehow separate the major/minor version specification from display retrieval (the only other place I can think of, though, is config choosing time, by which time we need to already have initialized the backing renderer), or we should explicitly treat it as a \"MAX\" version, and name it that way in the spec, to differentiate it, so that expectations on its behavior aren\u0027t similar to, e.g., the X11 screen attrib. I don\u0027t think it would be problematic to store that information in the uninitialized display, then...",
      "parentUuid": "5594aafe_46d3a896",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5db2605_44f64ef4",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "Thanks for looking into this! I think I prefer to use MAX instead of requesting specific versions since it would require lots of new mechanisms for checking available feature levels before display creation and may not even be reliable.",
      "parentUuid": "75244ea4_207e63a1",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75244ea4_0008074b",
        "filename": "src/libEGL/Display.cpp",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "Fix this tab while you\u0027re in here?",
      "range": {
        "startLine": 46,
        "startChar": 0,
        "endLine": 46,
        "endChar": 4
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b58de6f4_09a3710f",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "I tried adding D3D_FEATURE_LEVEL_11_1 but ANGLE hit asserts very early on. I think you\u0027ll need to add D3D_FEATURE_LEVEL_11_1 entries to some feature-level-specific helpers before you can add 11_1 here.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55210a94_d25ae574",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T22:22:37Z",
      "side": 1,
      "message": "You\u0027re right, I forgot to remove some.",
      "parentUuid": "b58de6f4_09a3710f",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b58de6f4_496f391c",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Can we remove 9_2 and 9_1? FYI, we don\u0027t plan to add 9_2 or 9_1 support to ANGLE in the near future. On these devices, we plan to use WARP.\n\nIf 9_2 or 9_1 aren\u0027t really supported then it doesn\u0027t make sense to include them here. ANGLE will fail to do anything meaningful on these feature levels.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "956b82dc_40694465",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "Geoff: should we consider generating errors in this case? We want to leave ourselves open to supporting increasing major/minor levels without having to repeatedly revise the extension, should they occur, but we probably want to have some mechanism for alerting users that they\u0027ve requested a feature level that we know before even compile-time isn\u0027t supported. (And to document it in the extension text.)",
      "parentUuid": "b58de6f4_496f391c",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_1d1ab460",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 182,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "I\u0027m not sure.  I\u0027d prefer to just have eglInitialize fail if the user is requesting a low feature level that we can\u0027t support.  If the user is trying to ask for specific feature levels instead of using EGL_DONT_CARE (or not specifying anything) then they probably have an idea of what to expect.",
      "parentUuid": "956b82dc_40694465",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_664a5283",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T15:36:10Z",
      "side": 1,
      "message": "This code essentially allows the user to request version 100.100 and still be given a device.  Do we want to restrict the input to be valid version numbers?",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 188,
        "endChar": 5
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f583dec2_78ec3e4f",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "I think it\u0027s okay like this.",
      "parentUuid": "3533b6f6_664a5283",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75244ea4_40c71f71",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1105219
      },
      "writtenOn": "2014-10-24T21:40:30Z",
      "side": 1,
      "message": "I think there\u0027s no need to explicitly specify a ceiling on it.",
      "parentUuid": "3533b6f6_664a5283",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 188,
        "endChar": 5
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "157792c2_0708464b",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1851,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-24T22:13:20Z",
      "side": 1,
      "message": "Should we also use mAvailableFeatureLevels here?",
      "range": {
        "startLine": 1846,
        "startChar": 0,
        "endLine": 1851,
        "endChar": 6
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_dd8e6c38",
        "filename": "src/libGLESv2/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1851,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-27T20:08:05Z",
      "side": 1,
      "message": "Yep, done.",
      "parentUuid": "157792c2_0708464b",
      "range": {
        "startLine": 1846,
        "startChar": 0,
        "endLine": 1851,
        "endChar": 6
      },
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f583dec2_58f13af9",
        "filename": "tests/angle_tests/RendererTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "You might want to pick up my changes to this file, which add tests for PLATFORM_MAJOR and PLATFORM_MINOR.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75244ea4_308a38f8",
        "filename": "tests/angle_tests/RendererTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T22:22:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f583dec2_58f13af9",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3533b6f6_c619069b",
        "filename": "util/testfixturetypes.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T15:36:10Z",
      "side": 1,
      "message": "I changed a few names in here an added a helper macro ANGLE_TYPED_TEST_CASE.  I think this makes the test files much more readable.",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9592a210_08a36b0f",
        "filename": "util/testfixturetypes.h",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Works for me.",
      "parentUuid": "3533b6f6_c619069b",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f583dec2_c22c7706",
        "filename": "util/testfixturetypes.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-23T20:04:28Z",
      "side": 1,
      "message": "Jamie asked me to add the \u0027T\u0027 to the end of these types. Is it worth adding it back in?",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5594aafe_e363c6b5",
        "filename": "util/testfixturetypes.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2014-10-23T22:22:37Z",
      "side": 1,
      "message": "I removed the T since it\u0027s no longer a typename but an integer.",
      "parentUuid": "f583dec2_c22c7706",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5d6dada_f425b64a",
        "filename": "util/testfixturetypes.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1115160
      },
      "writtenOn": "2014-10-24T22:13:20Z",
      "side": 1,
      "message": "Ah yes. Sorry! :-)",
      "parentUuid": "5594aafe_e363c6b5",
      "revId": "9470730290a535134baecaf494fdfede473b97c0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}