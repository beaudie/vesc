{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d41ef978_fb86df64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-10-29T17:38:32Z",
      "side": 1,
      "message": "Cody, I\u0027m not sure why this test got the Skia-Gold \"untriaged\" message for CoD.  Is this a real problem?",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5c38b414_8bc9d1b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-10-29T17:42:58Z",
      "side": 1,
      "message": "There was an infrastructure problem that landed a new trace without allowing us to update the gold image.  Tracked over here: https://crbug.com/1143507\n\nThe new trace has been reverted so I think you can ignore the failure:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2506501",
      "parentUuid": "d41ef978_fb86df64",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de01a329_ed4ca78c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-10-29T17:54:12Z",
      "side": 1,
      "message": "Great, thanks!",
      "parentUuid": "5c38b414_8bc9d1b7",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c14aaf7c_08236180",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-29T18:51:09Z",
      "side": 1,
      "message": "I agree with Courtney\u0027s concern that this is making the problem worse. Not sure what to suggest yet.",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd244bc1_0f4f886b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-10-29T19:11:06Z",
      "side": 1,
      "message": "There\u0027s certainly a tangle of #ifdef\u0027s and GN args, and it\u0027s not clear what everything is for.  One idea:\n\n1) Use a run-time option to enable this (env var or feature flag)\n2) Use a compile-time option to force the run-time option\n\nDebug markers have a run-time option.  I know Jamie doesn\u0027t like that for work with Chrome.  However, if we had features/run-time options, we might be able to simplify the code.  Then, we could make explicit GN args that just turn on the run-time options.",
      "parentUuid": "c14aaf7c_08236180",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43c411ef_74d6d1dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-31T14:39:57Z",
      "side": 1,
      "message": "To clarify: your CL broke the workflow where we would log EVENT() calls to debug.txt when we set angle_enable_trace \u003d true . Can you restore this functionality either to angle_enable_trace or to another GN variable that we can use in its stead?",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a076500f_b5209ba8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-10-31T14:40:36Z",
      "side": 1,
      "message": "i.e. tweak the changes you made to speed up AGI to restore the old code path, instead of adding a totally new one.",
      "parentUuid": "43c411ef_74d6d1dd",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a87674a1_429e5da6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-02T19:19:10Z",
      "side": 1,
      "message": "It\u0027s working for me on Windows.  I build the \"master\" branch with \"angle_enable_trace \u003d true\".  When I run a test, I see \"out/Debug/obj/src/tests/angle_debug.txt\" get bigger with all of the gl/egl commands.\n\nBTW, I\u0027ve never used that workflow before.  It\u0027s not documented.  On Android, we use Courtney\u0027s WIP CL (that this CL builds on), which writes to logcat.  I found in the code where \"angle_debug.txt\" is written.  From that, I found the file.  It was huge (\u003e 6 GB).\n\nThe \"Boulder team\" discussed having this CL with a run-time option.  Do we want to proceed with that for Android development?",
      "parentUuid": "a076500f_b5209ba8",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "404a7589_55ffffc7",
        "filename": "src/common/debug.cpp",
        "patchSetId": 2
      },
      "lineNbr": 251,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-02T23:30:43Z",
      "side": 1,
      "message": "This CL crashes here with Asphalt 9:\n\n    11-02 16:26:18.685 22006 22006 F DEBUG   : backtrace:\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #00 pc 000000000073b004  /data/app/~~-rCkJ4AQ95K51NeOJbTaTg\u003d\u003d/org.chromium.angle-UVh-45yCpRapCNzhJa26xg\u003d\u003d/lib/arm64/libGLESv2_angle.so (gl::Trace(int, char const*)+64) (BuildId: 8adc294957bc5e5b)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #01 pc 000000000073af18  /data/app/~~-rCkJ4AQ95K51NeOJbTaTg\u003d\u003d/org.chromium.angle-UVh-45yCpRapCNzhJa26xg\u003d\u003d/lib/arm64/libGLESv2_angle.so (gl::LogMessage::~LogMessage()+172) (BuildId: 8adc294957bc5e5b)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #02 pc 00000000004715c0  /data/app/~~-rCkJ4AQ95K51NeOJbTaTg\u003d\u003d/org.chromium.angle-UVh-45yCpRapCNzhJa26xg\u003d\u003d/lib/arm64/libGLESv2_angle.so (egl::Surface::setSwapBehavior(unsigned int)+184) (BuildId: 8adc294957bc5e5b)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #03 pc 00000000004a1cbc  /data/app/~~-rCkJ4AQ95K51NeOJbTaTg\u003d\u003d/org.chromium.angle-UVh-45yCpRapCNzhJa26xg\u003d\u003d/lib/arm64/libGLESv2_angle.so (egl::SetSurfaceAttrib(egl::Surface*, int, int)+152) (BuildId: 8adc294957bc5e5b)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #04 pc 000000000032c880  /data/app/~~-rCkJ4AQ95K51NeOJbTaTg\u003d\u003d/org.chromium.angle-UVh-45yCpRapCNzhJa26xg\u003d\u003d/lib/arm64/libGLESv2_angle.so (EGL_SurfaceAttrib+188) (BuildId: 8adc294957bc5e5b)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #05 pc 000000000001f1c8  /system/lib64/libEGL.so (android::eglSurfaceAttribImpl(void*, void*, int, int)+368) (BuildId: 9e90bed6894e07ae72b583df84477572)\n    11-02 16:26:18.685 22006 22006 F DEBUG   :       #06 pc 000000000034a314  /system/lib64/libhwui.so (android::uirenderer::renderthread::EglManager::createSurface(ANativeWindow*, android::uirenderer::ColorMode, sk_sp\u003cSkColorSpace\u003e)+260) (BuildId: b8d74eb18ee4832711bf3e4c37d3252f)\n\n\nUpdating DebugAnnotationsActive() to check g_debugAnnotator prevent the crash, but nothing is output to logcat:\n\n    return g_debugAnnotator !\u003d nullptr;",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "221167dc_a917a86f",
        "filename": "src/common/debug.cpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-02T23:32:20Z",
      "side": 1,
      "message": "Oops, it\u0027s actually here that the crash occurs, because g_debugAnnotator is null, but that can be prevented by checking that in DebugAnnotationsActive().",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53a77e8b_74273afb",
        "filename": "src/common/debug.cpp",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-11-02T23:51:11Z",
      "side": 1,
      "message": "It\u0027s looking like the original CL is having unintended consequences elsewhere as well. See anglebug.com/5291\nI think resetting that global pointer at MakeCurrent time is causing issues with multi-threaded apps.",
      "parentUuid": "221167dc_a917a86f",
      "revId": "4f8daf1bb0314e32793e9dff28313a3ea29ab642",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}