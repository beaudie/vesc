{
  "comments": [
    {
      "key": {
        "uuid": "e7a4f08f_74806abd",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 697,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-16T21:34:30Z",
      "side": 1,
      "message": "nit: probably should move this to gl::State (basically ContextState)",
      "range": {
        "startLine": 697,
        "startChar": 4,
        "endLine": 697,
        "endChar": 31
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56ca8f39_f17fab59",
        "filename": "src/libANGLE/renderer/gl/egl/DisplayEGL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 172,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T17:07:22Z",
      "side": 1,
      "message": "Isn\u0027t there more work to be done by the GL backend then if this extension is supported? In the very least, an implementation of `getActualPriority()`?",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92bf0534_f5108d05",
        "filename": "src/libANGLE/renderer/gl/egl/DisplayEGL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 172,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T17:47:49Z",
      "side": 1,
      "message": "Sure. this should result in a eglGetContextAttrib() to the underlying EGL.\nSo ContextImpl should have a getContextPriority(), not getActualPriority(). And then that implemented in ContextGL/ContextEGL. and also in ContextVk. That would be consistent. And in ContextEGL this should call the underlying eglGetContextAttrib(().",
      "parentUuid": "56ca8f39_f17fab59",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f93afa5_22bdfb19",
        "filename": "src/libANGLE/renderer/gl/egl/DisplayEGL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 172,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T20:03:34Z",
      "side": 1,
      "message": "My point being that, if you don\u0027t intend to add the necessary functions in gl/*, you don\u0027t need to expose the extension here.",
      "parentUuid": "92bf0534_f5108d05",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b042afa_49ef1118",
        "filename": "src/libANGLE/renderer/gl/egl/DisplayEGL.cpp",
        "patchSetId": 7
      },
      "lineNbr": 172,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T21:31:02Z",
      "side": 1,
      "message": "OK. that would be good, because the whole QueryContext on gl/* is empty. I assumed it would be already plumbed up and just a pass through to the underlying EGL. And we are focused on Vulkan. I think we assumed this in other places too. need to check that.",
      "parentUuid": "7f93afa5_22bdfb19",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb3c525d_1b9fefb4",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 820,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T17:07:22Z",
      "side": 1,
      "message": "I agree with Jamie that this should be replaced by the priority given to the constructor. When you need the queue, just call renderer-\u003egetQueue(priority).",
      "range": {
        "startLine": 820,
        "startChar": 12,
        "endLine": 820,
        "endChar": 18
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "793f2587_6241c835",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 820,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T17:47:49Z",
      "side": 1,
      "message": "OK. I removed this in favor of using vkDeviceWaitIdle, instead of vkQueueWaitIdle. I was just 2 seconds away from uploading.",
      "parentUuid": "cb3c525d_1b9fefb4",
      "range": {
        "startLine": 820,
        "startChar": 12,
        "endLine": 820,
        "endChar": 18
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75e27eb3_9214ad4e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 820,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T20:03:34Z",
      "side": 1,
      "message": "This is in ContextVk, not SurfaceVk",
      "parentUuid": "793f2587_6241c835",
      "range": {
        "startLine": 820,
        "startChar": 12,
        "endLine": 820,
        "endChar": 18
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1e943d5_feff0919",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.h",
        "patchSetId": 7
      },
      "lineNbr": 820,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T21:31:02Z",
      "side": 1,
      "message": "Unclear. \nI have changed ContextVk to hold the priority passed in from updated constructor. \nSo line above is now:\negl::ContextPriority mContextPriority;\nAnd method:\ninline VkQueue getQueue() const { return mRenderer-\u003egetQueue(mContextPriority); }\n\nSurfaceVk however, the priority is not sufficient. I have already observed that at time of flush/ during SurfaceVk::Destroy, that it is uncurrent. So caching priority or context there would not be useful. Only thing persistent would be the Queue.",
      "parentUuid": "75e27eb3_9214ad4e",
      "range": {
        "startLine": 820,
        "startChar": 12,
        "endLine": 820,
        "endChar": 18
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10395cd9_c87fbca2",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1168,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T17:07:22Z",
      "side": 1,
      "message": "typo: Queue",
      "range": {
        "startLine": 1168,
        "startChar": 22,
        "endLine": 1168,
        "endChar": 28
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b196d87_1bacbf21",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1168,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T17:47:49Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "10395cd9_c87fbca2",
      "range": {
        "startLine": 1168,
        "startChar": 22,
        "endLine": 1168,
        "endChar": 28
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a31cead_524adf75",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1192,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T17:07:22Z",
      "side": 1,
      "message": "Could be simplified:\n\n    VkQueue lowQueue;\n    vkGetDeviceQueue(mDevice, mCurrentQueueFamilyIndex, kQueueIndexLow, \u0026lowQueue);\n    mQueues[egl::ContextPriority::Low]    \u003d lowQueue;\n    mQueues[egl::ContextPriority::Medium] \u003d lowQueue;\n    mQueues[egl::ContextPriority::High]   \u003d lowQueue;\n\n    // If at least 2 queues, High has its own queue\n    if (queueCount \u003e 1)\n    {\n        vkGetDeviceQueue(mDevice, mCurrentQueueFamilyIndex, kQueueIndexHigh,\n                         \u0026mQueues[egl::ContextPriority::High]);\n    }\n\n    // If at least 3 queues, Medium has its own queue\n    if (queueCount \u003e 2)\n    {\n        vkGetDeviceQueue(mDevice, mCurrentQueueFamilyIndex, kQueueIndexMedium,\n                         \u0026mQueues[egl::ContextPriority::Medium]);\n    }",
      "range": {
        "startLine": 1166,
        "startChar": 0,
        "endLine": 1192,
        "endChar": 5
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7327e45_cf275e00",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1192,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T17:47:49Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "4a31cead_524adf75",
      "range": {
        "startLine": 1166,
        "startChar": 0,
        "endLine": 1192,
        "endChar": 5
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9df23c6c_0bc029c0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1203,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T17:07:22Z",
      "side": 1,
      "message": "So the application can ask for Low and then query and see that it got Medium for example? Is it a problem if the application asks for Medium and gets Low instead? If that\u0027s not a problem, then the order doesn\u0027t really matter, does it?",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29f3fd70_b050609f",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1203,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T17:47:49Z",
      "side": 1,
      "message": "I was trying to address the fact that MEDIUM is the default. If there is 1 Q, then what ever was requested - its MEDIUM, If there are \u003e1, then high is unique, If \u003e3 then low is unique. You do identify a case I didn\u0027t cover. Trying to avoid requesting HIGH, but only 1 Q - so matching LOW first.\n\nOtherwise I had something like this\nfor (ctxPriority : egl::ContextPriority)\n{\n    if (mQueues[ctxPriority] \u003d\u003d queue)\n    {\n        *priority \u003d ctxPriority;\n        return true;\n    }\n    return false;\n}\nBut this seems to favor LOW, in cases of \u003c3 queues.",
      "parentUuid": "9df23c6c_0bc029c0",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22d8bf55_a44b4df1",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1203,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-16T20:03:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "29f3fd70_b050609f",
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72b05497_f9d97666",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T18:11:32Z",
      "side": 1,
      "message": "Instead of storing the handle for the VkQueue can you store the priority here? The current design for the Vulkan back-end only stores object handles in one place for unique ownership scenarios.\n\nSimilarly the methods that currently take VkQueue could take a priority.",
      "range": {
        "startLine": 297,
        "startChar": 4,
        "endLine": 297,
        "endChar": 19
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cfd77a8_597f17c5",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-15T18:55:23Z",
      "side": 1,
      "message": "Yes, at makeCurrent I could get priority from gl::Context and store here instead of VkQueue. If  you want to change to vkDeviceWait in the other question, then this goes away anyways.",
      "parentUuid": "72b05497_f9d97666",
      "range": {
        "startLine": 297,
        "startChar": 4,
        "endLine": 297,
        "endChar": 19
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa9c609c_35af6f16",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2020-01-16T21:31:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cfd77a8_597f17c5",
      "range": {
        "startLine": 297,
        "startChar": 4,
        "endLine": 297,
        "endChar": 19
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aaeb178_fc9b90b2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 297,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-16T21:34:30Z",
      "side": 1,
      "message": "Not seeing it in the ToT patch?",
      "parentUuid": "aa9c609c_35af6f16",
      "range": {
        "startLine": 297,
        "startChar": 4,
        "endLine": 297,
        "endChar": 19
      },
      "revId": "3cfdd6b98b9afaded1f098c2bf9eda769daddff1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}