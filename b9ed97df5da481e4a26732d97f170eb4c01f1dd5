{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e503bada_49094dcb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3017,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "```suggestion\n        mDecayingAverageSize \u003d initialSize;\n```",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6219b053_6744b52f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3017,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Thanks. Done.",
      "parentUuid": "e503bada_49094dcb",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4023bb0c_61e37bb7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3110,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "I agree the name was not great. How about we remove the mention of history too? We can call it like `minimumBlockSize` or `minimumRequiredBlockSize`. That makes it clearer why it\u0027s being compared with `mSize` (which is also the block size).",
      "range": {
        "startLine": 3110,
        "startChar": 17,
        "endLine": 3110,
        "endChar": 41
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c106fee1_5241ea4f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3110,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Makes sense. Renamed to `minRequiredBlockSize`.",
      "parentUuid": "4023bb0c_61e37bb7",
      "range": {
        "startLine": 3110,
        "startChar": 17,
        "endLine": 3110,
        "endChar": 41
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6629a2f_9d91a958",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3113,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "You could avoid the cast mess and have the coefficient be like `63` as a percentage, then do:\n\n```suggestion\n    mDecayingAverageSize                  \u003d (mDecayingAverageSize * kDecayAvgCoefficient +\n        sizeWhileIgnoringHistory * (100 - kDecayAvgCoefficient) + 50) / 100;\n```",
      "range": {
        "startLine": 3111,
        "startChar": 0,
        "endLine": 3113,
        "endChar": 85
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "021741a5_d7498893",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3113,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Thanks! Done.",
      "parentUuid": "c6629a2f_9d91a958",
      "range": {
        "startLine": 3111,
        "startChar": 0,
        "endLine": 3113,
        "endChar": 85
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24678e17_f28b03f0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "Probably don\u0027t want to cut off the history like that, you could still let it track the history as usual.\n\nWhat you\u0027ve implemented here is a low-pass filter basically. But making the average snap the current value is a high frequency event. Not sure if that makes sense to you ðŸ˜„",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fcf9128_dac8ca62",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T04:10:20Z",
      "side": 1,
      "message": "Maybe this can help: https://docs.google.com/spreadsheets/d/1tm8KvE81VmVkMV8Y0Fk4zJciP5513tcAsuP_M1uLjeY\n\nI finally found the name, if you search for first-order IIR filter there are a lot of information about this online as well. In the sheets, you can see how quickly the filter responses to changes, and you can decide the coefficient based on that (or experiment with it yourself too).\n\nThe Step sheet shows the filter in response to a step function, the Impulse sheet shows the same for an impulse function. At this point the question is how quickly we want the decay to happen. For example, with a coefficient of 60%, the filtered size reaches within 12.5% of allocation size in only 4 allocations. If the application\u0027s allocation pattern is lower frequency than that (like 10 big allocations, 5N small allocations where N \u003d big/small ratio), then we\u0027d still get in an alloc/dealloc loop.\n\nIn contrast, it would take ~20 allocations to reach within 12.5% of the target with a coefficient of 0.9. Mind you, when allocation size drops, it would take many allocations for a single buffer to get exhausted, and allocating a new buffer then only counts as 1 allocation. So reacting fast to the size (like 63% as you\u0027ve chosen) is not actually bad IMO. If that satisfies the app, might as well keep it.\n\nWhere did you get 63% though?",
      "parentUuid": "24678e17_f28b03f0",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e332502_efb2ff48",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3118,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Thanks for the explanation and the doc!\n\nYou are right. We can still track the history if the required size is larger. We would allocate a larger buffer, and the history will help reduce the size later if the larger size was a one-off.\n\nFor experiments, I have been looking at the app\u0027s FPS with different settings to see what happens. The 63% was not a final decision (it came from `1-1/e` ðŸ˜„). I agree that since the buffer itself is used for many suballocations, reacting faster is better. I will look at coefficients around this value as well.\n\nIn the baseline, the app would roughly go through 16K, 24K/32K/42K, 64K/96K (different variations), and back to 16K. The FPS improves by disrupting this cycle.",
      "parentUuid": "5fcf9128_dac8ca62",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c2e073a_9bbd5173",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 3118,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T21:08:26Z",
      "side": 1,
      "message": "\u003e it came from `1-1/e` ðŸ˜„\n\nHah, I don\u0027t know what made you go with that number, but `e^-decayrate` _is_ actually significant for this filter!\n\nIf you want more math: http://www.tsdconseil.fr/tutos/tuto-iir1-en.pdf, though note that the coefficient used there is 1 minus the one we have here, because we apply the coeff to history, and they apply (1-coeff) to history. So you didn\u0027t accidentally use a rate of 1 (but more like 0.46 (-ln(63%)), but that formula is very close to home :P",
      "parentUuid": "5e332502_efb2ff48",
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3c7bf29_fda60c21",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "nit: how about `mSizeInRecentHistory`?",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 31
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d201de83_88755551",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3c7bf29_fda60c21",
      "range": {
        "startLine": 135,
        "startChar": 11,
        "endLine": 135,
        "endChar": 31
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5212d1bf_db3ee831",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-01T03:16:19Z",
      "side": 1,
      "message": "Can move to the function that does the math, just as local var.",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 143,
        "endChar": 76
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18fcde28_fa3c2678",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-01T19:47:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5212d1bf_db3ee831",
      "range": {
        "startLine": 141,
        "startChar": 0,
        "endLine": 143,
        "endChar": 76
      },
      "revId": "b9ed97df5da481e4a26732d97f170eb4c01f1dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}