{
  "comments": [
    {
      "key": {
        "uuid": "c737426a_81911a1a",
        "filename": "include/EGL/eglext.h",
        "patchSetId": 4
      },
      "lineNbr": 527,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "This needs to be updated, it should end with _ANGLE. I suggest renaming it to EGL_EXPERIMENTAL_DIRECT_RENDERING_ANGLE, the PLATFORM part doesn\u0027t need necessary.",
      "range": {
        "startLine": 527,
        "startChar": 8,
        "endLine": 527,
        "endChar": 56
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "870c6ac1_e7124239",
        "filename": "include/EGL/eglext.h",
        "patchSetId": 4
      },
      "lineNbr": 527,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "I\u0027m sorry I didn\u0027t chime in as much on the extension draft soon but I think the term \u0027direct\u0027 is too overloaded here. \n(EG direct composition is already a term we use). Also a bit to the use of a bool. Instead I think we should use ANGLE_PRESENT_PATH, or something similar and use ANGLE_PRESENT_FLIP_COPY and ANGLE_PRESENT_FLIP_FAST. Thoughts?\nThis design would also encompass Geoff\u0027s prior extension with ANGLE_PRESENT_FLIP_X and ANGLE_PRESENT_FLIP_Y. Names might need some tweaking but I think it\u0027s cleaner.",
      "parentUuid": "c737426a_81911a1a",
      "range": {
        "startLine": 527,
        "startChar": 8,
        "endLine": 527,
        "endChar": 56
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73ece47_60bdf27e",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "Is this an avoidable cost? Is dx_ViewScale required when this extension is not enabled?",
      "range": {
        "startLine": 193,
        "startChar": 46,
        "endLine": 193,
        "endChar": 47
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_23360abc",
        "filename": "src/compiler/translator/OutputHLSL.cpp",
        "patchSetId": 4
      },
      "lineNbr": 193,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "I\u0027m also a bit confused, since this code is D3D9-only, and I believe this workaround is D3D11-only. I think you can just undo this change.",
      "parentUuid": "a73ece47_60bdf27e",
      "range": {
        "startLine": 193,
        "startChar": 46,
        "endLine": 193,
        "endChar": 47
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8741cad9_9fa9734e",
        "filename": "src/libANGLE/renderer/d3d/ProgramD3D.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1416,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "make this a part of the metadata structure, it\u0027s why I made that structure, because we were becoming inundated with countless little flags. You\u0027ll be able to remove it from all the parameter lists of the functions.",
      "range": {
        "startLine": 1416,
        "startChar": 46,
        "endLine": 1416,
        "endChar": 81
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_c365f6c2",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "I believe we can skip executing this code if the scissor is disabled. I\u0027d suggest we try that.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 104,
        "endChar": 5
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8741cad9_bf7317ee",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "nit: name this for it\u0027s purpose instead of just \u0027modified\u0027, directRenderingClearParams?",
      "range": {
        "startLine": 105,
        "startChar": 24,
        "endLine": 105,
        "endChar": 38
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27fd7ec1_e7123c39",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Framebuffer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 352,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "comment is incomplete... \" if we\u0027re rendering to the default FBO directly\"",
      "range": {
        "startLine": 352,
        "startChar": 77,
        "endLine": 352,
        "endChar": 92
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7344668_e226e6f6",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 980,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "Chromium still disallows us from using the initializer list constructors, I believe.  You\u0027ll have to push each element.",
      "range": {
        "startLine": 980,
        "startChar": 45,
        "endLine": 980,
        "endChar": 46
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27fd7ec1_274f3442",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 980,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e7344668_e226e6f6",
      "range": {
        "startLine": 980,
        "startChar": 45,
        "endLine": 980,
        "endChar": 46
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73ece47_20360abc",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1011,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "can you use range-for here?",
      "range": {
        "startLine": 1011,
        "startChar": 4,
        "endLine": 1011,
        "endChar": 88
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7344668_022c2ad3",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1467,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "use framebufferObject.",
      "range": {
        "startLine": 1467,
        "startChar": 36,
        "endLine": 1467,
        "endChar": 74
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_234f2a42",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1467,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e7344668_022c2ad3",
      "range": {
        "startLine": 1467,
        "startChar": 36,
        "endLine": 1467,
        "endChar": 74
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73ece47_006666ce",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1468,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "just pass the FBO directly to statemanager, call it updateDirectRendering",
      "range": {
        "startLine": 1468,
        "startChar": 18,
        "endLine": 1468,
        "endChar": 36
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6703f691_e63d9e0c",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1470,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "getFirstColorbuffer",
      "range": {
        "startLine": 1470,
        "startChar": 53,
        "endLine": 1470,
        "endChar": 70
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c737426a_c1f88233",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1470,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "6703f691_e63d9e0c",
      "range": {
        "startLine": 1470,
        "startChar": 53,
        "endLine": 1470,
        "endChar": 70
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8741cad9_dfc85b30",
        "filename": "src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 3682,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "s/NULL/nullptr",
      "range": {
        "startLine": 3682,
        "startChar": 35,
        "endLine": 3682,
        "endChar": 39
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73ece47_20b7eaa0",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 123,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "Question for Jamie: do we need to force all of this or can we be more selective?",
      "range": {
        "startLine": 121,
        "startChar": 8,
        "endLine": 123,
        "endChar": 87
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6703f691_e626bef6",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 123,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "We can check if the currently applied state differs from the desired state before each of these dirty flags I believe. May depend on if the state is already applied. You can also pass gl::State here.\n\nIdeally we\u0027d want to do this state synching on when we change the FBO. Seems to me that\u0027s when direct rendering changes. I\u0027m working on FBO dirty bits somewhat.",
      "parentUuid": "a73ece47_20b7eaa0",
      "range": {
        "startLine": 121,
        "startChar": 8,
        "endLine": 123,
        "endChar": 87
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a73ece47_c05f1ef4",
        "filename": "src/libANGLE/renderer/d3d/d3d11/StateManager11.h",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "prefix with mCur to indicate they\u0027re cache variables, also suggest you use std::optional to invalidate them",
      "range": {
        "startLine": 104,
        "startChar": 2,
        "endLine": 105,
        "endChar": 42
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47fef2bd_e58b5609",
        "filename": "src/libANGLE/renderer/d3d/d3d11/SwapChain11.cpp",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "nit: make this a helper method",
      "range": {
        "startLine": 55,
        "startChar": 5,
        "endLine": 59,
        "endChar": 84
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07f87ad1_c39296d0",
        "filename": "src/libANGLE/renderer/d3d/d3d9/renderer9_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 284,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-01-14T20:37:10Z",
      "side": 1,
      "message": "don\u0027t think this needs to change",
      "range": {
        "startLine": 279,
        "startChar": 11,
        "endLine": 284,
        "endChar": 30
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27fd7ec1_6769acf9",
        "filename": "src/libGLESv2/entry_points_egl_ext.cpp",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "nit: error message.",
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c737426a_a1c21e0c",
        "filename": "src/tests/egl_tests/EGLDirectRenderingD3D11Test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "We should be very careful that this doesn\u0027t get broken.  I would add a new flag to the EGLPlatformParameters structure for this and then make overloads for the D3D11 test types (see how the OPENGL ones have overloads in angle_test_configs.h) and then add the new configuration to some existing tests.",
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7096eb1_68fe231e",
        "filename": "src/tests/egl_tests/EGLDirectRenderingD3D11Test.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2016-01-14T18:34:50Z",
      "side": 1,
      "message": "nit: 2016",
      "range": {
        "startLine": 2,
        "startChar": 13,
        "endLine": 2,
        "endChar": 17
      },
      "revId": "239a8540f32ced86380d75d70d5ce5cb9e4bd201",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}