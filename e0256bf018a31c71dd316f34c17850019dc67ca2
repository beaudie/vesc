{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "00ae6777_b232ea99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T22:02:26Z",
      "side": 1,
      "message": "PTAL",
      "revId": "e0256bf018a31c71dd316f34c17850019dc67ca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb895dee_e76a33e6",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1314,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-10-07T22:27:02Z",
      "side": 1,
      "message": "This is the destination framebuffer\u0027s color target, it should be a write operation, right?",
      "range": {
        "startLine": 1312,
        "startChar": 4,
        "endLine": 1314,
        "endChar": 81
      },
      "revId": "e0256bf018a31c71dd316f34c17850019dc67ca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "227e3669_48066d71",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1314,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-07T23:15:37Z",
      "side": 1,
      "message": "We\u0027re in the middle of a blit to get here, and this is executing from the perspective of the destination FramebufferVk.   Since we are blitting to this FramebufferVk, I agree that indicating we are writing to it seems like the right thing.\n\nShabi questioned if this line was necessary.   Without an onImageRenderPass[Read|Write] here, there are VVL errors:\n\n\u003e ERR: RendererVk.cpp:336 (DebugUtilsMessenger): [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Validation Error: [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Object 0: handle \u003d 0x5642b22a2ba0, type \u003d VK_OBJECT_TYPE_COMMAND_BUFFER; | MessageID \u003d 0x4dae5635 | Submitted command buffer expects VkImage 0x250000000025[] (subresource: aspectMask 0x1 array layer 0, mip level 0) to be in layout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL--instead, current layout is VK_IMAGE_LAYOUT_UNDEFINED.\n\nBoth versions solve the layout issue, but one of them is doing the wrong barrier.\n\nI\u0027m probably overthinking it and conflating readRenderTarget with needing onImageRenderPassRead(), but wanted to get a second opinion.",
      "parentUuid": "fb895dee_e76a33e6",
      "range": {
        "startLine": 1312,
        "startChar": 4,
        "endLine": 1314,
        "endChar": 81
      },
      "revId": "e0256bf018a31c71dd316f34c17850019dc67ca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d466c345_efaba263",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1314,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-10-08T02:19:18Z",
      "side": 1,
      "message": "Calling `on..Write` on the \"read\" RT is definitely not right. Actually the code shouldn\u0027t even look at this framebuffer\u0027s read RT.\n\nLet\u0027s look at the variables around here:\n\n- Blit src: srcFramebufferVk\n- Blit dst: this\n- Read from srcFramebufferVk.RT[readColorIndexGL]\n- Write to this.RT[drawColorIndexGL] (\u003d\u003d drawRenderTarget)\n\nNow srcFramebufferVk.RT[readColorIndexGL] was being drawn to in the previous render pass. That means srcFramebufferVk.RT[readColorIndexGL] should have already had onImageRenderPassWrite called on it.\n\nWhat about this.RT[drawColorIndexGL]? That needs an onImageRenderPassWrite for the layout to be correct, but that\u0027s not done here. Instead, this.readRT is being transitioned, which is wrong.\n\nProbably the reason why this change works is that in every test this.RT[drawColorIndexGL] \u003d\u003d this.readRT.\n\n---\n\nTim, would you please change this back to onImageRenderPassWrite but call it on drawRenderTarget instead? Then add a test that invokes this optimization but such that `getColorReadRenderTarget()` returns a different RT from drawRenderTarget. Actually, I don\u0027t know if that\u0027s possible given the restrictions for this optimization (that `this` must have only one enabled draw buffer). Only scenario I can think of is something like this:\n\n- Create dst FBO with 2 attachments\n- glReadBuffer(GL_COLOR_ATTACHMENT0)\n- glDrawBuffers([GL_NONE, GL_COLOR_ATTACHMENT1])\n- Blit into dst FBO\n\nSo the dst FBO has read buffer 0 but that buffer is disabled, at the same time it has only one enabled draw buffer. I don\u0027t know what the spec requires regarding the read buffer here, but you can give it a try!",
      "parentUuid": "227e3669_48066d71",
      "range": {
        "startLine": 1312,
        "startChar": 4,
        "endLine": 1314,
        "endChar": 81
      },
      "revId": "e0256bf018a31c71dd316f34c17850019dc67ca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "526b171f_a79606d9",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1314,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-10-09T15:57:34Z",
      "side": 1,
      "message": "Good idea on the test.\n\nWhen resolving with a blit we only care that there is a single draw buffer, not which attachment the draw buffer actually is:\n\n    // Vulkan requires a 1:1 relationship for multisample attachments to resolve attachments in the\n    // render pass subpass. Due to this, we currently only support using resolve attachments when\n    // there is a single draw attachment enabled.\n    ASSERT(mState.getEnabledDrawBuffers().count() \u003d\u003d 1);\n    uint32_t drawColorIndexGL \u003d static_cast\u003cuint32_t\u003e(*mState.getEnabledDrawBuffers().begin());\n\nSo, the test is able to exercise the code path and hit the bug:\n\n    [ RUN      ] FramebufferTest_ES31.MultisampleResolveWithBlitDifferentReadDrawBuffers/ES3_1_Vulkan\n    INFO: Debug.cpp:183 (insertMessage): GL performance: HIGH: GPU stall due to ReadPixels\n    ../../src/tests/test_utils/ANGLETest.cpp:63: Failure\n    RendererVk.cpp:335 (DebugUtilsMessenger): [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Validation Error: [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Object 0: handle \u003d 0x55994165c440, type \u003d VK_OBJECT_TYPE_COMMAND_BUFFER; | MessageID \u003d 0x4dae5635 | Submitted command buffer expects VkImage 0x610000000061[] (subresource: aspectMask 0x1 array layer 0, mip level 0) to be in layout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL--instead, current layout is VK_IMAGE_LAYOUT_UNDEFINED.\n\n\nUsing onImageRenderPassWrite() on the draw RT makes it pass.   Good catch.",
      "parentUuid": "d466c345_efaba263",
      "range": {
        "startLine": 1312,
        "startChar": 4,
        "endLine": 1314,
        "endChar": 81
      },
      "revId": "e0256bf018a31c71dd316f34c17850019dc67ca2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}