{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d11e7a92_9b978b9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-05-20T18:23:23Z",
      "side": 1,
      "message": "PTAL, ideas on how to test this better?",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "474ddf41_b84ac147",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-20T18:57:51Z",
      "side": 1,
      "message": "One approach could be creating a new angle::OrderedHashMap which uses absl::btree_map:\n\nhttps://abseil.io/docs/cpp/guides/container#hash-tables\n\u003e B-tree Ordered Containers\n\u003e The Abseil container library contains ordered containers generally adhering to the STL container API contract, but implemented using (generally more efficient) B-trees rather than binary trees (as used in std::map et al):\n\u003e \n\u003e - absl::btree_map\n\u003e - absl::btree_set\n\u003e - absl::btree_multimap\n\u003e - absl::btree_multiset\n\u003e \n\u003e These ordered containers are designed to be more efficient replacements for std::map and std::set in most cases. Specifically, they provide several advantages over the ordered std:: containers:\n\u003e \n\u003e - Provide lower memory overhead in most cases than their STL equivalents.\n\u003e - Are generally more cache friendly (and hence faster) than their STL equivalents.\n\u003e - Provide C++11 support for C++17 mechanisms such as try_emplace().\n\u003e - Support heterogeneous lookup.",
      "parentUuid": "d11e7a92_9b978b9e",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7b9818a_f0f95395",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-05-20T19:49:27Z",
      "side": 1,
      "message": "Nice, LGTM",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3520b41_dc7c3b94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-05-21T16:30:32Z",
      "side": 1,
      "message": "Using those maps would probably fix the issue too.  Still not really sure how to create a test that fails with the old path without comparing a program key with a hard-coded value that may change if we make changes to the Program class.",
      "parentUuid": "474ddf41_b84ac147",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41c9fbde_bf64d1b4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-05-21T17:27:20Z",
      "side": 1,
      "message": "\u003e Still not really sure how to create a test that fails with the old path without comparing a program key with a hard-coded value that may change if we make changes to the Program class.\n\nAh, yeah, this is a tough one.   I wonder if there\u0027s a way to enable the program counters for the ANGLE traces to make sure we\u0027re hitting the various caches correctly.   Probably outside of the scope of this change.\n\nFor now, your best bet is to ask ARM (I think they reported it) how they were hitting the scenario in the first place so it can at least be manually verified.",
      "parentUuid": "b3520b41_dc7c3b94",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df0f1a68_323d272d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-05-21T19:28:45Z",
      "side": 1,
      "message": "Sunny: I think this should fix the blob cache misses in ANGLE but I can\u0027t confirm locally.",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ccb4b01_0f6eb0f4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-05-21T19:28:45Z",
      "side": 1,
      "message": "We do have tests that verify cache hits for program binaries and blob cache stuff. I\u0027m guessing it may require completely reloading ANGLE\u0027s .so to potentially generate a different ordering.",
      "parentUuid": "41c9fbde_bf64d1b4",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6366b16e_8c7dc564",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1323708
      },
      "writtenOn": "2021-05-22T00:19:55Z",
      "side": 1,
      "message": "yes, it works for me. The total caches never increase now",
      "parentUuid": "df0f1a68_323d272d",
      "revId": "17c75cc9c25177c60556eea1565764965bf715d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}