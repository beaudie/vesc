{
  "comments": [
    {
      "key": {
        "uuid": "eee5e08f_9732a5a4",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 15
      },
      "lineNbr": 376,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "mGeometryShaderInputPrimitiveType must be set otherwise we can error out.\n\n\u003e The geometry shader object in a program must declare this input primitive layout\n\nWhere is this check? I can\u0027t find it in ParseContext nor Compiler. Ensuring we have the input primitive type makes it so we can guarantee all arrays are correctly sized, and removes the need for the changes to ValidateVaryingLocations",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9946dc8c_745a1dfa",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 15
      },
      "lineNbr": 376,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "According to the SPEC of OES_geometry_shader, missing input primitive layout is a link error not a compile error:\n\nChange bullet list describing reasons for link failure below the LinkProgram command on p. 70:\n* \u003cprogram\u003e contains objects to form a geometry shader (see section 11.1gs), and\n- \u003cprogram\u003e is not separable and contains no objects to form a\n  vertex shader; or\n- the input primitive type, output primitive type, or maximum output\n  vertex count is not specified in the compiled geometry shader\n  object.\n\nSection 11.1gs.1, Geometry Shader Input Primitives\nA program will fail to link if the input primitive type is not specified by the geometry shader object attached to the program. \n\nSo now I won\u0027t treat missing input primitive declaration as a compile error.\n\nI have verified a GS without input primitive declaration can compile on Intel, Nvidia and AMD OpenGL drivers.\n\nI believe it is the same as lack of local_size_x in the compute shader, as currently it is a link error not a compile error in ANGLE.",
      "parentUuid": "eee5e08f_9732a5a4",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80295966_73c32be3",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1803,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-10T02:50:14Z",
      "side": 1,
      "message": "According to SPEC, the unsized array inputs cannot be sized if there isn\u0027t a valid input primitive declaration.",
      "range": {
        "startLine": 1803,
        "startChar": 14,
        "endLine": 1803,
        "endChar": 63
      },
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72351719_10e9e57b",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1803,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "I don\u0027t think we need to handle the implicit sizing of unsized varyings here. The rest of the code cannot rely on having sized symbols for unsized varyings because it is valid to create a symbol without having define the primitive topology. Better keep all symbols for unsized varyings as unsized arrays.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb30670_b97f0b4e",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1803,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "According to SPEC:\n[4.4.1.gs]\nAll geometry shader input unsized array declarations will be sized by an earlier input primitive layout qualifier, when present\n\nSo once we meet a valid input primitive declaration, all these unsized array inputs should have size.\n\nIt is more convenient to set size for them here, because we no longer treat the unsized array inputs in GS as a special case in the following situations:\n1. Array-out-of-bound checks\n2. Calling length function\n\nFor the unsized input declarations declared before the input primitive declaration, I can only set size for them after parsing, but all the symbols of them can be set sizes here. I do this also because we can avoid always treating the unsized input declarations in GS as a special case in the following processes. e.g. CollectVariables",
      "parentUuid": "72351719_10e9e57b",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f175df1b_f76d69c6",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2390,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "Likewise we can avoid setting the array size here.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecfe85c1_88c43113",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 2390,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "Here we handle the unsized inputs declared after the input primitive declaration. We can set size for them as we have known a valid input primitive.",
      "parentUuid": "f175df1b_f76d69c6",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb9a6244_a3119d48",
        "filename": "src/compiler/translator/ParseContext.cpp",
        "patchSetId": 15
      },
      "lineNbr": 5620,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "The following pseudo-code should be valid but will cause an error to be generated\n\n in vec4 foo[];\n layout(triangles) in;\n int bar() {\n   return foo.length();\n }\n\nI suggest we do the following:\n\n else if (is unsized \u0026\u0026 is geometry shader input) {\n   if (has input primitive topology) {\n     return CreateConstantNode(input primitive topology size);\n   } else {\n     error\n     return CreateZeroNode..\n   }\n }\n\nedit: ah, that works because of the sizing of symbols. Still not a fan of it so I\u0027m not sure how to proceed.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc05b687_efbfea89",
        "filename": "src/compiler/translator/ParseContext.h",
        "patchSetId": 15
      },
      "lineNbr": 611,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "nit: weird formatting, I think putting the comment before the member variable and git cl format will fix it.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c7e1765_46ea3cd9",
        "filename": "src/compiler/translator/ParseContext.h",
        "patchSetId": 15
      },
      "lineNbr": 611,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc05b687_efbfea89",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd8d83a2_a457ae0b",
        "filename": "src/compiler/translator/ValidateVaryingLocations.cpp",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "Why are geometry shaders treated separately? At this point in the compilation the array size should have been set from the primitive topology so the previous version of ValidateVaryingLocations should work.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b89c107_28b3d0f0",
        "filename": "src/compiler/translator/ValidateVaryingLocations.cpp",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "According to SPEC, the array size of geometry shader inputs are ignored when handling locations:\n\n[EXT_shader_io_blocks SPEC Chapter 4.4.1 Input Layout Qualifiers]\nThe following language describes how many locations are consumed by a given type.  However, geometry shader inputs, tessellation control shader inputs and outputs, and tessellation evaluation inputs all have an additional level of arrayness relative to other shader inputs and outputs. This outer array level is removed from the type before considering how many locations the type consumes.\n\nSo we should ignore the outer array size of the geometry shader when checking locations.",
      "parentUuid": "fd8d83a2_a457ae0b",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9767660_b75dd6a5",
        "filename": "src/compiler/translator/ValidateVaryingLocations.cpp",
        "patchSetId": 15
      },
      "lineNbr": 45,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "Array-of-arrays cannot be an input of any shaders:\n[EXT_geometry_shader SPEC]\nissues \n(5) Are arrays supported as shader inputs and outputs\nRESOLVED: No. In several places in the tessellation and geometry API\nlanguage based on GL 4.4, it says that \"the OpenGL ES Shading Language\ndoesn\u0027t support multi-dimensional arrays\" and restricts declarations of\ninputs and outputs which are array members to blocks themselves declared\nas arrays.",
      "range": {
        "startLine": 45,
        "startChar": 8,
        "endLine": 45,
        "endChar": 90
      },
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2137e607_971a940c",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 15
      },
      "lineNbr": 753,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "This is really only allowed by the geometry shader extension. We could check for it in parseSingleArrayDeclaration.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00bea552_0f361810",
        "filename": "src/compiler/translator/glslang.y",
        "patchSetId": 15
      },
      "lineNbr": 753,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "It is done in:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/650211/16/src/compiler/translator/ParseContext.cpp#2403\n\nI have also added a test \"UnsizedInputs\" in ShaderValidation_test.cpp to verify this.",
      "parentUuid": "2137e607_971a940c",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befd95f2_5eb4be51",
        "filename": "src/tests/compiler_tests/CollectVariables_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1306,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "did you mean to make one of texcoord1 and texcoord2 sized? Right now they are the same (up to the location)",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a2822f6_c4428505",
        "filename": "src/tests/compiler_tests/CollectVariables_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1306,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "According to shader_io_blocks SPEC (chapter 4.4.1), both texcoord1 and texcoord2 should consume 1 location (not 3).",
      "parentUuid": "befd95f2_5eb4be51",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "700c7d7a_3e0b4997",
        "filename": "src/tests/compiler_tests/CollectVariables_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1342,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "after",
      "range": {
        "startLine": 1342,
        "startChar": 35,
        "endLine": 1342,
        "endChar": 41
      },
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e62a3c6_4825067f",
        "filename": "src/tests/compiler_tests/CollectVariables_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1342,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "700c7d7a_3e0b4997",
      "range": {
        "startLine": 1342,
        "startChar": 35,
        "endLine": 1342,
        "endChar": 41
      },
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bbbb651_eb3d4cb2",
        "filename": "src/tests/compiler_tests/GeometryShader_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1295,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "nit: an input primitive must always be present, can you add it at the end of the shaders?",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbaa90e7_b2508667",
        "filename": "src/tests/compiler_tests/GeometryShader_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1295,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "I can add an input primitive declaration at the end of the shaders, however a GS without input primitive declaration can pass compilation according to SPEC.",
      "parentUuid": "5bbbb651_eb3d4cb2",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ec1148c_be08fe15",
        "filename": "src/tests/compiler_tests/GeometryShader_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1333,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "ditto.",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0361543c_9b13e277",
        "filename": "src/tests/compiler_tests/GeometryShader_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1523,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-10-10T16:13:45Z",
      "side": 1,
      "message": "Let\u0027s have a compile failure test for unsized array outputs",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d938755c_4dd27dee",
        "filename": "src/tests/compiler_tests/GeometryShader_test.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1523,
      "author": {
        "id": 1161747
      },
      "writtenOn": "2017-10-11T08:52:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0361543c_9b13e277",
      "revId": "cdcc014cc00d7288f029dc909ff4bbdfbb6816ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}