{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f1a0b551_4cbe5660",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "Awesome work Alexey figuring out how to translate this.\n\nlgtm - couple of small questions.",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "778307b8_45c88adb",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "Are these invariants enforced by the frontend, and is that why it\u0027s safe to guard this logic with an ASSERT below?",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af517310_a2e51907",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-04-21T21:52:14Z",
      "side": 1,
      "message": "Yes, `TParseContext::checkInterpolationFS` should enforce this.",
      "parentUuid": "778307b8_45c88adb",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20b88dec_c652beda",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 84,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T21:56:38Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "af517310_a2e51907",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4618762f_0037a0d7",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "From the comment in the header, my understanding is that this takes all regular uses of interpolated variables and wraps them in explicit calls to interpolateCenter, interpolateCentroid, etc. It ignores variables which already have existing calls to those interpolation functions. Do I understand this correctly? If so is it possible to add a comment describing the shader source before and after this transformation?",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "744c1c33_54f81dc3",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-04-21T21:52:14Z",
      "side": 1,
      "message": "\u003e Do I understand this correctly?\n\nYes. A very short example is at L280-284.",
      "parentUuid": "4618762f_0037a0d7",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1443f5f_c00fe87d",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T21:56:38Z",
      "side": 1,
      "message": "Thanks, I see - that seems fine.",
      "parentUuid": "744c1c33_54f81dc3",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2294e9e2_7de8730a",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "Could you give a brief example of which constructs are being skipped for wrapping here? For example is this ignoring arguments inside function declarations?",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e18f064_2c58a486",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-04-21T21:52:14Z",
      "side": 1,
      "message": "All symbols that were not previously marked as interpolants are skipped at the beginning of this function. The frontend validation ensures that only varying inputs are accepted as interpolation function arguments. Given these restrictions, only root-level input varying declarations should be reachable by this line and they must not be wrapped.",
      "parentUuid": "2294e9e2_7de8730a",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33665b38_ce09c0cf",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 152,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T21:56:38Z",
      "side": 1,
      "message": "That additional detail would be great as a comment. Would you add it?",
      "parentUuid": "2e18f064_2c58a486",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dce5349a_b78aea6e",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "Which extension specification defines interpolateAtCenter? OES_shader_multisample_interpolation only defines interpolateAtCentroid, interpolateAtSample and interpolateAtOffset.",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b008dcd_02b425c2",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-04-21T21:52:14Z",
      "side": 1,
      "message": "Unlike GLSL, `metal::interpolant` variables cannot be used directly. So a \"default\" (pixel-center) interpolated input value is obtained in MSL using a dedicated interpolation function.\n\nTo keep AST valid and to avoid using the deprecated `EOpCallInternalRawFunction`, this Metal-only function is added to `builtin_function_declarations.txt`.",
      "parentUuid": "dce5349a_b78aea6e",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59a6fbfd_0429f8cd",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.cpp",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T21:56:38Z",
      "side": 1,
      "message": "I see. If it won\u0027t add too much noise to the code in your opinion, would you just add that text verbatim here as a comment?",
      "parentUuid": "0b008dcd_02b425c2",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d11fc70b_60080114",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T20:17:09Z",
      "side": 1,
      "message": "Just clarifying - gl_SampleID is only implicitly defined when it\u0027s needed? Want to confirm that GPU register pressure isn\u0027t artificially increaed all the time.",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "769e84e3_cda40dc4",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2023-04-21T21:52:14Z",
      "side": 1,
      "message": "Yes. This flag is set only if all these conditions are true simultaneously:\n- the original fragment shader has an input with a `sample` qualifier;\n- the input is used with an explicit interpolation function;\n- the input is used directly.",
      "parentUuid": "d11fc70b_60080114",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06707a40_747cca71",
        "filename": "src/compiler/translator/TranslatorMetalDirect/RewriteInterpolants.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-04-21T21:56:38Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "769e84e3_cda40dc4",
      "revId": "8d560878936c93b9ebf2258b25f49e91e9ee658b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}