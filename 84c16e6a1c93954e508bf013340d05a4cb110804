{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9d865c57_5b1b1281",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 18,
        "startChar": 52,
        "endLine": 18,
        "endChar": 59
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d254cc2_8d16e481",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "Can you add the commands for how you\u0027re \"modifying\" the ToT commit?",
      "range": {
        "startLine": 17,
        "startChar": 61,
        "endLine": 18,
        "endChar": 59
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ea780a6_cecd3cac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-08-19T03:13:37Z",
      "side": 1,
      "message": "I\u0027ll update this CL with an example of what the generated sequence looks like vs what the app sent down, but wanted to start the discussion on a couple points.",
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "189f1bb4_65b2bd6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-19T11:21:28Z",
      "side": 1,
      "message": "Nice stuff Cody.",
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98b4560f_622f21fa",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4709,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-08-19T03:13:37Z",
      "side": 1,
      "message": "Debatable whether this makes sense, to only serialize source when capture is enabled.  Since we can enable capture via GN args, there could be program binaries that would still be submitted given their format is still compatible.  Locally I\u0027ve been changing ANGLE_COMMIT_HASH which changes our binary format, so new binaries are created.\n\nWould there be big push back to enabling this all the time?",
      "range": {
        "startLine": 4709,
        "startChar": 19,
        "endLine": 4709,
        "endChar": 79
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08dd412c_bbb0d990",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4709,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-19T11:21:28Z",
      "side": 1,
      "message": "is context ever nullptr? seems unlikely.",
      "range": {
        "startLine": 4709,
        "startChar": 8,
        "endLine": 4709,
        "endChar": 16
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e121c918_ba955f95",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4709,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-19T11:21:28Z",
      "side": 1,
      "message": "Just embed this bit into MemoryProgramCache::ComputeHash. Strong push back on enabling this everywhere because of the limited cache space on Android.",
      "parentUuid": "98b4560f_622f21fa",
      "range": {
        "startLine": 4709,
        "startChar": 19,
        "endLine": 4709,
        "endChar": 79
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71189c00_c3669a5b",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4724,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "This can be simplified, since we only care about recreating the linked program:\n\n        ProgramExecutable \u0026getExecutable \u003d getExecutable();\n        for (ShaderType shaderType : getExecutable.getLinkedShaderStages())\n        {\n            gl::Shader *shader \u003d getAttachedShader(shaderType);\n            ASSERT(shader);\n            stream.writeString(shader-\u003egetSourceString());\n        }\n        \nA similar update can be made to Program::deserialize(), since the ProgramExecutable knows which shader stages are linked by the end of deserialize().\n\nThere also aren\u0027t any worries about getLinkedShaderStages() returning compute vs draw stages, since Programs can only be one or the other, never both.",
      "range": {
        "startLine": 4712,
        "startChar": 0,
        "endLine": 4724,
        "endChar": 9
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dc01820_27425a43",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1724,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-08-19T03:13:37Z",
      "side": 1,
      "message": "Commented this out locally so this will compile.  As the comment says, not clear why we need this.  In the ProgramBinary case (i.e. not the MEC case), we get the state by calling context-\u003egetState() [ref1] which returns a const gl:State\u0026.  We could potentially add a context-\u003egetStateForCapture() which would return a mutable state, but it isn\u0027t clear to me why we need to modify the state passed in.",
      "range": {
        "startLine": 1724,
        "startChar": 0,
        "endLine": 1724,
        "endChar": 57
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95131350_0c279254",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1724,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-19T11:21:28Z",
      "side": 1,
      "message": "The State parameter should always be the MEC replay state, not the API state. The gl::Program *program itself is the only thing we pull from the API state. Maybe turn the replayState into a nullable pointer and ignore the checks when not in MEC.\n\nWe need this to ensure the code for the setup function can track what we set in MEC so it can restore the state after updating uniforms properly.",
      "parentUuid": "7dc01820_27425a43",
      "range": {
        "startLine": 1724,
        "startChar": 0,
        "endLine": 1724,
        "endChar": 57
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd0a180e_2297f45e",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2238,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "Maybe I\u0027m missing how this \u0027tempShaderID\u0027 is being used, but it looks like this is reusing the same shader ID for every shader stage in the program.\n\n\u003e If a shader object to be deleted is attached to a program object, it will be flagged for deletion, but it will not be deleted until it is no longer attached to any program object, for any rendering context (i.e., it must be detached from wherever it was attached before it will be deleted).\n\nIn this case, the shader is not being detached, since the program has not been linked yet, so the shader ID cannot be recycled yet.",
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f29d7959_6dc52426",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4560,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-08-19T03:13:37Z",
      "side": 1,
      "message": "ref",
      "range": {
        "startLine": 4560,
        "startChar": 35,
        "endLine": 4560,
        "endChar": 54
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "283e3703_9eff8c34",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4560,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-19T11:21:28Z",
      "side": 1,
      "message": "Try nullptr here after changing this to a pointer.",
      "parentUuid": "f29d7959_6dc52426",
      "range": {
        "startLine": 4560,
        "startChar": 35,
        "endLine": 4560,
        "endChar": 54
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14bb4c83_61af8a64",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4833,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "ref1",
      "range": {
        "startLine": 4832,
        "startChar": 0,
        "endLine": 4833,
        "endChar": 27
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20b13c34_94e351dd",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4836,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "We just got back a valid Shader* from getAttachedShader() above [ref1].   How can we not have an attached shader here?\n\nAdditionally, GenerateLinkedProgram() never generates a glDetachShader() call, so it should still be attached.   Where is the shader detached?",
      "range": {
        "startLine": 4835,
        "startChar": 0,
        "endLine": 4836,
        "endChar": 56
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a103f7d_61a4431f",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4868,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "nit: The Shader is being created, it\u0027s just being immediately deleted.",
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4106b5d0_5183ca8d",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4884,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-08-19T18:00:32Z",
      "side": 1,
      "message": "Ditto above.\n\nGenerateLinkedProgram() never generates a glDetachShader() call, so it should still be attached.",
      "range": {
        "startLine": 4883,
        "startChar": 0,
        "endLine": 4884,
        "endChar": 56
      },
      "revId": "84c16e6a1c93954e508bf013340d05a4cb110804",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}