{
  "comments": [
    {
      "key": {
        "uuid": "40e3e027_082cecb7",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "nit: increment",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76c784e9_167a9988",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "will do.",
      "parentUuid": "40e3e027_082cecb7",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dfae1f4_405a8998",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "naming nit: SH_DETERMINE_IF_EARLY_FRAGMENT_TESTS_ALLOWED",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 60
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be18bbb5_228c5d7d",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "This is not just \"determine\" though to do optimization or not, it is actually producing the optimization by emitting the necessary GLSL primitives. I think my original name reflects the exact use here.",
      "parentUuid": "7dfae1f4_405a8998",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 60
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1baeb6d1_566f8b89",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T17:33:55Z",
      "side": 1,
      "message": "It doesn\u0027t. The optimization is controlled via ANGLE, not the translator.",
      "parentUuid": "be18bbb5_228c5d7d",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 60
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4965ae60_7f60350e",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:51:11Z",
      "side": 1,
      "message": "See Compiler.cpp line 1506 where it emits the optimization.\nMajority of use cases are that context wont need to do anything. Only in rare case that alphan to sample coverage is enabled, context code will need to revert the optimization.\nThis flag basically tells translater that if you see opportunity to do this optimization, please do it.",
      "parentUuid": "1baeb6d1_566f8b89",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 60
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6f01cbe_84eecb3f",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 340,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T17:54:06Z",
      "side": 1,
      "message": "My bad. I see the code now.",
      "parentUuid": "4965ae60_7f60350e",
      "range": {
        "startLine": 340,
        "startChar": 23,
        "endLine": 340,
        "endChar": 60
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e6ef333_668f3ca5",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 672,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "naming nit: CanUseEarlyFragmentTestsOptimization",
      "range": {
        "startLine": 672,
        "startChar": 5,
        "endLine": 672,
        "endChar": 38
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f8cd5a0_b3f53712",
        "filename": "include/GLSLANG/ShaderLang.h",
        "patchSetId": 4
      },
      "lineNbr": 672,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "Same as above",
      "parentUuid": "0e6ef333_668f3ca5",
      "range": {
        "startLine": 672,
        "startChar": 5,
        "endLine": 672,
        "endChar": 38
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ad9fd11_407d8fcc",
        "filename": "src/compiler/translator/tree_ops/EarlyFragmentTestsOptimization.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "nit: The format is typically:\n\n    // TODO(ldap)\nor\n    // TODO(http://anglebug.com/####): description\n\nSo something like:\n\n    // TODO(cclao): add 3.1 support if needed",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a191aa1_fa2a4081",
        "filename": "src/compiler/translator/tree_ops/EarlyFragmentTestsOptimization.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T03:14:46Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "2ad9fd11_407d8fcc",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe7cf04_ff8b3ce4",
        "filename": "src/compiler/translator/tree_ops/EarlyFragmentTestsOptimization.cpp",
        "patchSetId": 4
      },
      "lineNbr": 76,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "needs to have a bug link. we should probably update our coding standard doc for this.",
      "parentUuid": "6a191aa1_fa2a4081",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecb1e92b_c3917a9e",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "You shouldn\u0027t need to hash this. It\u0027s not a part of the inputs to a shader. Hashing features is something we should do at some point however we haven\u0027t got the structure of the in place and you haven\u0027t exposed this as FeatureVk.",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b43a9c2_312c878e",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "I think hash is needed. Otherwise, people play with this optimization on/off for performance testing will hit the exact same confusion like I had over the past weekend.",
      "parentUuid": "ecb1e92b_c3917a9e",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "919f455b_14d975c1",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T17:33:55Z",
      "side": 1,
      "message": "I don\u0027t think so. The bug is more to do with how the hash is computed on developer machines.",
      "parentUuid": "6b43a9c2_312c878e",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eae5a8a_6e126057",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:51:11Z",
      "side": 1,
      "message": "True that end user will not play with the toggle. But adding this one boolean saves developers tons of time waste, given that people outside google may play with it too.",
      "parentUuid": "919f455b_14d975c1",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc4a74c_dde10249",
        "filename": "src/libANGLE/MemoryProgramCache.cpp",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T17:54:06Z",
      "side": 1,
      "message": "I think we should fix the underlying bug. Instead of adding layers of workarounds.",
      "parentUuid": "6eae5a8a_6e126057",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 126,
        "endChar": 82
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac22ff28_98b15dd8",
        "filename": "src/libANGLE/Shader.cpp",
        "patchSetId": 4
      },
      "lineNbr": 494,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "naming nit here as well, using \u0027can\u0027",
      "range": {
        "startLine": 494,
        "startChar": 19,
        "endLine": 494,
        "endChar": 51
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "156087e7_497b965e",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 4
      },
      "lineNbr": 768,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "again shouldn\u0027t need this according to our conversations with Chris.",
      "range": {
        "startLine": 768,
        "startChar": 3,
        "endLine": 768,
        "endChar": 94
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "709b60b1_99a9a64f",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1059,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "It looks like this can be a const reference since it\u0027s not being modified anywhere.",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09f246ab_a03f23ca",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "This should be added to GlslangWrapperVk::ResetGlslangProgramInterfaceInfo(), so it\u0027s initialized to a known value.\n\nThis likely breaks your new check in ProgramVk::link() though, since ResetGlslangProgramInterfaceInfo() is called by ProgramVk::rest() during ProgramVk::link().   That check is broken a couple different ways already though:\n1.) ProgramVk::link() is checking mGlslangProgramInterfaceInfo.removeEarlyFragmentTests for a value that\u0027s currently random (since it\u0027s never initialized to anything).\n2.) The caller doesn\u0027t need to follow every glEnable() with glLinkProgram(), so this won\u0027t re-link the shaders if they do 2 line mode draws with a toggle of GL_SAMPLE_ALPHA_TO_COVERAGE in between.\n- I don\u0027t have a good answer for this that invovles a single mExecutable.mLineRasterProgramInfo.   I fear we need a mExecutable.mLineRasterProgramInfoEarlyFragmentTestsRemoved to handle that.",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab58aaca_d399a99d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T03:14:46Z",
      "side": 1,
      "message": "It don\u0027t need to be initialized. It is always set (in programVK.cpp line 300) before been used.",
      "parentUuid": "09f246ab_a03f23ca",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca3a89ba_dec4f181",
        "filename": "src/libANGLE/renderer/metal/mtl_glslang_utils.mm",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "Oh, this is why it\u0027s a pointer.\n\nSince we are optimizing for vulkan\u0027s performance and metal is lower on the priority list, I\u0027d prefer we pay the price here and instantiate a GlslangProgramInterfaceInfo to pass into GlslangGetShaderSpirvCode() rather than having to do the extra pointer check in SpirvTransformer::transformExecutionMode() which affects vulkan.",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb8c51c5_4abbe63e",
        "filename": "src/libANGLE/renderer/metal/mtl_glslang_utils.mm",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "ca3a89ba_dec4f181",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab3eb20_3f7586fd",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2603,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "Can you do something like DIRTY_BIT_PROGRAM_EXECUTABLE does with DIRTY_BIT_TEXTURE_BINDINGS below?\n\n                ASSERT(gl::State::DIRTY_BIT_TEXTURE_BINDINGS \u003e\n                       gl::State::DIRTY_BIT_PROGRAM_EXECUTABLE);\n                iter.setLaterBit(gl::State::DIRTY_BIT_TEXTURE_BINDINGS);\n\nIt shouldn\u0027t require any re-ordering of the enum since DIRTY_BIT_PROGRAM_EXECUTABLE is already after DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED.   The handler for DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED would look like:\n\n            case gl::State::DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED:\n                mGraphicsPipelineDesc-\u003eupdateAlphaToCoverageEnable(\n                    \u0026mGraphicsPipelineTransition, glState.isSampleAlphaToCoverageEnabled());\n                ASSERT(gl::State::DIRTY_BIT_PROGRAM_EXECUTABLE \u003e\n                       gl::State::DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED);\n                iter.setLaterBit(gl::State::DIRTY_BIT_PROGRAM_EXECUTABLE);\n                break;",
      "range": {
        "startLine": 2598,
        "startChar": 0,
        "endLine": 2603,
        "endChar": 5
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e4308a2_feb9cde7",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2603,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T03:14:46Z",
      "side": 1,
      "message": "Thanks. will do.",
      "parentUuid": "1ab3eb20_3f7586fd",
      "range": {
        "startLine": 2598,
        "startChar": 0,
        "endLine": 2603,
        "endChar": 5
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caf41303_d9b33754",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2603,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "I\u0027m pretty sure we confirmed with Chris in the ddoc that this shouldn\u0027t be necessary.",
      "parentUuid": "0e4308a2_feb9cde7",
      "range": {
        "startLine": 2598,
        "startChar": 0,
        "endLine": 2603,
        "endChar": 5
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89b690ed_e8eb0b31",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2603,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "This is required per spec (and design doc as well). I have clarified with Jamie over chat now.",
      "parentUuid": "caf41303_d9b33754",
      "range": {
        "startLine": 2598,
        "startChar": 0,
        "endLine": 2603,
        "endChar": 5
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08ad351d_a58c04a8",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2603,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T17:32:33Z",
      "side": 1,
      "message": "Just want to confirm this with Chris. If so we can probably clean up the dirty bits code.",
      "parentUuid": "89b690ed_e8eb0b31",
      "range": {
        "startLine": 2598,
        "startChar": 0,
        "endLine": 2603,
        "endChar": 5
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa31ce9_87af485e",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-07T04:41:12Z",
      "side": 1,
      "message": "Line raster emulation and early-fragment-tests removed are orthogonal features. At some point something scalable can be created, but for now something like:\n\n    ProgramInfo mProgramInfo[2][2];  // with proper names and enums\n\nshould work. Early-fragment-tests could be removed, and then specialization constant used to emulate lines, there\u0027s no reason why that wouldn\u0027t work.",
      "range": {
        "startLine": 197,
        "startChar": 0,
        "endLine": 199,
        "endChar": 61
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b17f61f6_54b1a17e",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T01:39:23Z",
      "side": 1,
      "message": "How does this handle the case where they toggle GL_SAMPLE_ALPHA_TO_COVERAGE between 2 line mode draws?   It doesn\u0027t look like the caller needs to glLinkProgram() whenever toggling GL_SAMPLE_ALPHA_TO_COVERAGE with glEnable().\n\nCan you write an end2end test that does that without a linkProgram() following the glEnable() that toggles GL_SAMPLE_ALPHA_TO_COVERAGE?",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50333a2a_64d93153",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-04-07T02:04:48Z",
      "side": 1,
      "message": "Oops, looks like you guys were already chatting about this and I missed those other comments.",
      "parentUuid": "b17f61f6_54b1a17e",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a275619_5bfc4c09",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T03:14:46Z",
      "side": 1,
      "message": "Yea, I think maybeI should just add mLineRasterProgramInfoEarlyFragmentTestsRemoved. And these rare programinfo objects can be a pointer to be lazily allocated.",
      "parentUuid": "50333a2a_64d93153",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4614760_ee3b4723",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T04:05:03Z",
      "side": 1,
      "message": "Thought about this a bit more. I think you are right. Otherwise the link will not triggered and shaderInfo still have stale information. The correct way to remove the optimization is in initProgram() call. I make a local copy of spirvBlob and replace the opcode with NOP and then call vk::InitShaderAndSerial(). That way I don\u0027t need to touch SpirvTransformer code at all, implementation might be simpler as well.",
      "parentUuid": "9a275619_5bfc4c09",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70dcd179_789aa092",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-07T04:41:12Z",
      "side": 1,
      "message": "I fell in this pitfall too, but NOP is only allowed inside function bodies.\n\nAlso, you shouldn\u0027t really need to do this if you allow all combination of options (line raster vs early-fragment-tests) to work.",
      "parentUuid": "f4614760_ee3b4723",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36e5dbb8_59e1e729",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-07T05:13:53Z",
      "side": 1,
      "message": "About doing it in initProgram(), yes that\u0027s the right approach. You just need to call TransformSpirvCode to redo the transformation (given the \"default\" program\u0027s SPIR-V) and use that.\n\nI recommend doing the full transformation (instead of a very simple one that just removes that single instruction), to avoid conflict with anglebug.com/4513.",
      "parentUuid": "70dcd179_789aa092",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c316c538_71ba51ec",
        "filename": "src/libANGLE/renderer/vulkan/ProgramVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 298,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "+1, we can do it in the spir-v so should be easy to disable when we enable line raster. You shouldn\u0027t need a separate executable for this.",
      "parentUuid": "36e5dbb8_59e1e729",
      "range": {
        "startLine": 295,
        "startChar": 0,
        "endLine": 298,
        "endChar": 62
      },
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d49eee2_b13db2ee",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-04-07T04:41:12Z",
      "side": 1,
      "message": "Why not on WebGL?",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13ebbcb9_d83721d1",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-04-07T16:52:31Z",
      "side": 1,
      "message": "+1, can remove this.",
      "parentUuid": "0d49eee2_b13db2ee",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c134beae_34976500",
        "filename": "src/libANGLE/renderer/vulkan/ShaderVk.cpp",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-04-07T17:19:05Z",
      "side": 1,
      "message": "This just for me to limit risk exposure. There is no other reason. Sure, I can remove the if check",
      "parentUuid": "13ebbcb9_d83721d1",
      "revId": "22ca326f50850b97ae979c989adba326e15b92e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}