{
  "comments": [
    {
      "key": {
        "uuid": "68df071f_0698e44c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-12T14:53:52Z",
      "side": 1,
      "message": "This seems like it isn\u0027t needed. updateColorAttachment should find a new serial and force an update to the cache.",
      "range": {
        "startLine": 1216,
        "startChar": 24,
        "endLine": 1216,
        "endChar": 48
      },
      "revId": "c1a9bf42854627f0637a94379218a7af04d601d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab696571_a637957b",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1216,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-06-12T18:09:49Z",
      "side": 1,
      "message": "the problem is not with the cache getting a new entry, it is that the old framebuffervk object is not removed from the cache. On subsequent draw with the older attachment, we retrieve the framebuffervk object and since it is in the cache we assume it is correct/valid and try to draw with it. This is the validation error we get in such a scenario \"VkImageView 0x9fe8bd0000000038[] is not a valid VkImageView handle\" -\n\nNote: Google Test filter \u003d ImageRespecificationTest.ImageTarget2DOESSwitch*Vulkan\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from ImageRespecificationTest\n[ RUN      ] ImageRespecificationTest.ImageTarget2DOESSwitch/ES3_Vulkan\n../../src/tests/test_utils/ANGLETest.cpp(60): error: DebugUtilsMessenger(307): [ VUID-VkRenderPassBeginInfo-framebuffer-parameter ] Validation Error: [ VUID-VkRenderPassBeginInfo-framebuffer-parameter ] Object 0: handle \u003d 0x9dde870000000082, type \u003d VK_OBJECT_TYPE_RENDER_PASS; Object 1: handle \u003d 0xb09e9c0000000039, type \u003d VK_OBJECT_TYPE_FRAMEBUFFER; Object 2: handle \u003d 0x9fe8bd0000000038, type \u003d VK_OBJECT_TYPE_IMAGE_VIEW; | MessageID \u003d 0xe02fa864 | vkCmdBeginRenderPass(): VkFramebuffer 0xb09e9c0000000039[] pAttachments[0] \u003d VkImageView 0x9fe8bd0000000038[] is not a valid VkImageView handle The Vulkan spec states: framebuffer must be a valid VkFramebuffer handle (https://www.khronos.org/registry/vulkan/specs/1.2-extensions/html/vkspec.html#VUID-VkRenderPassBeginInfo-framebuffer-parameter)\n                            Object: 0x9dde870000000082 (type \u003d Render Pass(18))\n                            Object: 0xb09e9c0000000039 (type \u003d Framebuffer(24))\n                            Object: 0x9fe8bd0000000038 (type \u003d Image View(14))",
      "parentUuid": "68df071f_0698e44c",
      "range": {
        "startLine": 1216,
        "startChar": 24,
        "endLine": 1216,
        "endChar": 48
      },
      "revId": "c1a9bf42854627f0637a94379218a7af04d601d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b7ade26_e7919b9e",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1216,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-06-12T20:19:26Z",
      "side": 1,
      "message": "So the root cause is that the desc does not properly describe the VkFramebuffer. If it did, it wouldn\u0027t try to pull out a bad one. I\u0027m thinking this is the same root cause as http://anglebug.com/4736. Thanks for filing that. I haven\u0027t yet downloading this and proved locally that\u0027s the case.",
      "parentUuid": "ab696571_a637957b",
      "range": {
        "startLine": 1216,
        "startChar": 24,
        "endLine": 1216,
        "endChar": 48
      },
      "revId": "c1a9bf42854627f0637a94379218a7af04d601d1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}