{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7264eef5_5d8534dc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 6612,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-17T04:49:43Z",
      "side": 1,
      "message": "Doesn\u0027t hurt to reduce the scope for now, but it smells like a bug in the tracking of `mPerLevelSubresourceUpdateFlags`.",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c97b39_71a4f008",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 6612,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-20T21:24:24Z",
      "side": 1,
      "message": "To fix this, it seems that we should also account for read accesses to the tracked levels, or maybe change the way some functions are performed.\n* For example, in the compute-based GenerateMipmap, could we use the same image level as the source for all the generated levels (instead of using the immediate level before them)?",
      "parentUuid": "7264eef5_5d8534dc",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bd9ece9_9ea4152d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 6612,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-22T15:25:56Z",
      "side": 1,
      "message": "Let\u0027s talk about it so I understand better the issue. I guess what you\u0027re saying is that because these layouts are read-write, a resource may be used in this layout in read mode, then a following write barrier would be missed (because we think the subresource is not used), right?\n\nI\u0027m a bit worried it may be possible to hit this with some other layouts too (but we can check together).\n\nIt\u0027s probably easy to fix nevertheless, like if you call `setSubresourcesWrittenSinceBarrier` (probably renamed to `accessed` instead of `written`) in `recordReadBarrier` too, then you have the right knowledge here. `isReadBarrierNecessary` itself won\u0027t use that info, but `isWriteBarrierNecessary` would.",
      "parentUuid": "01c97b39_71a4f008",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "938b9d6e_36091bc0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 9
      },
      "lineNbr": 6612,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-23T02:05:56Z",
      "side": 1,
      "message": "Yes, for example `CopyImageTestES31.ArraySelfCopyImageSubData` includes instances where different levels/layers are being copied within the same image, which could result in data hazards if the same level/layer is read and written to without barriers. Since `onImageSelfCopy()` only calls `onImageWrite()`, `recordReadBarrier()` won\u0027t be called for this part of the test.\n\nI also saw this issue for `MipmapTestES3.GenerateMipmapLargeTexture`, where it uses compute to generate mipmap. Since it generates 6 mips at a time and uses the latest mip to generate the next group, it also needs a barrier.\n\n* This draft CL tries to fix these cases: https://chromium-review.googlesource.com/c/angle/angle/+/5309435\n\nWe could also try adding the tracker to `recordReadBarrier()`, which should fix it. However, I think we should add the mip level, layer start and count for the image read accesses too.\n\nCould other layouts aside from read-write ones be affected as well?",
      "parentUuid": "5bd9ece9_9ea4152d",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0c876f0_4e493e37",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2921,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-17T04:49:43Z",
      "side": 1,
      "message": "Per our discussion, feel free to update to 128 for the benchmark that had 96 layer images, but better in a follow up",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90b1820e_9dbb5f47",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2921,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-20T21:24:24Z",
      "side": 1,
      "message": "Added CL: https://chromium-review.googlesource.com/c/angle/angle/+/5309866.",
      "parentUuid": "e0c876f0_4e493e37",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86b0edc4_546a0cdf",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2928,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-17T04:49:43Z",
      "side": 1,
      "message": "Use `gl::TexLevelArray`. No need for `kMaxTrackedLevels` (there\u0027s already `gl::IMPLEMENTATION_MAX_TEXTURE_LEVELS`)",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2275292_031ff35b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2928,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-20T21:24:24Z",
      "side": 1,
      "message": "Thanks! Done.",
      "parentUuid": "86b0edc4_546a0cdf",
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08409dd3_0082d538",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2929,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-02-17T04:49:43Z",
      "side": 1,
      "message": "Suggest `mSubresourcesWrittenSinceBarrier`. Makes it clearer what this is tracking.",
      "range": {
        "startLine": 2929,
        "startChar": 8,
        "endLine": 2929,
        "endChar": 39
      },
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06410264_2bd35765",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 9
      },
      "lineNbr": 2929,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-02-20T21:24:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08409dd3_0082d538",
      "range": {
        "startLine": 2929,
        "startChar": 8,
        "endLine": 2929,
        "endChar": 39
      },
      "revId": "a78b299f148566465f49b658f96a112b5d8ace9b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}