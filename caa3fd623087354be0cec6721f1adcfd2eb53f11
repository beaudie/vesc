{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9420d0d3_08eb13a6",
        "filename": "src/common/BinaryStream.h",
        "patchSetId": 13
      },
      "lineNbr": 102,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-05T14:24:53Z",
      "side": 1,
      "message": "Seems unnecessary if you get rid of `resizeAndCopyData` and copy directly over `.data()` (which you could pass to `readBytes()`).",
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7f1bcb6_b7086b9d",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-05T13:55:10Z",
      "side": 1,
      "message": "Should args go in `(count, data)` order to match the function name?",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfedb4db_cedf5ccf",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-05T14:24:53Z",
      "side": 1,
      "message": "Suggest adding this helper outside this class, wherever it\u0027s used. As much as possible, it\u0027s best to keep the API analogous to the corresponding std type.\n\nYou could use call `resize()` on the vector, and just copy into `.data()`, no need for this helper.",
      "parentUuid": "d7f1bcb6_b7086b9d",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cba1901c_24dac328",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-05T14:32:30Z",
      "side": 1,
      "message": "Looks like Charlie\u0027s goal might be to avoid the default initialization `resize()` would do though?",
      "parentUuid": "bfedb4db_cedf5ccf",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7782f01f_2fc805a3",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-05T14:52:49Z",
      "side": 1,
      "message": "It doesn\u0027t do that though.\n\nIgor actually split our `resize()` because:\n\n- With default init, it\u0027s slow for trivial types\n- Without default init, it\u0027s incorrect and dangerous\n\nThat\u0027s why we have `resize_maybe_value_reuse` and `resize_down` below. Incidentally, all three variants just call `resize_impl`, and the difference is just in the static_assert and clearer names.\n\nThis function is calling `resize_impl` for trivial types, that\u0027s exactly what the `resize()` function does above.",
      "parentUuid": "cba1901c_24dac328",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7324b8b3_1d439828",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-05T18:48:06Z",
      "side": 1,
      "message": "The reason I added resizeAndCopyData is exactly to avoid the static_assert. The mIdToIndexMap is not trivially constructible, so I can\u0027t use resize(count). The choice is resize(count, value), except in this case I am not setting it to the same value. What this utility function is exactly similar to resize(count, value) except initiliaze with a memcpy. The other choice is to make mIdToIndexMap trivially constructible, but that is different effort and a bit risky though (it means rely on manual initialization).\n\nSwitch the order of count/data is a good idea, will adopt in next update.",
      "parentUuid": "7782f01f_2fc805a3",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b02392ae_12cbf8dc",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 484,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-05T19:33:04Z",
      "side": 1,
      "message": "Oh, sorry I didn\u0027t notice the `is_trivially_constructible` vs `is_trivially_copyable` difference.\n\nIn this case, this is _only_ going to be used to initialize an empty vector, right?\n\nHow about calling it something like `setRawData(count, raw_data)`? Like this is overwriting the entire vector, but that\u0027s not the typical behavior of `resize`.\n\nAlso, there is a unit test file for this class, should be easy to add a few tests.",
      "parentUuid": "7324b8b3_1d439828",
      "range": {
        "startLine": 484,
        "startChar": 32,
        "endLine": 484,
        "endChar": 49
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "957ef346_015caf64",
        "filename": "src/common/FastVector.h",
        "patchSetId": 13
      },
      "lineNbr": 488,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-05T13:55:10Z",
      "side": 1,
      "message": "This seems to assume that this method would be called to just resize the vector which seems unlikely. Maybe just leave the comment be an empty string like in a few other places?",
      "range": {
        "startLine": 488,
        "startChar": 19,
        "endLine": 488,
        "endChar": 59
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "121a157d_c8d269c7",
        "filename": "src/libANGLE/renderer/vulkan/ShaderInterfaceVariableInfoMap.cpp",
        "patchSetId": 13
      },
      "lineNbr": 149,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-05T13:55:10Z",
      "side": 1,
      "message": "Maybe assert on mData.size vs xfbInfoCount here as well?",
      "range": {
        "startLine": 149,
        "startChar": 11,
        "endLine": 149,
        "endChar": 23
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "688ede13_90037b7c",
        "filename": "src/libANGLE/renderer/vulkan/spv_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 174,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-09-05T13:55:10Z",
      "side": 1,
      "message": "`unique_ptr \u0026` seems confusing and suggest the caller could modify the pointer itself?..\n\nShould the function be returning the raw XFBInterfaceVariableInfo pointer instead?",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 24
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37fb53ea_c16150ee",
        "filename": "src/libANGLE/renderer/vulkan/spv_utils.cpp",
        "patchSetId": 13
      },
      "lineNbr": 174,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-05T14:24:53Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "688ede13_90037b7c",
      "range": {
        "startLine": 174,
        "startChar": 4,
        "endLine": 174,
        "endChar": 24
      },
      "revId": "caa3fd623087354be0cec6721f1adcfd2eb53f11",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}