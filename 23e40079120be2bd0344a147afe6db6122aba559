{
  "comments": [
    {
      "key": {
        "uuid": "d7568cb7_bd532889",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-05T18:45:24Z",
      "side": 1,
      "message": "Unnecessary? Doesn\u0027t the first `SecondaryCommandBuffer::initCommand` set this?",
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30724c35_410bc1d7",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "There was (at least one) test case in end2end test that was broken w/o this b/c secondary command buffers could be \"valid\" (have a handle) without any commands actually being added to them which in the bad case was causing us to miss saving the renderPass data. I\u0027ve re-done the valid check for SecondaryCommandBuffers, though so that SecondaryCommandBuffer now has explicit init() to add pool allocator which is now used to verify \"validity\". May rework this further in the future if needed/beneficial.",
      "parentUuid": "d7568cb7_bd532889",
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "166e24cb_2217d3b5",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 264,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-05T18:37:49Z",
      "side": 1,
      "message": "can probably pass the allocator unconditionally. especially if we use it for other purposes like allocating from the vector.",
      "range": {
        "startLine": 259,
        "startChar": 0,
        "endLine": 264,
        "endChar": 6
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41faa33b_e888afbd",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 287,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-05T18:45:24Z",
      "side": 1,
      "message": "You can implement this in SecondaryCommandBuffer to avoid `#if` here. It could simply set mValid \u003d false;",
      "range": {
        "startLine": 287,
        "startChar": 31,
        "endLine": 287,
        "endChar": 44
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2803ff47_acd30dbc",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 287,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41faa33b_e888afbd",
      "range": {
        "startLine": 287,
        "startChar": 31,
        "endLine": 287,
        "endChar": 44
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "310930cb_83a82e39",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 289,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-05T18:37:49Z",
      "side": 1,
      "message": "can maybe make this release the handle to the pool allocator.",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 289,
        "endChar": 6
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f82328_a56ea4c1",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 289,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "310930cb_83a82e39",
      "range": {
        "startLine": 284,
        "startChar": 0,
        "endLine": 289,
        "endChar": 6
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe277da7_1b205345",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 491,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-05T18:37:49Z",
      "side": 1,
      "message": "as mentioned offline: using overloaded local helper methods could be a good way to remove the ifdefs.",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 491,
        "endChar": 6
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da968fbf_a872c6fc",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 491,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fe277da7_1b205345",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 491,
        "endChar": 6
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c8f1854_8903b2c0",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 503,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-05T18:45:24Z",
      "side": 1,
      "message": "Implement `end()` as no-op to avoid `#if`.",
      "range": {
        "startLine": 503,
        "startChar": 64,
        "endLine": 503,
        "endChar": 67
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "704b3908_22e18ccc",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 7
      },
      "lineNbr": 503,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c8f1854_8903b2c0",
      "range": {
        "startLine": 503,
        "startChar": 64,
        "endLine": 503,
        "endChar": 67
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d53f283b_65493412",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-05T18:45:24Z",
      "side": 1,
      "message": "Sounds like you are aware, but marking these just in case: `CommandBufferT` to avoid `#if`.\n\nPlease keep `getInsideRenderPassCommands` inline (it\u0027s also used inside another simple inline function).",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4caa1c2_7f7720d8",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 89,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done. Also made getOutSideRenderPassCommands() inline for consistency.",
      "parentUuid": "d53f283b_65493412",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 39
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dd5a8c9_7ff0403a",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-03-05T18:45:24Z",
      "side": 1,
      "message": "`CommandBufferT` to avoid `#if`",
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d112066_9b9507c8",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 7
      },
      "lineNbr": 187,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3dd5a8c9_7ff0403a",
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0328f0c6_fba8f534",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 7
      },
      "lineNbr": 433,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-05T18:37:49Z",
      "side": 1,
      "message": "per comments offline. One suggested way of solving the valid problem is to pass the allocator pointer to an init method.",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 433,
        "endChar": 35
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d855e371_05f8f5fd",
        "filename": "src/libANGLE/renderer/vulkan/SecondaryCommandBuffer.h",
        "patchSetId": 7
      },
      "lineNbr": 433,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0328f0c6_fba8f534",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 433,
        "endChar": 35
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50555b65_815578be",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-05T18:37:49Z",
      "side": 1,
      "message": "could I ask that we pass wrapper objects to the classes instead? And unbox them in the vk::SecondaryCommandBuffer class? Or optionally accept both types if we need to.",
      "range": {
        "startLine": 338,
        "startChar": 71,
        "endLine": 338,
        "endChar": 83
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "581e5a14_622b83a8",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-05T22:18:11Z",
      "side": 1,
      "message": "This is certainly possible. Right now SecondaryCommandBuffer only knows about Vulkan types and the PoolAllocator so it\u0027s more of a \"pure\" Vulkan class apart from ANGLE. We can pull in vk_wrappers.h and use the wrapper objects instead. Unwrapping at the source of the call as is currently done shields SecondaryCommandBuffer from vk_wrapper knowledge, at the expense of some extra getHandle() calls when there are multiple source points for the same command (which there\u0027s a few of but not a ton).\nUpdating SecondaryCommandBuffer and vk::CommandBuffer wrapper class to deal with wrappers in place of raw VkHandles saves some getHandle() calls at the source point. Is that a worthwhile benefit?",
      "parentUuid": "50555b65_815578be",
      "range": {
        "startLine": 338,
        "startChar": 71,
        "endLine": 338,
        "endChar": 83
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "733efa76_2c571eeb",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2019-03-06T14:59:43Z",
      "side": 1,
      "message": "I think it\u0027s worth. As ANGLE grows into ES 3.0 and 3.1 there will be more calls at the source points than there are resource usages in the Secondary class. So it\u0027ll be a net savings. Not a big thing by any means but my preference is to do the unboxing in the Secondary.",
      "parentUuid": "581e5a14_622b83a8",
      "range": {
        "startLine": 338,
        "startChar": 71,
        "endLine": 338,
        "endChar": 83
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4596555e_113ed8ce",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 338,
      "author": {
        "id": 1256245
      },
      "writtenOn": "2019-03-07T16:38:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "733efa76_2c571eeb",
      "range": {
        "startLine": 338,
        "startChar": 71,
        "endLine": 338,
        "endChar": 83
      },
      "revId": "23e40079120be2bd0344a147afe6db6122aba559",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}