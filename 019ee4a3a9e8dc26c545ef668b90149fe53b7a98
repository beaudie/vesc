{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e26cd5bd_961c2a45",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-18T17:46:22Z",
      "side": 1,
      "message": "I think you can tell VMA to do this for you instead of adding your own code path. See https://gpuopen-librariesandsdks.github.io/VulkanMemoryAllocator/html/choosing_memory_type.html at the bottom of the page \"Dedicated allocations\". That way, all image memory allocation still comes from VMA and all stats is still valid. You also avoid other code changes in this CL as well.",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ccadf3d_5a01dc4f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-04-20T00:01:09Z",
      "side": 1,
      "message": "I used `VMA_ALLOCATION_CREATE_DEDICATED_MEMORY_BIT` to create a dedicated allocation. However, it seems that the problem can still occur using this approach.",
      "parentUuid": "e26cd5bd_961c2a45",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "487aa8fb_bfde2cb3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-20T00:09:48Z",
      "side": 1,
      "message": "Could you check why this is not doing what you think should be doing?",
      "parentUuid": "9ccadf3d_5a01dc4f",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f8e25a4_a57ca254",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-04-20T20:41:27Z",
      "side": 1,
      "message": "The flag seems to be working as intended. However, the reported memory heap usage on Linux shows that the heap is already almost full even with the VMA suballocation disabled (`3,794,862,080` bytes out of a budget of `3,880,910,848` bytes).\nI tried disabling `mutableMipmapTextureUpload` instead, and the heap usage dropped to around `1,126,891,520`. The trace in question include many compressed textures. If we enable `kSupportTranscodeEtcToBc` instead, the heap usage becomes `960,299,008`.",
      "parentUuid": "487aa8fb_bfde2cb3",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f8bd4e7_918aa70e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-20T21:37:20Z",
      "side": 1,
      "message": "Then it seems this CL is working as expected but you are running into other issues on linux. My suggestion is land this CL and then produce another CL that either disables mutableMipmapTextureUpload for desktop GPUs (my preference), or enable kSupportTranscodeEtcToBc for desktop GPUs.",
      "parentUuid": "4f8e25a4_a57ca254",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1236710_3e7b2535",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-04-21T18:07:11Z",
      "side": 1,
      "message": "Thanks. I will land the CL after making the changes. Regarding the follow-up CL, I tried enabling `kSupportTranscodeEtcToBc` (https://chromium-review.googlesource.com/c/angle/angle/+/4457007), but the Windows and Linux bots seem to be failing on some dEQP and end2end tests in addition to the gold tests. I will create another CL to disable `mutableMipmapTextureUpload` for desktop GPUs.",
      "parentUuid": "3f8bd4e7_918aa70e",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eabad438_f4c797d2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 3
      },
      "lineNbr": 5925,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-21T18:17:48Z",
      "side": 1,
      "message": "\u003e disable `mutableMipmapTextureUpload` for desktop GPUs\n\nOr rather when `kSupportTranscodeEtcToBc` is false, and ETC is not supported (I think Intel supports it).",
      "parentUuid": "b1236710_3e7b2535",
      "range": {
        "startLine": 5924,
        "startChar": 68,
        "endLine": 5925,
        "endChar": 63
      },
      "revId": "019ee4a3a9e8dc26c545ef668b90149fe53b7a98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}