{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a605e9f5_c528ce79",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:31:40Z",
      "side": 1,
      "message": "nit: can you break this up into a few paragraphs to make it a bit easier to parse?\n\nAlso can you please mention that Asphalt 9 might have a slight CPU regression? In my testing I was seeing a 5% increase in frame time when CPU bound.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 27,
        "endChar": 0
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e59e4822_067ad3a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 27,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-03T22:09:25Z",
      "side": 1,
      "message": "With new revision that tracks each binding and un-observe only if there are more than 20 observers, there is no measurable CPU time difference with asphalt_9 and other app traces as well.",
      "parentUuid": "a605e9f5_c528ce79",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 27,
        "endChar": 0
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d06fb325_46805f05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:31:40Z",
      "side": 1,
      "message": "I tried to take an alternative approach to the solution here and wasn\u0027t able to find an improvement in A9. I\u0027ll keep thinking if there is a solution which keeps full performance for A9 (and any app that uses VAOs extensively, which this regresses) as well as improves black desert.\n\nIn the meantime the remaining work here is some micro-optimization we can do to narrow the A9 regression as much as possible before landing.",
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ddb41a0_3d05d4c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:32:28Z",
      "side": 1,
      "message": "Note that we have some partners who use Asphalt 9 performance as their primary benchmark, so there is a risk that this impacts their products negatively.",
      "parentUuid": "d06fb325_46805f05",
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b959d0bb_d55e11e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-02T19:24:47Z",
      "side": 1,
      "message": "I think I can use a little of heuristic here to avoid CPU  time regression here by only remove VAO from observer list if there are excessive amount of observers. Then this new behavior will effectively only tailor to black desert usage.",
      "parentUuid": "6ddb41a0_3d05d4c9",
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2894863b_cf7aa34f",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 675,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:31:40Z",
      "side": 1,
      "message": "nit: what can we do to optimize and inline this loop and this entire function inn the header? Maybe split the mBufferAccessValidation / WebGL logic into helpers so that this function is smaller to inline.",
      "range": {
        "startLine": 660,
        "startChar": 0,
        "endLine": 675,
        "endChar": 0
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "baf8d6be_8ed07d49",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 675,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-03T22:09:25Z",
      "side": 1,
      "message": "With new revision there is no measurable difference any more.",
      "parentUuid": "2894863b_cf7aa34f",
      "range": {
        "startLine": 660,
        "startChar": 0,
        "endLine": 675,
        "endChar": 0
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a1328f1_be16fceb",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 726,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:31:40Z",
      "side": 1,
      "message": "same comments here.",
      "range": {
        "startLine": 713,
        "startChar": 0,
        "endLine": 726,
        "endChar": 1
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d78cff0_5ac89d9d",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 726,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-03T22:09:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a1328f1_be16fceb",
      "range": {
        "startLine": 713,
        "startChar": 0,
        "endLine": 726,
        "endChar": 1
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bee092fa_8873c815",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 728,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-05-31T16:48:56Z",
      "side": 1,
      "message": "Can `incr` be a value other than -1 and 1? If not, we could have an assert to reflect that.",
      "range": {
        "startLine": 728,
        "startChar": 63,
        "endLine": 728,
        "endChar": 67
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6952e4ab_e889813a",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 728,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-03T22:09:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bee092fa_8873c815",
      "range": {
        "startLine": 728,
        "startChar": 63,
        "endLine": 728,
        "endChar": 67
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "365e903f_e8812d8d",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-05-31T16:48:56Z",
      "side": 1,
      "message": "Should we use {} here?",
      "range": {
        "startLine": 747,
        "startChar": 44,
        "endLine": 747,
        "endChar": 45
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e7cebf3_ae0f2f2b",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-05-31T17:16:08Z",
      "side": 1,
      "message": "That is existing code, but I will add {} in next update.",
      "parentUuid": "365e903f_e8812d8d",
      "range": {
        "startLine": 747,
        "startChar": 44,
        "endLine": 747,
        "endChar": 45
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5f6be80_7fe04c1e",
        "filename": "src/libANGLE/VertexArray.cpp",
        "patchSetId": 4
      },
      "lineNbr": 747,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-05-31T19:01:27Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "3e7cebf3_ae0f2f2b",
      "range": {
        "startLine": 747,
        "startChar": 44,
        "endLine": 747,
        "endChar": 45
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac2f4b8_5ee19c6d",
        "filename": "src/libANGLE/VertexArray.h",
        "patchSetId": 4
      },
      "lineNbr": 368,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2022-06-02T17:31:40Z",
      "side": 1,
      "message": "nit: please use the \"bind\" terminology instead of MakeCurrent, which has special meaning for Contexts.",
      "range": {
        "startLine": 367,
        "startChar": 0,
        "endLine": 368,
        "endChar": 49
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af82ac6b_c55dba30",
        "filename": "src/libANGLE/VertexArray.h",
        "patchSetId": 4
      },
      "lineNbr": 368,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-06-03T22:09:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ac2f4b8_5ee19c6d",
      "range": {
        "startLine": 367,
        "startChar": 0,
        "endLine": 368,
        "endChar": 49
      },
      "revId": "7933e9e1ca26760b5e13cafcfd5fee9a8fa17a26",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}