{
  "comments": [
    {
      "key": {
        "uuid": "cdeacfc0_d300085d",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 828,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "Not the same as pseudo code above.\nIf we return here we leave behind a shader object and program object.",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed1eee3f_f403a731",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 828,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Ah, good catch.   I\u0027ve added the cleanup code here.",
      "parentUuid": "cdeacfc0_d300085d",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb048c26_8f640bc5",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 832,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "Same as above, needs some cleanup.",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74dd3444_24176889",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 832,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb048c26_8f640bc5",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c048da14_27408c28",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 6947,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "nit: Why check? If we don\u0027t get a good object we\u0027re going to segfault at 6952 anyway.\nMaybe an ASSERT instead?",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b31833f_fc4a4f79",
        "filename": "src/libANGLE/Context.cpp",
        "patchSetId": 55
      },
      "lineNbr": 6947,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Hm, that\u0027s an interesting point.   We didn\u0027t care about segfaulting before, so you\u0027re probably right that it\u0027s ok to just assume there is a PPO and just crash immediately if not, rather than waiting.   At least if there isn\u0027t a PPO, we have a better idea why we are crashing.",
      "parentUuid": "c048da14_27408c28",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a12e656_85079f55",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "Is this because we are out of dirty bits?\nSeems odd that this isn\u0027t handled in syncDirtyBits.",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dca9ad5_69aa3c23",
        "filename": "src/libANGLE/Context.inl.h",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Jamie brought this up also, since this should only be necessary when the programs in the PPO change.\n\nIt should be relatively straightforward, since PPOs already have their own dirty bits internally.   I\u0027ll leave this comment open for now while I take a look at seeing if it fits in here or needs its own CL.",
      "parentUuid": "0a12e656_85079f55",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a73d38f_8e2f443a",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 55
      },
      "lineNbr": 1652,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "I don\u0027t understand what all is going on here, but it seems like we are losing varyingPacking.\nIn code below the varyingPacking is part of mResources, here it goes away when we lose scope.\nThat may be fine, but it looks weird.",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f01b02c_3e76a506",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 55
      },
      "lineNbr": 1652,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Looking closer, it seems the \u0027varyingPacking\u0027 parameter for Program::linkMergedVaryings() isn\u0027t even used anyway:\n\n\tangle::Result Program::linkMergedVaryings(const Context *context,\n\t\t\t\t\t\t\t\t\t\t\t  VaryingPacking \u0026varyingPacking,\n\t\t\t\t\t\t\t\t\t\t\t  const ProgramMergedVaryings \u0026mergedVaryings)\n\t{\n\t\tShaderType tfStage \u003d\n\t\t\tmState.mAttachedShaders[ShaderType::Geometry] ? ShaderType::Geometry : ShaderType::Vertex;\n\t\tInfoLog \u0026infoLog \u003d getExecutable().getInfoLog();\n\n\t\tif (!linkValidateTransformFeedback(context-\u003egetClientVersion(), infoLog, mergedVaryings,\n\t\t\t\t\t\t\t\t\t\t   tfStage, context-\u003egetCaps()))\n\t\t{\n\t\t\treturn angle::Result::Stop;\n\t\t}\n\n[[[ We use \u0027mResources-\u003evaryingPacking\u0027 here also ]]]\n\t\tif (!mResources-\u003evaryingPacking.collectAndPackUserVaryings(\n\t\t\t\tinfoLog, mergedVaryings, mState.getTransformFeedbackVaryingNames(), isSeparable()))\n\t\t{\n\t\t\treturn angle::Result::Stop;\n\t\t}\n\n\t\tgatherTransformFeedbackVaryings(mergedVaryings, tfStage);\n\t\tmState.updateTransformFeedbackStrides();\n\n\t\treturn angle::Result::Continue;\n\t}\n\n\nI\u0027ll just go ahead and remove it from here and the problem should solve itself.",
      "parentUuid": "2a73d38f_8e2f443a",
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30398ee2_cde1b2b9",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 47,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "the",
      "range": {
        "startLine": 47,
        "startChar": 78,
        "endLine": 47,
        "endChar": 80
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f457eb7e_48763588",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 47,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30398ee2_cde1b2b9",
      "range": {
        "startLine": 47,
        "startChar": 78,
        "endLine": 47,
        "endChar": 80
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74fac2a0_7bc1dbdb",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 55,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "the",
      "range": {
        "startLine": 55,
        "startChar": 93,
        "endLine": 55,
        "endChar": 94
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ca28ea4_b80952b0",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 55,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74fac2a0_7bc1dbdb",
      "range": {
        "startLine": 55,
        "startChar": 93,
        "endLine": 55,
        "endChar": 94
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce186eb0_1efbd761",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 57,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-20T16:48:52Z",
      "side": 1,
      "message": "stage",
      "range": {
        "startLine": 57,
        "startChar": 14,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99290cfb_3d3cc4be",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 57,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce186eb0_1efbd761",
      "range": {
        "startLine": 57,
        "startChar": 14,
        "endLine": 57,
        "endChar": 20
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "848b0eea_c7db4656",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 446,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-21T03:38:31Z",
      "side": 1,
      "message": "This probably relates to the question I asked: If program1 has \"sampler2D someName\" and program2 has \"atomic_uint someName\", is that supposed to generate an error? If program1 has \"sampler2D someName\" and program2 also has \"sampler2D someName\", is it sufficient to bind the sampler to either program (and not both)?\n\nIn other words, do the programs in a program pipeline have different namespaces?",
      "range": {
        "startLine": 446,
        "startChar": 32,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8bab508_dafd0464",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 446,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "\u003e In other words, do the programs in a program pipeline have different namespaces?\n\nThat\u0027s how I\u0027ve been treating them and things appear to be working out that way so far.   From what I can tell, the intent is that the programs themselves seem to have no idea the any other programs exist and to just assume the best when it comes to things like varyings.   The PPOs are meant to be very thin containers for the Programs, and not necessarily a merging of all of the Programs into a full \"Program\".\n\nIt\u0027s possible we\u0027ll find some test/app that proves this wrong, but I\u0027d like to keep this approach for as long as possible since it really simplifies things.",
      "parentUuid": "848b0eea_c7db4656",
      "range": {
        "startLine": 446,
        "startChar": 32,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cdde4d0_e4c5e30d",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 446,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-28T18:54:39Z",
      "side": 1,
      "message": "Ok, doesn\u0027t that mean that we **shouldn\u0027t** `linkValidateGlobalNames`? Admittedly I haven\u0027t looked at what that function does, but it sounds like it makes sure the global names link correctly. If the PPO allows one program to use a name in one way and another program to use the same name in a different way, then according to your explanation it shouldn\u0027t cause a link error.",
      "parentUuid": "d8bab508_dafd0464",
      "range": {
        "startLine": 446,
        "startChar": 32,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d4c64f6_e8527862",
        "filename": "src/libANGLE/ProgramPipeline.cpp",
        "patchSetId": 55
      },
      "lineNbr": 446,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-31T00:52:10Z",
      "side": 1,
      "message": "That function is using \u0027global\u0027 to mean within each particular shader program, not across all shader stages.   For example:\n\n    // Validate no uniform names conflict with attribute names\n    const ProgramState *programState \u003d getProgramState(ShaderType::Vertex);\n    if (programState)\n    {\n        Shader *vertexShader \u003d programState-\u003egetAttachedShader(ShaderType::Vertex);\n        if (vertexShader)\n        {\n            for (const auto \u0026attrib : vertexShader-\u003egetActiveAttributes())\n            {\n                if (uniformMap.count(attrib.name))\n                {\n                    infoLog \u003c\u003c \"Name conflicts between a uniform and an attribute: \" \u003c\u003c attrib.name;\n                    return false;\n                }\n            }\n        }\n    }",
      "parentUuid": "6cdde4d0_e4c5e30d",
      "range": {
        "startLine": 446,
        "startChar": 32,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "050f836d_7d7bb92f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-21T03:38:31Z",
      "side": 1,
      "message": "Avoid the copy by directly passing this to TransformSpirV?",
      "range": {
        "startLine": 101,
        "startChar": 12,
        "endLine": 101,
        "endChar": 66
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a453923_7771f622",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-26T02:20:07Z",
      "side": 1,
      "message": "What you\u0027re proposing is:\n\n            ANGLE_TRY(GlslangWrapperVk::TransformSpirV(\n                contextVk, shaderType, variableInfoMap,\n                programVk-\u003egetShaderInfo().getSpirvBlobs()[shaderType],\n                programVk-\u003egetShaderInfo().getSpirvBlobs()[shaderType]));\n\nUnfortunately, SpirvTransformer is not setup to handle mSpirvBlobIn and mSpirvBlobOut pointing to the same place, since it would be overwriting the original with the transformed and things would go bad from there.\n\nInstead, we need to make a copy at some point, either the original SPIR-V or the transformed.   It sounds like this relates to anglebug.com/4513 (Vulkan: Update ProgramVk to store original SPIR-V) since we could pass the original SPIR-V and the translated SPIR-V and separate pointers, and avoid the extra copy.  I\u0027ve added a TODO here to indicate this.",
      "parentUuid": "050f836d_7d7bb92f",
      "range": {
        "startLine": 101,
        "startChar": 12,
        "endLine": 101,
        "endChar": 66
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d1bbf4_7ffe3e1d",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-03-28T18:54:39Z",
      "side": 1,
      "message": "Ok, actually the problem is that you shouldn\u0027t be storing `transformedSpirvBlob` in the \"program\". The program has its own blob, and the PPO has a different blob (and it shouldn\u0027t modify the original program\u0027s blob).\n\nMy suggestion is to transform the blobs into a temporary vector, which is then passed to `createPipelineLayout` and subsequently discarded.",
      "parentUuid": "0a453923_7771f622",
      "range": {
        "startLine": 101,
        "startChar": 12,
        "endLine": 101,
        "endChar": 66
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3b5a4a8_f200ff89",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 55
      },
      "lineNbr": 101,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-31T00:52:10Z",
      "side": 1,
      "message": "The complication comes from the fact that the transformed SPIR-V is needed in a different code path from where it\u0027s generated.   The SPIR-V is transformed here during ProgramPipelineVk::link() which occurs as part of Context::prepareForDraw(), while the transformed SPIR-V isn\u0027t actually used until ProgramInfo::initProgram() during ContextVk::handleDirtyGraphicsPipeline().   \n\nThis means that the data needs to be stored somewhere so it can survive until then in a way that\u0027s usable for both monolithic programs and PPOs, since the ContextVk::handleDirtyGraphicsPipeline() path is the same for both.\n\nThis is an optimization that will touch enough places to justify a separate CL once this has landed.",
      "parentUuid": "c6d1bbf4_7ffe3e1d",
      "range": {
        "startLine": 101,
        "startChar": 12,
        "endLine": 101,
        "endChar": 66
      },
      "revId": "7c7717016c46f3f5a6880b6e20bffb1c0421acf4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}