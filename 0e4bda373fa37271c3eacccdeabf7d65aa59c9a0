{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ae8bc52c_1f866a1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-05T03:11:16Z",
      "side": 1,
      "message": "LGTM with one suggestion on the type to use.",
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff93ae76_f0993d1f",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-09-06T03:10:29Z",
      "side": 1,
      "message": "Fixme/NoteForSelf:\n```suggestion\n                specConstantData.push_back((*workgroupCountOut)[0]);\n```\n\nSame for other dims below",
      "range": {
        "startLine": 168,
        "startChar": 43,
        "endLine": 168,
        "endChar": 67
      },
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53e589e8_4aa5263b",
        "filename": "src/libANGLE/renderer/vulkan/CLKernelVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-09-06T03:12:38Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ff93ae76_f0993d1f",
      "range": {
        "startLine": 168,
        "startChar": 43,
        "endLine": 168,
        "endChar": 67
      },
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7f61c7_16334fe2",
        "filename": "src/libANGLE/renderer/vulkan/cl_types.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-05T03:11:16Z",
      "side": 1,
      "message": "Suggest making this an `enum class`. Then add an `InvalidEnum` and `EnumCount` entry at the end. The ability this gives you is that you can use `angle::PackedEnumMap\u003cSpecConstantID, ...\u003e` instead of a hash map.\n\nFor example, see `EventStage` in `vk_ref_counted_event.h`, and how `angle::PackedEnumMap\u003cEventStage, VkPipelineStageFlags\u003e` is used in the functions around there.\n\nNote that `angle::PackedEnumMap` is just a flat array indexed by these enums.",
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3915e117_95e71947",
        "filename": "src/libANGLE/renderer/vulkan/cl_types.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-09-05T21:49:49Z",
      "side": 1,
      "message": "Agreed. I was looking at `angle::PackedEnumMap`, I understand it\u0027s an array but was hoping to have iterator like `std::map` where I can get `key-value` for use in range-for, but alas it looks like it\u0027s just returning `value`. I\u0027ll just use regular loop and cast `size_t` iterator to underlying enum class.\n\nAlso, would need to introduce an `isUsed` field as the spec constants we use is dependent on what reflection instruction(s) is generated by clspv for kernel.",
      "parentUuid": "0b7f61c7_16334fe2",
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9be08ba_1dab4165",
        "filename": "src/libANGLE/renderer/vulkan/cl_types.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-09-06T14:44:18Z",
      "side": 1,
      "message": "Yeah, we have helpers for these too, they are common problems.\n\nFor your first problem, use `angle::AllEnums`. See for example `enum class DescriptorSetIndex` and how we iterate over the enums (keys):\n\n```\n    for (DescriptorSetIndex descriptorSetIndex : angle::AllEnums\u003cDescriptorSetIndex\u003e())\n```\n\nYou can then of course cheaply do `map[key]` to get the value.\n\n---\n\nRegarding `isUsed`, please use `angle::PackedEnumBitSet`. Then you can also use a range-for to get all the bits that are set efficiently, with the nicety that the returned bits are already cast to the enum values.",
      "parentUuid": "3915e117_95e71947",
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91baf9d5_5719587d",
        "filename": "src/libANGLE/renderer/vulkan/cl_types.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1604617
      },
      "writtenOn": "2024-09-06T21:17:50Z",
      "side": 1,
      "message": "Ah perfect! Thanks @syoussefi@chromium.org - good stuff.\n\nPushing update now.",
      "parentUuid": "b9be08ba_1dab4165",
      "revId": "0e4bda373fa37271c3eacccdeabf7d65aa59c9a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}