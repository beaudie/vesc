{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f7727a30_5f6f49fe",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-13T13:57:27Z",
      "side": 1,
      "message": "can you make vk::Resource store mReadWriteUse, and this one store mReadOnlyUse? mUse and mReadWriteUse seem to overlap.",
      "range": {
        "startLine": 224,
        "startChar": 22,
        "endLine": 224,
        "endChar": 35
      },
      "revId": "c012ba2c7a11638a461a3b465ed7de16f1ba2acf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fd7f7f9_3b19cd5f",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-13T15:45:24Z",
      "side": 1,
      "message": "\u003e can you make vk::Resource store mReadWriteUse, and this one store mReadOnlyUse?\n\nThat\u0027s the opposite of what\u0027s being tracked by these classes.   Resource tracks if an object is used for read, write, or anything (like a sync object that is neither read nor written).   ResourceWrite tracks when we know an object is being written to, though I\u0027m not sure if we know it\u0027s only being written to.\n\n\u003e mUse and mReadWriteUse seem to overlap.\n\nmUse is about as accurate as it can be, since it needs to cover read, write, and just \"use\" (as stated earlier).\n\nMaybe mReadWriteUse can just be mWriteUse?",
      "parentUuid": "f7727a30_5f6f49fe",
      "range": {
        "startLine": 224,
        "startChar": 22,
        "endLine": 224,
        "endChar": 35
      },
      "revId": "c012ba2c7a11638a461a3b465ed7de16f1ba2acf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee0d7208_dde93679",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-13T15:48:09Z",
      "side": 1,
      "message": "Tim, in our scheme an object isn\u0027t really \"just\" written to, it\u0027s either read-only or read/write. So that\u0027s why I was proposing you rename \"read, write, or anything\" to mReadWriteUse, and have a separate mReadOnlyUse. In that scheme, the base class would store the \"write\" use and the inherited value would store the read-only. I don\u0027t think your code would change too much, you\u0027d just swap a couple member variables in the class itself.",
      "parentUuid": "0fd7f7f9_3b19cd5f",
      "range": {
        "startLine": 224,
        "startChar": 22,
        "endLine": 224,
        "endChar": 35
      },
      "revId": "c012ba2c7a11638a461a3b465ed7de16f1ba2acf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cb32c8b_f8225d61",
        "filename": "src/libANGLE/renderer/vulkan/ResourceVk.h",
        "patchSetId": 7
      },
      "lineNbr": 224,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-09-13T16:04:31Z",
      "side": 1,
      "message": "In that case, the classes would be defined as:\n\n  // Only inherited by BufferHelper\n  class Resource : angle::NonCopyable\n  {\n  ...\n      mReadWriteUse;\n  }\n  \n  // Inherited by everything else, even though Images, etc. are written to.\n  class ResourceReadOnly : public Resource\n  {\n  ...\n      retainReadOnly() {}\n  \n      mReadOnlyUse;\n  }\n  \nThis doesn\u0027t seem clearer, especially since the goal is to track write usages. This also brings it back to having bad retainReadOnly() naming for objects being written to (as Charlie and Shabi pointed out).\n\nCan you provide an example of what you\u0027re describing?",
      "parentUuid": "ee0d7208_dde93679",
      "range": {
        "startLine": 224,
        "startChar": 22,
        "endLine": 224,
        "endChar": 35
      },
      "revId": "c012ba2c7a11638a461a3b465ed7de16f1ba2acf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}