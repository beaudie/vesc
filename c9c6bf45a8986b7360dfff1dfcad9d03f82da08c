{
  "comments": [
    {
      "key": {
        "uuid": "071c39ba_ff69a66d",
        "filename": "samples/capture_replay/CaptureReplay.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-07T22:46:38Z",
      "side": 1,
      "message": "This got complicated enough to warrant a comment, like \"looping on frame range\" or something.",
      "range": {
        "startLine": 36,
        "startChar": 17,
        "endLine": 36,
        "endChar": 22
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c65d9cff_b65f0ec0",
        "filename": "samples/capture_replay/CaptureReplay.cpp",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "071c39ba_ff69a66d",
      "range": {
        "startLine": 36,
        "startChar": 17,
        "endLine": 36,
        "endChar": 22
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eab0082e_385b40f7",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 867,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-11-08T01:06:16Z",
      "side": 1,
      "message": "[[[... third_party/angle/src/libANGLE/queryconversions.h ...]]]\ntemplate \u003ctypename ParamType\u003e\nGLboolean ConvertToGLBoolean(ParamType param)\n{\n    return param ? GL_TRUE : GL_FALSE;\n}\n\n\nCan ConvertToGLBoolean() be used instead, or can these functions be merged to somewhere common?",
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35a2ea27_20b05029",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 867,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Thanks, forgot that existed.",
      "parentUuid": "eab0082e_385b40f7",
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6548f15e_c4a1843d",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 877,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-07T22:46:38Z",
      "side": 1,
      "message": "Easier to read if clang-format will let you do one more newline:\n\n  currentValue.Values.FloatValues[0] \u003d\u003d 0.0f \u0026\u0026\n  currentValue.Values.FloatValues[1] \u003d\u003d 0.0f \u0026\u0026\n  currentValue.Values.FloatValues[2] \u003d\u003d 0.0f \u0026\u0026\n  currentValue.Values.FloatValues[3] \u003d\u003d 1.0f;",
      "range": {
        "startLine": 875,
        "startChar": 11,
        "endLine": 877,
        "endChar": 100
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1162a8ec_104705f4",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 877,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Another git cl format thing where it\u0027s packing more info into one line.",
      "parentUuid": "6548f15e_c4a1843d",
      "range": {
        "startLine": 875,
        "startChar": 11,
        "endLine": 877,
        "endChar": 100
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddc958d4_2581fd45",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 940,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "ref",
      "range": {
        "startLine": 940,
        "startChar": 4,
        "endLine": 940,
        "endChar": 62
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d8eb32e_8839aaf8",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-07T22:46:38Z",
      "side": 1,
      "message": "I see some other members in VertexAttribute::operator\u003d that might need to be here,  like relativeOffset.  How\u0027d you come up with the list checked here?  Is it just comparing parameters that will go into the call?  The question probably applies to the whole capture design and I should go read it.",
      "range": {
        "startLine": 968,
        "startChar": 8,
        "endLine": 968,
        "endChar": 11
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e36f5a3_da1e5125",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 968,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "The ES 3.1 features like relativeOffset require different GL commands to initialize. I haven\u0027t brought this up the design doc yet. We can add a section on how to handle the later GL versions. I did leave a TODO, referenced above.",
      "parentUuid": "8d8eb32e_8839aaf8",
      "range": {
        "startLine": 968,
        "startChar": 8,
        "endLine": 968,
        "endChar": 11
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f26cebf5_23467607",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1473,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-07T22:46:38Z",
      "side": 1,
      "message": "newline here for readability",
      "range": {
        "startLine": 1473,
        "startChar": 67,
        "endLine": 1473,
        "endChar": 68
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b68a8a2_5f4e6d51",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1473,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Another git cl format thing where it\u0027s packing more info into one line.",
      "parentUuid": "f26cebf5_23467607",
      "range": {
        "startLine": 1473,
        "startChar": 67,
        "endLine": 1473,
        "endChar": 68
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d17eea6_af736780",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1549,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2019-11-07T22:46:38Z",
      "side": 1,
      "message": "A newline here would help make the code easier to analyze, if clang-format will allow it.",
      "range": {
        "startLine": 1549,
        "startChar": 47,
        "endLine": 1549,
        "endChar": 48
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4752c3_6dc3de17",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1549,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d17eea6_af736780",
      "range": {
        "startLine": 1549,
        "startChar": 47,
        "endLine": 1549,
        "endChar": 48
      },
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "102858a4_55956bbc",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1564,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-11-08T01:06:16Z",
      "side": 1,
      "message": "This was forced to \u00271\u0027 above, why is it being reset to apiState.getPackAlignment() here?",
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe3c3aa_9dfe9e86",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1564,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-11-08T22:11:19Z",
      "side": 1,
      "message": "Maybe should discuss this as well in the ddoc. This is fixing the replay state to align with the api state. Say you set pack alignment to 77 in frame 2 of your application. This code then captures at frame 5. We use pack alignment 1 temporarily to ensure our textures get initialized correctly in setup. After setup we want to ensure that the application can continue to use its expected state (77) for future texture uploads.",
      "parentUuid": "102858a4_55956bbc",
      "revId": "c9c6bf45a8986b7360dfff1dfcad9d03f82da08c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}