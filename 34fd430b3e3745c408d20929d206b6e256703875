{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af6123b0_c3e29e83",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T13:51:05Z",
      "side": 1,
      "message": "Are all these special paths just to have this counter? Can we simplify things by having garbage collection be done as usual, and have the one adding image garbage do something like `onImageGarbageCollected(size)`? That\u0027ll probably simplify this change a lot.\n\nYou\u0027d probably need to add feedback from `collectGarbage` about which path was taken.",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f746fed9_1e4de93c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:26:30Z",
      "side": 1,
      "message": "You could do that, but you will need to dig into vk::GarbageList and check each element if it is image garbage or not (when a pending garbage has been submitted). I think it is a bit too much for every garbage processing.\n\nOne way to de-dduplicate the code is template all these different versions of collect***Garbage into one templated function.",
      "parentUuid": "af6123b0_c3e29e83",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a880b92_43271367",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T17:30:38Z",
      "side": 1,
      "message": "There are two counters. The `mPendingImageGarbageSizeInBytes` should be just set to 0 on flush, no? And I don\u0027t see `mImageGarbageSizeInBytes` actually used meaningfully anywhere. If that can be deleted, it doesn\u0027t look we have a reason to \"dig into the garbage\" ðŸ˜„",
      "parentUuid": "f746fed9_1e4de93c",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60b76153_ddb79be3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:40:03Z",
      "side": 1,
      "message": "the problem is that mPendingImageGarbageSizeInBytes is global, it hold garbage from different context. So you can not just set counter to 0 at flush. garbage from other context may still pending. This means you needs to check each garbage to see if it is submitted or not. And because the shared garbage is a std::vector, so you need to look into the vector to see if there is image in it or not. That is why I think have a dedicate list for image will be much simpler. The only concern here is how do we de-dup the code, which can be solved by template.",
      "parentUuid": "8a880b92_43271367",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40d2a3c5_774aa179",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T17:45:05Z",
      "side": 1,
      "message": "Ah right, I thought it was per context. It\u0027s kind of weird TBH to see a context decide to flush because of global pending garbage, the garbage may not even belong to the context. Like one context could be sitting there with a lot of garbage, and the other context keeps flushing itself to no avail.\n\nWouldn\u0027t it make more sense for each context to flush based on its own pending garbage?",
      "parentUuid": "60b76153_ddb79be3",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba449afa_eb94e412",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3611,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T13:51:05Z",
      "side": 1,
      "message": "Don\u0027t give in to the temptation! If you want to put this here, change the return value to `angle::Result` and do ANGEL_TRY. It\u0027s going to propagate to a few other functions, but it should work out. Only `onDestroy` probably has to `(void)` it.\n\n---\n\nThat said, perhaps we should recosider where this check is done. How about putting it at render pass end? That would avoid having to break the RP. If we do hit OOM before the render pass ends, your other change would cause a flush anyway, right?",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3379899c_ce4d03dc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3611,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:49:15Z",
      "side": 1,
      "message": "I think that might be a good idea, since most of image usage should come from RP. That way the check will be only one central place:\nContextVk::flushCommandsAndEndRenderPass()\n{\n...\nif( mHasDeferredFlush || has excessivePendingGarbage)\n{\nflushImpl\n}",
      "parentUuid": "ba449afa_eb94e412",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}