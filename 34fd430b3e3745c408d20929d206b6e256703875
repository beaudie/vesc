{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "af6123b0_c3e29e83",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T13:51:05Z",
      "side": 1,
      "message": "Are all these special paths just to have this counter? Can we simplify things by having garbage collection be done as usual, and have the one adding image garbage do something like `onImageGarbageCollected(size)`? That\u0027ll probably simplify this change a lot.\n\nYou\u0027d probably need to add feedback from `collectGarbage` about which path was taken.",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f746fed9_1e4de93c",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:26:30Z",
      "side": 1,
      "message": "You could do that, but you will need to dig into vk::GarbageList and check each element if it is image garbage or not (when a pending garbage has been submitted). I think it is a bit too much for every garbage processing.\n\nOne way to de-dduplicate the code is template all these different versions of collect***Garbage into one templated function.",
      "parentUuid": "af6123b0_c3e29e83",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a880b92_43271367",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T17:30:38Z",
      "side": 1,
      "message": "There are two counters. The `mPendingImageGarbageSizeInBytes` should be just set to 0 on flush, no? And I don\u0027t see `mImageGarbageSizeInBytes` actually used meaningfully anywhere. If that can be deleted, it doesn\u0027t look we have a reason to \"dig into the garbage\" ðŸ˜„",
      "parentUuid": "f746fed9_1e4de93c",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60b76153_ddb79be3",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:40:03Z",
      "side": 1,
      "message": "the problem is that mPendingImageGarbageSizeInBytes is global, it hold garbage from different context. So you can not just set counter to 0 at flush. garbage from other context may still pending. This means you needs to check each garbage to see if it is submitted or not. And because the shared garbage is a std::vector, so you need to look into the vector to see if there is image in it or not. That is why I think have a dedicate list for image will be much simpler. The only concern here is how do we de-dup the code, which can be solved by template.",
      "parentUuid": "8a880b92_43271367",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40d2a3c5_774aa179",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T17:45:05Z",
      "side": 1,
      "message": "Ah right, I thought it was per context. It\u0027s kind of weird TBH to see a context decide to flush because of global pending garbage, the garbage may not even belong to the context. Like one context could be sitting there with a lot of garbage, and the other context keeps flushing itself to no avail.\n\nWouldn\u0027t it make more sense for each context to flush based on its own pending garbage?",
      "parentUuid": "60b76153_ddb79be3",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d899ba0_54514fee",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T18:21:52Z",
      "side": 1,
      "message": "A garbage is pending submission could due to other context, not the context that did the release() call. It could even pending submission on multiple contexts. So if you want to have it per context, you will have to check all queueSerials that are pending submission and then locate context that uses that queue index and add it to these contexts. Most staging buffers are released while still pending, so that overhead is important. In reality, this global list thing should be reasonably good enough. In future if we find a real usage case where this causes problem, we can certainly revisit.",
      "parentUuid": "40d2a3c5_774aa179",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a45ff4_40d62a44",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T20:34:31Z",
      "side": 1,
      "message": "We could just accept the fact that our accounting for pending image size is inaccurate, since what it used for is not for correctness anyway. Then we could just do accounting like what shabi said, record mPendingSubmisisonImageEstimateGarbageSize in ContextVk and reset it upon flush and use it to decide if we should flush or not. That probably is good enough as well, especially that even with accurate accounting our flush on which context is not accurate anyway.",
      "parentUuid": "7d899ba0_54514fee",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f5bc9cb_4d824bc9",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-14T19:17:49Z",
      "side": 1,
      "message": "I have modified the CL to use a per-context counter for image garbage. However, it is currently only incremented in `ImageHelper::releaseImageFromShareContexts()`, which leaves out the other places in the code where the image is released. Should we pass in `ContextVk*` to `ImageHelper::releaseImage()` where available, so we can add to the garbage in that function?",
      "parentUuid": "07a45ff4_40d62a44",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a575ecfd_6372d525",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-14T19:26:32Z",
      "side": 1,
      "message": "Hopefully no, maybe have the caller do that? Depends on where ContextVk would have to end up getting propagated to.",
      "parentUuid": "6f5bc9cb_4d824bc9",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0e16f69_074f0028",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-15T00:33:14Z",
      "side": 1,
      "message": "I checked the other instances of where `releaseImage()` is used. Aside from `releaseImageFromShareContexts()`, there are the following:\n* `ImageVk::onDestroy()`. It uses a display object, but there is `mContext` in the class.\n* `SubresourceUpdate::release()` for staging images. Some of its callers have `ContextVk`.\n* `OffscreenSurfaceVk::AttachmentImage::destroy()`, where it uses a display object. No context.\n* Platform-specific sibling image `release()` functions. No context.\n\nWould any of the above need to increment the image garbage counter?",
      "parentUuid": "a575ecfd_6372d525",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "538b9843_d92210ec",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-15T02:11:55Z",
      "side": 1,
      "message": "- `ImageVk::onDestroy()`: that would release if the image is otherwise orphaned (like the image was attached to a texture, and the texture is already deleted). Not a common case\n- `SubresourceUpdate::release()`: staged images is also going to be extremely rare. Typically updates are in the form of data uploads, staged images can come from `glCopyTex[Sub]Image` and only if the image is not otherwise already allocated. Only one of our traces (five_nights_at_freddys) uses this function\n- OffscreenSurfaceVk: that\u0027s an EGL surface.  I don\u0027t expect it to be created/destroyed often\n- sibling image release() functions: Same as `ImageVk::onDestroy`? Something along those lines\n\nIn short, if we don\u0027t take those into account, I\u0027m not that worried TBH.",
      "parentUuid": "f0e16f69_074f0028",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80573e03_0682cdf0",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.h",
        "patchSetId": 13
      },
      "lineNbr": 392,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-15T17:28:32Z",
      "side": 1,
      "message": "Makes sense. Thanks for the explanation!",
      "parentUuid": "538b9843_d92210ec",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba449afa_eb94e412",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3611,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-09-13T13:51:05Z",
      "side": 1,
      "message": "Don\u0027t give in to the temptation! If you want to put this here, change the return value to `angle::Result` and do ANGEL_TRY. It\u0027s going to propagate to a few other functions, but it should work out. Only `onDestroy` probably has to `(void)` it.\n\n---\n\nThat said, perhaps we should recosider where this check is done. How about putting it at render pass end? That would avoid having to break the RP. If we do hit OOM before the render pass ends, your other change would cause a flush anyway, right?",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3379899c_ce4d03dc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3611,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-09-13T17:49:15Z",
      "side": 1,
      "message": "I think that might be a good idea, since most of image usage should come from RP. That way the check will be only one central place:\nContextVk::flushCommandsAndEndRenderPass()\n{\n...\nif( mHasDeferredFlush || has excessivePendingGarbage)\n{\nflushImpl\n}",
      "parentUuid": "ba449afa_eb94e412",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc320251_0c3df1f5",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 13
      },
      "lineNbr": 3611,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-09-14T19:17:49Z",
      "side": 1,
      "message": "Thanks! I have removed the code in `TextureVk` and moved this check to `flushCommandsAndEndRenderPass()`.",
      "parentUuid": "3379899c_ce4d03dc",
      "revId": "34fd430b3e3745c408d20929d206b6e256703875",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}