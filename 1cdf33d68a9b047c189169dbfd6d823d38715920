{
  "comments": [
    {
      "key": {
        "uuid": "8c1892c3_39f9f58a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-23T01:32:45Z",
      "side": 1,
      "message": "PTAL - with this change the CPU overhead in CommandBufferHelper::imageRead() is reduced from ~1.7% -\u003e ~1%",
      "revId": "1cdf33d68a9b047c189169dbfd6d823d38715920",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37dc0573_c728f6b0",
        "filename": "src/common/FastVector.h",
        "patchSetId": 1
      },
      "lineNbr": 579,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-23T05:00:15Z",
      "side": 1,
      "message": "Can you think of some template trick (on FastIntegerMap) or something to make FastIntegerSet not contain mValueData? Otherwise it could be refactored into a helper class and used by both.\n\nThere\u0027s no reason why a vector of 0s should to be maintained in this class.",
      "revId": "1cdf33d68a9b047c189169dbfd6d823d38715920",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "805e5ff5_cce49299",
        "filename": "src/common/FastVector.h",
        "patchSetId": 1
      },
      "lineNbr": 579,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-23T05:07:53Z",
      "side": 1,
      "message": "Yeah, we need to rework this slightly.\n\nNaming wise this should be FastIntegerSet. Design wise either you can make FastIntegerMap contain a FastIntegerSet and let FastIntegerSet handle the bitmask. The compose with private mValueData to form the values array.\n\n(We generally prefer a composition based design for simplicity).",
      "parentUuid": "37dc0573_c728f6b0",
      "revId": "1cdf33d68a9b047c189169dbfd6d823d38715920",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}