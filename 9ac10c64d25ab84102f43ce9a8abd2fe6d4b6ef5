{
  "comments": [
    {
      "key": {
        "uuid": "63a7a996_158fd3bf",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 600,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "Please make a separate function for bindBufferBase.  We want to eventually auto-generate the functions in entry_points_* so we want them to use consistent names.",
      "range": {
        "startLine": 600,
        "startChar": 9,
        "endLine": 600,
        "endChar": 24
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bda3efe_9914efab",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 7
      },
      "lineNbr": 600,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "+1. Internally in Context if you call from Context::bindBufferBase into Context::bindBufferRange that is OK.",
      "parentUuid": "63a7a996_158fd3bf",
      "range": {
        "startLine": 600,
        "startChar": 9,
        "endLine": 600,
        "endChar": 24
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "681f40a8_e68ce3af",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "use a range-for here. for (auto \u0026buf : mAtomicCounterBuffers). You can change the others, or leave them, it\u0027s your choice.",
      "range": {
        "startLine": 264,
        "startChar": 4,
        "endLine": 268,
        "endChar": 5
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03b16d59_86eb5526",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1179,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "nit: ASSERT the index is in range.",
      "range": {
        "startLine": 1179,
        "startChar": 4,
        "endLine": 1179,
        "endChar": 25
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23c1239c_cd08011c",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1931,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "nit: can you change this and the other cases (here and getInteger64i_v) to ASSERT this instead of the if check?  It should be validated already.",
      "range": {
        "startLine": 1931,
        "startChar": 10,
        "endLine": 1931,
        "endChar": 72
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9bf578_f933d981",
        "filename": "src/libANGLE/State.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1931,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "+1.",
      "parentUuid": "23c1239c_cd08011c",
      "range": {
        "startLine": 1931,
        "startChar": 10,
        "endLine": 1931,
        "endChar": 72
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e41b4a6d_d9e606e7",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1233,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "for changes which refactor large blocks of code from one file to another, it is most easily reviewed when done as a separate CL from changes to functionality. It\u0027s hard to see for me if anything changed in the functionality for this class. So, in the future, please do this refactoring as separate CLs. If you like, you can make a separate CL for this refactor here, but I won\u0027t require it.",
      "range": {
        "startLine": 1233,
        "startChar": 12,
        "endLine": 1233,
        "endChar": 36
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a12e139e_0287f7fc",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1987,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "there\u0027s no guarantee we\u0027re on an ES 3.0 context, it could be 2.0 with extensions for instance. Please update the wording to something more general like \"Atomic Counter buffers are not supported in this version of GL\".",
      "range": {
        "startLine": 1987,
        "startChar": 75,
        "endLine": 1987,
        "endChar": 82
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e7f96a6_655c5bc7",
        "filename": "src/libGLESv2/entry_points_gles_3_0.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "Thanks for moving these into Context!",
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "656a9014_3773e8e7",
        "filename": "src/libGLESv2/entry_points_gles_3_0.cpp",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "+1. This is a very helpful change, thank you! As I said, it\u0027s preferable as a split patch.",
      "parentUuid": "4e7f96a6_655c5bc7",
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e15bacc2_4c98448d",
        "filename": "src/libGLESv2/entry_points_gles_3_0.cpp",
        "patchSetId": 7
      },
      "lineNbr": 728,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "Remember to update this once the new Context function exists.",
      "range": {
        "startLine": 728,
        "startChar": 17,
        "endLine": 728,
        "endChar": 32
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccc99292_eea60bae",
        "filename": "src/tests/deqp_support/deqp_gles31_test_expectations.txt",
        "patchSetId": 7
      },
      "lineNbr": 147,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "these pass on OpenGL? That\u0027s surprising. Why would they fail on D3D11 but not OpenGL?",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 86
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de56ddcc_281a1c68",
        "filename": "src/tests/gl_tests/AtomicCounterBufferTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "top-level file comment.",
      "range": {
        "startLine": 5,
        "startChar": 2,
        "endLine": 5,
        "endChar": 0
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46569f52_6905b607",
        "filename": "src/tests/gl_tests/AtomicCounterBufferTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-02-22T21:34:28Z",
      "side": 1,
      "message": "instead of using a member buffer, use a GLBuffer from gl_raii.h inside the test.",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 32
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ad27fee_6015462b",
        "filename": "src/tests/gl_tests/AtomicCounterBufferTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "Maybe ASSERT_EQ(3, getClientMajorVersion()) instead?  This test requires ES3 to call glBindBufferBase.",
      "range": {
        "startLine": 48,
        "startChar": 8,
        "endLine": 48,
        "endChar": 36
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e951920_63426c16",
        "filename": "src/tests/gl_tests/AtomicCounterBufferTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 50,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-02-22T16:25:41Z",
      "side": 1,
      "message": "nit: bring this above the if statement and remove from the else.",
      "range": {
        "startLine": 50,
        "startChar": 8,
        "endLine": 50,
        "endChar": 76
      },
      "revId": "9ac10c64d25ab84102f43ce9a8abd2fe6d4b6ef5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}