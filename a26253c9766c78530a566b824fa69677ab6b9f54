{
  "comments": [
    {
      "key": {
        "uuid": "7afdc696_e631f71f",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 638,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-16T21:06:05Z",
      "side": 1,
      "message": "Out of curiosity, why a pointer vs. an object reference?\nStyle guide wasn\u0027t very clear for the recommendation here.\n{DEV} all parameters passed by reference, except for STL containers (e.g. std::vector, std::list), must be labeled const. For return parameters other than STL containers, use a pointer.",
      "revId": "a26253c9766c78530a566b824fa69677ab6b9f54",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c65e0c5d_024f6f4b",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 638,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-16T21:17:22Z",
      "side": 1,
      "message": "I don\u0027t remember why we excepted STL containers. We should probably remove that exception. The real recommendation is pretty much always follow the style guide unless you\u0027re using stream ops like logger classes.",
      "parentUuid": "7afdc696_e631f71f",
      "revId": "a26253c9766c78530a566b824fa69677ab6b9f54",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf58ee61_1d64832e",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 638,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-03-16T21:37:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c65e0c5d_024f6f4b",
      "revId": "a26253c9766c78530a566b824fa69677ab6b9f54",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93465551_04546cd4",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2999,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2020-03-16T22:26:02Z",
      "side": 1,
      "message": "Hmmm... as you noted in the commit message, this saves up all the binary data until the end of the capture.  This might not work well for large captures.  For instance, I\u0027m currently able to capture the entirety of TRex and Manhattan.  Would it be worth having this as a mode?  Maybe we can revisit if this becomes a problem.  We shouldn\u0027t *have* to record full apps if MEC is solid.",
      "range": {
        "startLine": 2999,
        "startChar": 16,
        "endLine": 2999,
        "endChar": 30
      },
      "revId": "a26253c9766c78530a566b824fa69677ab6b9f54",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d90aad69_193b3589",
        "filename": "src/libANGLE/FrameCapture.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2999,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-17T00:18:07Z",
      "side": 1,
      "message": "I\u0027d be surprised if this still didn\u0027t work. From my observation the bulk of the capture data in Manhattan is the first frame. In any case it should still be possible to write even very large files.",
      "parentUuid": "93465551_04546cd4",
      "range": {
        "startLine": 2999,
        "startChar": 16,
        "endLine": 2999,
        "endChar": 30
      },
      "revId": "a26253c9766c78530a566b824fa69677ab6b9f54",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}