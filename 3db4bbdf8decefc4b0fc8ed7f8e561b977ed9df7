{
  "comments": [
    {
      "key": {
        "uuid": "e8ba8bab_09c06bec",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T04:37:35Z",
      "side": 1,
      "message": "Style: Remove static and move to anonymous namespace at the top. Also, use CamelCase.",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8473c450_e4e56724",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:30:55Z",
      "side": 1,
      "message": "dint see too much of value add by making it a method so left it as static, dont have issues with your suggestion",
      "parentUuid": "e8ba8bab_09c06bec",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "617faecf_d222e443",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T15:35:00Z",
      "side": 1,
      "message": "No, don\u0027t need to make it a method of the class, just use an anonymous namespace instead of static (just ANGLE\u0027s style). And capitalize the first letter, again ANGLE style for global functions.",
      "parentUuid": "8473c450_e4e56724",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0742bad_51907bde",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:46:10Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "617faecf_d222e443",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "866e5f9a_e178c5ef",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 91,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:48:28Z",
      "side": 1,
      "message": "+1. Style consistency makes it easier to understand where the code is laid out.",
      "parentUuid": "617faecf_d222e443",
      "range": {
        "startLine": 91,
        "startChar": 0,
        "endLine": 91,
        "endChar": 15
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0cc425_31bb502b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T00:39:28Z",
      "side": 1,
      "message": "this will be guided by manhattan buffer usage profile we are gathering",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "674ddca7_03fbc919",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:01:22Z",
      "side": 1,
      "message": "Probably should give some kind of value based on size before landing. It\u0027s okay if it\u0027s not perfect initially, can always tweak it later.",
      "parentUuid": "ce0cc425_31bb502b",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d943ddf_092837c5",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:29:08Z",
      "side": 1,
      "message": "im thinking of something along the lines of a tuple like this - {buffer_type, closest_power_of_2(size), preferred_staging_buffer_size}",
      "parentUuid": "674ddca7_03fbc919",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e3ed0e8_bcc46f21",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:48:28Z",
      "side": 1,
      "message": "How would you use a tuple to pick a single size value? I\u0027d be fine with an initial size of like roundUpPow2 (see mathutil.h) * 2 or 4.",
      "parentUuid": "3d943ddf_092837c5",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "041d64ed_1264fb8f",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T16:41:38Z",
      "side": 1,
      "message": "conceptually im thinking of -\n\nMap\u003cBufferType, Map\u003cPowOfTwo_BufferSizes, DesiredStagingBufferSizes\u003e\u003e\n\nfrom preliminary data analysis, we really need to treat staging buffer differently based on the buffer type, if it is an unpack buffer it will hold texture data, the ratio of staging buffer size to buffer size needs to be many orders or magnitude more than what it would be if it were a vertex buffer or ubo",
      "parentUuid": "0e3ed0e8_bcc46f21",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2cad1e6_5ad37cc6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T04:37:35Z",
      "side": 1,
      "message": "Shouldn\u0027t we unconditionally init the staging buffer? What if this condition is false, but later the buffer isResourceInUse()?\n\nNote that just init()ializing the staging buffer doesn\u0027t make any allocations, so it\u0027s pretty benign.",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7df4940_ba8afbf2",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:01:22Z",
      "side": 1,
      "message": "I would probably make it inside an if \"(size \u003e 0 \u0026\u0026 size !\u003d mState.getSize())\" check. I\u0027m fine with leaving it if the size hasn\u0027t changed. Otherwise we should probably recreate it since we\u0027ll likely need to store a varying amount of data.",
      "parentUuid": "d2cad1e6_5ad37cc6",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a893ce84_548cc1b7",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T16:41:38Z",
      "side": 1,
      "message": "(mState.getSize() \u003d\u003d 0) is true only at the first glBufferData call when the buffer is being specified for the first time.\n\ni dont get the concern here, we initialize the staging buffer at the first glBufferData call and then \"allocate\" from it in all subsequent calls irrespective of the size (since we will allocate a new VkBuffer if the size needs to be different that our initial staging buffer number)",
      "parentUuid": "a7df4940_ba8afbf2",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc711a9f_feb373c9",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T16:43:09Z",
      "side": 1,
      "message": "\u003e\u003e\u003e since we will allocate a new VkBuffer if the size needs to be different that our initial staging buffer number\n\nsmall flaw here, we need to allocate to size got from Calculate...(...) not just the new size requested in the glBufferData call",
      "parentUuid": "a893ce84_548cc1b7",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77a08266_191e9734",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T04:37:35Z",
      "side": 1,
      "message": "Should be only VK_BUFFER_USAGE_TRANSFER_SRC_BIT, shouldn\u0027t it?",
      "range": {
        "startLine": 109,
        "startChar": 12,
        "endLine": 110,
        "endChar": 81
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba4f1bb9_7592368c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:29:08Z",
      "side": 1,
      "message": "i did this to prep for a future optimization where we prevent the \"overdraw\" by using the staging buffer itself as the \"new\" front buffer. So we would have a *mFrontBuffer member var that either points to mBuffer or points to mStagingBuffer (with some offset value)\n\nthen we can remove the GPU copy and directly submit the staging buffer as the uniform/vertex buffers",
      "parentUuid": "77a08266_191e9734",
      "range": {
        "startLine": 109,
        "startChar": 12,
        "endLine": 110,
        "endChar": 81
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e51252c9_4670e12b",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:48:28Z",
      "side": 1,
      "message": "FWIW the extra usage flags on buffers aren\u0027t as big a deal as they are on Images.",
      "parentUuid": "ba4f1bb9_7592368c",
      "range": {
        "startLine": 109,
        "startChar": 12,
        "endLine": 110,
        "endChar": 81
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42cf785f_e5dbd78a",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T00:39:28Z",
      "side": 1,
      "message": "i had this in my suballocated buffer patch but ideally we want to tag a particular \"mNextAllocationOffset\" with a serial so we wait only for the serial of the offset instead of the serial of the whole buffer.",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15a21ade_fedfebbe",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T04:37:35Z",
      "side": 1,
      "message": "You can do `mStagingBuffer.getCurrentBuffer()-\u003eupdateSerial()` to make it clear it\u0027s only this buffer whose serial is being updated, not every buffer in the DynamicBuffer object. Then you can remove the helper added in that class.",
      "parentUuid": "42cf785f_e5dbd78a",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d459137d_49f93ffa",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:01:22Z",
      "side": 1,
      "message": "Serials are assigned during command submission. Here you\u0027re trying to record a previously submitted serial during command recording. That will mess up resource lifetime management. Instead call mStagingBuffer.getCurrentBuffer()-\u003eonGraphAccess(graph). That\u0027ll queue the buffer to get a new serial during submission and will ensure it has the right lifetime.",
      "parentUuid": "15a21ade_fedfebbe",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "054feb31_de8af71e",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-01-15T15:28:51Z",
      "side": 1,
      "message": "There\u0027s an issue Jamie where BufferHelper::copyFromBuffer doesn\u0027t set a dependency to the temp buffer (which is fine, we don\u0027t want to waste a graph node for it. We do the same with temp buffers staged for images), so DynamicBuffer::allocate may decide to pick this buffer out of mBufferFreeList since the serial is never set.",
      "parentUuid": "d459137d_49f93ffa",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f821808e_d50cd2f6",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:29:08Z",
      "side": 1,
      "message": "\u003e\u003e\u003e Here you\u0027re trying to record a previously submitted serial\ncurrent Q serial is yet to be submitted right? you are talking of the last submitted serial?\n\n\u003e\u003e\u003e That will mess up resource lifetime management\n\"contextVk-\u003egetCurrentQueueSerial()\" is the serial that gets \"recorded\" in \"releaseResourceUsesAndUpdateSerials()\" right?\n\n\u003e\u003e\u003e mStagingBuffer.getCurrentBuffer()-\u003eonGraphAccess(graph)\nunfortunately that will trigger a \"deletion\" of the staging buffer when \"releaseResourceUsesAndUpdateSerials\" gets called since mUse-\u003ecounter is not \u003e 1 since it never gets submitted to the command buffer",
      "parentUuid": "d459137d_49f93ffa",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e56c5e0b_950b040c",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:48:28Z",
      "side": 1,
      "message": "\u003e current Q serial is yet to be submitted right? you are talking of the last submitted serial?\n\nOK, technically \"current\" is the \"next to be submitted\" serial. However it is not correct to use \"current\" here in multi-context scenarios. i.e.:\n\n- you record the \"current\"/\"next to be submitted\" serial here (1)\n- another context submits, and gets serial 1 as its submission\n- you submit this buffer work as serial 2 - buffer has lifetime associated with serial 1\n- serial 1 completes\n- other code causes buffer to be deleted while not yet completed\n- serial 2 completes\n\n\u003e \"contextVk-\u003egetCurrentQueueSerial()\" is the serial that gets \"recorded\" in \"releaseResourceUsesAndUpdateSerials()\" right?\n\nNot always. In single context scenarios yes. In multi-context, not necessarily.\n\n\u003e unfortunately that will trigger a \"deletion\" of the staging buffer when \"releaseResourceUsesAndUpdateSerials\" gets called since mUse-\u003ecounter is not \u003e 1 since it never gets submitted to the command buffer\n\nIs this speculative or from testing? CommandGraphResource::CommandGraphResource should increment mUse to 1. I would expect it to work fine.\n\n\u003e There\u0027s an issue Jamie where BufferHelper::copyFromBuffer doesn\u0027t set a dependency to the temp buffer (which is fine, we don\u0027t want to waste a graph node for it. We do the same with temp buffers staged for images), so DynamicBuffer::allocate may decide to pick this buffer out of mBufferFreeList since the serial is never set.\n\nI don\u0027t quite follow this?",
      "parentUuid": "f821808e_d50cd2f6",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35af8f41_19f37ffd",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T16:41:38Z",
      "side": 1,
      "message": "then, im trying to understand how this code in \"UtilsVk::allocateDescriptorSet\" is valid -\u003e\n\n\"bindingOut-\u003eget().updateSerial(contextVk-\u003egetCurrentQueueSerial());\"",
      "parentUuid": "e56c5e0b_950b040c",
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f65032f_fbe5c8cf",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-01-15T15:01:22Z",
      "side": 1,
      "message": "you can remove these new methods.",
      "range": {
        "startLine": 345,
        "startChar": 0,
        "endLine": 351,
        "endChar": 5
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd38c67f_5b5a8561",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.h",
        "patchSetId": 1
      },
      "lineNbr": 351,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-01-15T15:29:08Z",
      "side": 1,
      "message": "yeah, once the correct path to update the serial has been found, i will",
      "parentUuid": "3f65032f_fbe5c8cf",
      "range": {
        "startLine": 345,
        "startChar": 0,
        "endLine": 351,
        "endChar": 5
      },
      "revId": "3db4bbdf8decefc4b0fc8ed7f8e561b977ed9df7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}