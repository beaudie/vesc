{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "68c9ca11_ae8a69e8",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-29T19:11:47Z",
      "side": 0,
      "message": "I\u0027d like to again point out that before, doing updates to binding 0 then 1, or 1 then 0 ended up with the same desc. Now they end up with two different descs. If instead you\u0027d do this (UNTESTED CODE):\n\n```\nif (bindingIndex \u003e\u003d mPackedDescriptorSetLayout.size())\n{\n    mPackedDescriptorSetLayout.resize(bindingIndex + 1);\n}\nPackedDescriptorSetBinding \u0026packedBinding \u003d mPackedDescriptorSetLayout[bindingIndex];\n```\n\nyou can bring back that behavior. I can\u0027t really guess what works better though, if the updates to bindings are consistent, what this CL has gives better packing and is better. If they are not consistent, then the suggestion results in better cache hits.\n\nDo you think you could run an experiment to see if the cache hit rate is reduced with this change?\n\n---\n\nFWIW, making `bindingIndex` implicit (by placing the entry in the corresponding slot), you can also reduce the `PackedDescriptorSetBinding` struct back to 32-bit for a small CPU perf gain. Also good to measure.",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c48195b2_85d5b935",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-29T19:52:45Z",
      "side": 0,
      "message": "\u003e If instead you\u0027d do this ... mPackedDescriptorSetLayout.resize(bindingIndex + 1);\n\napps are free to choose any bindingIndex, so an app can have only 2 bindings with `bindingIndex \u003d\u003d {3, 45}` in which case we will end up alloc\u0027ing a `FastVector` of size 46 instead of 2. do we want that?\n\n\u003e if the updates to bindings are consistent\n\n`ProgramExecutableVk::createPipelineLayout` is where most of the work happens but we rely on vectors built in various other locations so guaranteeing consistent ordering is not easy. If we need to have order agnostic cache hits and have optimal space consumption I guess we are back to some sort of map (but this was causing failures with pixel bots which i did not look into much)\n\n\u003e what this CL has gives better packing and is better\n\nyeah, for \u003e 90% traces we can fit `mPackedDescriptorSetLayout` in a single cache line",
      "parentUuid": "68c9ca11_ae8a69e8",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fc6f97c_7184160b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-04-30T00:15:21Z",
      "side": 0,
      "message": "I actually was thinking what Shabi described above as well. Basically keep the way how it works as before but get rid of excessive zeros at the end. I didn\u0027t realize this CL is doing slightly different ways, but if data shows new way is better I am fine too. \n\n\"apps are free to choose any bindingIndex\", true, but is any real app actually doing that way? The point here is to optimize the actual usage pattern we are seeing in real app.",
      "parentUuid": "c48195b2_85d5b935",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01db6a15_39c012ee",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-30T13:57:43Z",
      "side": 0,
      "message": "\u003e but is any real app actually doing that way? The point here is to optimize the actual usage pattern we are seeing in real app.\n\nExactly, which is why I suggested this:\n\n\u003e Do you think you could run an experiment to see if the cache hit rate is reduced with this change?\n\nIf cache hit rate is not affected by this change, I\u0027m fine with this better packing. If it is affected, we\u0027ll have to measure the trade off.",
      "parentUuid": "0fc6f97c_7184160b",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32a3de54_5eb638eb",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T12:46:34Z",
      "side": 0,
      "message": "i have added the data here -\u003e https://anglebug.com/8677#c7\n\nThere are no changes in cache hit / miss count but there is a sizable reduction in hashed bytes and hashing times",
      "parentUuid": "01db6a15_39c012ee",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b378ba06_63586ef1",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-01T13:51:50Z",
      "side": 0,
      "message": "Nice! Do you think you could do another experiment with my suggestion to make bindingIndex implicit? In particular, the `PackedDescriptorSetBinding` can become 32-bit instead of 64-bit, and if apps do keep their bindings packed (as one would imagine they would) then the hash could be even faster:\n\n```\n        struct\n        {\n            uint8_t type;                  // Stores a packed VkDescriptorType descriptorType.\n            uint8_t stages;                // Stores a packed VkShaderStageFlags.\n            uint16_t count : 15;           // Stores a packed uint32_t descriptorCount\n            uint16_t hasImmutableSampler : 1; // Whether this binding has an immutable sampler\n        };\n```",
      "parentUuid": "32a3de54_5eb638eb",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c08b5fb_c7d1d1de",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T16:06:36Z",
      "side": 0,
      "message": "\u003e the PackedDescriptorSetBinding can become 32-bit instead of 64-bit\n\nwe will pull in the full cache line so the advantage would only be for apps that have binding count \u003e 8?\n\n\u003e if apps do keep their bindings packed\n\ni have only logged the max binding count not the binding indices themselves, so im not sure if they are indeed packed. i am going to collect that data before making the change",
      "parentUuid": "b378ba06_63586ef1",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "205ced8c_086f08d4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T17:10:04Z",
      "side": 0,
      "message": "\u003e i am going to collect that data before making the change\n\ni added this logging pseudo-code -\n```\nif (max_binding_index \u003e mDescriptorSetLayoutBindings.size())\n{\n    cout \u003c\u003c \"sparse binding\"\n}\n```\nand no trace emitted this log, so it looks like all traces have packed bindings",
      "parentUuid": "6c08b5fb_c7d1d1de",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57d59ef0_fcdb690b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T17:19:52Z",
      "side": 0,
      "message": "\u003e uint16_t count : 15;\n\nthis requirement in spec is concerning -\n```\ndescriptorCount is the number of descriptors contained in the binding ... except if\ndescriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK in which case\ndescriptorCount is the size in bytes of the inline uniform block\n```\nbut i guess we can worry about it when angle requires vulkan 1.3",
      "parentUuid": "205ced8c_086f08d4",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8763061_01559349",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T17:26:25Z",
      "side": 0,
      "message": "\u003e make bindingIndex implicit\n\nthis would require us to retain the bitset that tracks valid binding indices",
      "parentUuid": "57d59ef0_fcdb690b",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9015b20_6d0384e8",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-01T17:56:07Z",
      "side": 0,
      "message": "Yeah we don\u0027t use inline uniform blocks yet.\n\n\u003e this would require us to retain the bitset that tracks valid binding indices\n\nAn invalid `type` (which is otherwise a `VkDescriptorType`) could indicate that? As you said, every app has their bindings packed, so the bitset is not really going to help us with perf either.",
      "parentUuid": "b8763061_01559349",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f79894f_d66a4270",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T20:39:24Z",
      "side": 0,
      "message": "got data comparing explicit and implicit binding index here -\u003e https://anglebug.com/8677#c8\n\ni think the for-loop with implicit binding indices kills the performance of hashing compared to the block hashing of explicit binding indices",
      "parentUuid": "c9015b20_6d0384e8",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2520758c_c67cea96",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-01T20:46:19Z",
      "side": 0,
      "message": "Thank you. Could you please put up the CL that implements the implicit binding index? Given your claim that `cout \u003c\u003c \"sparse binding\"` wasn\u0027t produced, I expected implicit binding to halve the hash size. Also not sure why you would use a for-loop, you still have an array you can hash completely (including gaps in it, if any, which you\u0027d initialize to something fixed)",
      "parentUuid": "9f79894f_d66a4270",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d963c0a4_d56e03ac",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T21:06:45Z",
      "side": 0,
      "message": "\u003e Could you please put up the CL\n\nhttps://anglebug.com/8677#c9\n\n\u003e Given your claim that `cout \u003c\u003c \"sparse binding\"` wasn\u0027t produced\n\nall that means is if the max bindings count for a trace was 10 then there was no `DescriptorSetLayoutDesc` that had a bindingIndex \u003e 10. It does not mean that all `DescriptorSetLayoutDesc` had valid entries for all 10 indices.\n\nit could be that the trace created 100 `DescriptorSetLayoutDesc` out of which only 10 had bindings count \u003d\u003d 10 and the rest of them had binding count \u003d\u003d 3 which were sparse like `{0, 5, 9}`",
      "parentUuid": "2520758c_c67cea96",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6025dce1_db184917",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-01T21:13:21Z",
      "side": 0,
      "message": "there is 1 additional issue i need to bring up with \"but is any real app actually doing that way?\" -\n\nif there is a new app that has sparse bindings like `{1, 45}` and that app / game becomes the-hot-thing that year we cannot afford to update the driver to improve efficiency of just 1 app. From a productization point of view i am leaning towards not intentionally creating a potential path of inefficiency when the benefits aren\u0027t proportional to \u003e 90% of traces. i hope that makes some sense?",
      "parentUuid": "d963c0a4_d56e03ac",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6149e7f_37e61b75",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-01T21:58:16Z",
      "side": 0,
      "message": "Well the argument goes both ways, if there\u0027s a future app that uses bindings `{1,2,3,4,5,6,7,8,9,10}` but every time it ends up with a different order of indices, you\u0027ll end up with 3628800 (10!) descriptor sets instead of 1.\n\nI\u0027m fine with the change as is, but I still think it\u0027s worth following up with the above change and see _some_ benefit.\n\nLeaving +2 to @cclao@google.com in case he disagrees.",
      "parentUuid": "6025dce1_db184917",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a704933b_f78df35e",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-05-01T22:26:21Z",
      "side": 0,
      "message": "The packed case I think implicit binding should be better (you also get rid of mask bits), because the hash data is half the size. Given that mohan\u0027s data indicates it is packed (From the log I don\u0027t think it is conclusive though since you only logged max index, but I tend to believe they will be packed for most apps), I think implicit binding is better both for simplicity and smaller hash data. So my vote goes to implicit hash. But the difference we are talking here is not big either, so if Mohan insists this way, I will be fine to make mohan happy as well;-)",
      "parentUuid": "f6149e7f_37e61b75",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "463e95c5_a48ad180",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-02T12:22:10Z",
      "side": 0,
      "message": "thank you for being accommodating. I have a few more experiments i want to run, will provide an update in a couple of days",
      "parentUuid": "a704933b_f78df35e",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa4d8d3a_9bcca8d8",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-03T01:17:42Z",
      "side": 0,
      "message": "\u003e Also not sure why you would use a for-loop, you still have an array you can hash completely (including gaps in it, if any, which you\u0027d initialize to something fixed)\n\nok, i added a white box test for functionality. Will need the for-loop in both `hash()` and `\u003d\u003d` to pass that test but this costs us time. On the other hand hashing the gaps will need more work in `FastVector` resize\n\nCan we land this change and others can pick up suggested optimizations in a follow up CL?",
      "parentUuid": "463e95c5_a48ad180",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "277a0ea7_ac0756db",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-05-03T01:44:36Z",
      "side": 0,
      "message": "Yes let\u0027s do that. If you have a debug change you used to gather data in your reports, I\u0027d appreciate if you could share it.",
      "parentUuid": "fa4d8d3a_9bcca8d8",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8c703de_e19bb01a",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 22
      },
      "lineNbr": 4316,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-05-03T11:45:38Z",
      "side": 0,
      "message": "\u003e If you have a debug change you used to gather data in your reports, I\u0027d appreciate if you could share it\n\nsure thing shabi -\u003e https://anglebug.com/8677#c10",
      "parentUuid": "277a0ea7_ac0756db",
      "revId": "44ce58871c69cc790c70aaa0fdf2cff58a9d6c49",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}