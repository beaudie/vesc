{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6492eafb_4645f3d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-08-08T16:52:46Z",
      "side": 1,
      "message": "The downside here is that if you are only updating small fraction of big buffer with subData, acquire-and-update will end up have to copy almost entire buffer instead of staged update will only copy what have changed. This is especially true for desktop GPUs where renderpass breakage does not matter much. For ARM, there is also possibility that the renderpass is going to be break anyway due to other reasons, and this will be unnecessarily adding the large data copy here.\n\nMy suggestion is at least you should add the feature flag here to only apply for GPUs where renderpass matters (or you can just use preferCPUForBufferSubData which is set true for ARM). And also check this on ARM devices to see if we are unnecessraily incurring big data due to this without actually saving us renderpass breakage, or are we actually helping on ARM or not.\n\nOr alternatively, you stage the small update first and apply this optimization until staged update is going to be flushed. At the time you are going to flush staged update, check to see if flushing the staged update would actually break renderpass or not and chose to do create a new buffer to avoid breake the renderpass. This model is a bit more complex but has less chance to make wrong decisions. But it also has extra copy as well, so check app traces to see if we are actually run into this in real app and what is the size of update versus size of buffer to see if it worth it or not.",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f0df8b_f5e99596",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-08T17:25:07Z",
      "side": 1,
      "message": "Staged update in BufferVk is not like it\u0027s done with ImageHelper. Staged updates are immediately applied, so there is no such thing as \"deferring\" to that time.\n\nThat said, I\u0027m in the process of checking our traces to see which ones hit this path. If there are any traces that do, I\u0027ll report on whether this helps or hurts.\n\nAgreed with conditioning to TBR.",
      "parentUuid": "6492eafb_4645f3d7",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "992cccf3_442f410c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-08T19:13:44Z",
      "side": 1,
      "message": "Well, it looks like none of the traces hit this condition.",
      "parentUuid": "d0f0df8b_f5e99596",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5dd2e5e4_8ef8638c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-09T04:50:21Z",
      "side": 1,
      "message": "Done. This is now also conditional to `preferCPUForBufferSubData`. Like I said, this is not hit by any trace, so the optimizations remains to be theoretical at the moment.\n\nI only really did it because a buggy other CL exposed it.",
      "parentUuid": "992cccf3_442f410c",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e604ea6_fbc04bea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-08-09T16:44:56Z",
      "side": 1,
      "message": "Thanks Shabi for gathering data on app traces. I am still a bit concerned that even for ARM, this optimization may turns out to be negative. If some body called glBufferSubData to update small data on a large buffer, the extra cost of copying the entire buffer could out weight the saving of renderpass break, as well as extra memory usage. So the answer really is \"all depends\". My suggestion is we delay this CL, or, since you are already at this, maybe just add a performance warning for a potential improvement we can do in case we run into it in the future? (Sorry for a bit negative on this).",
      "parentUuid": "5dd2e5e4_8ef8638c",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "370066a9_7c3dcbf2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-09T22:26:34Z",
      "side": 1,
      "message": "Ok I think I\u0027ve come up with a good compromise. I put a cap on how big the buffer can be. If the buffer itself is not too big (I put 1KB randomly), then I think it\u0027s not controversial that duplication is better than render pass break.\n\nWith that in place, I can (and have) also put a perf warning when render pass is broken even though it could have been avoided.",
      "parentUuid": "5e604ea6_fbc04bea",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b93a5482_8df18a05",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2022-08-10T00:09:08Z",
      "side": 1,
      "message": "I have less issue with that.",
      "parentUuid": "370066a9_7c3dcbf2",
      "range": {
        "startLine": 19,
        "startChar": 35,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4aa6b3b_d35ca007",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4865,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-08-08T22:58:59Z",
      "side": 1,
      "message": "I wonder if a constant could also be used here",
      "range": {
        "startLine": 4865,
        "startChar": 51,
        "endLine": 4865,
        "endChar": 80
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "510519bb_1cf09c6d",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4865,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-09T04:50:21Z",
      "side": 1,
      "message": "You\u0027re right it can, this was copy-pasted from somewhere else.",
      "parentUuid": "a4aa6b3b_d35ca007",
      "range": {
        "startLine": 4865,
        "startChar": 51,
        "endLine": 4865,
        "endChar": 80
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a46f0620_02b74b9b",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4876,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-08-08T22:58:59Z",
      "side": 1,
      "message": "Unused",
      "range": {
        "startLine": 4876,
        "startChar": 0,
        "endLine": 4876,
        "endChar": 19
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba95d407_9b2dd140",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4876,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-09T04:50:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a46f0620_02b74b9b",
      "range": {
        "startLine": 4876,
        "startChar": 0,
        "endLine": 4876,
        "endChar": 19
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ba4cdb_2c945977",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4882,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2022-08-08T22:58:59Z",
      "side": 1,
      "message": "nit: Same format for all?",
      "range": {
        "startLine": 4882,
        "startChar": 24,
        "endLine": 4882,
        "endChar": 38
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5369b80a_2c6541b1",
        "filename": "src/tests/gl_tests/VulkanPerformanceCounterTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4882,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-08-09T04:50:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2ba4cdb_2c945977",
      "range": {
        "startLine": 4882,
        "startChar": 24,
        "endLine": 4882,
        "endChar": 38
      },
      "revId": "1b4fdb8e686e251b585d51b9fed08e6575fd1357",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}