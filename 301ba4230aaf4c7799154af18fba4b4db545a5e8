{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b2ddb6f2_b696a43b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-07-21T16:12:29Z",
      "side": 1,
      "message": "I also did some manual testing. I didn\u0027t see any flickering or corruption.",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b9bd58d_e33b5fa0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1115588
      },
      "writtenOn": "2023-07-21T16:50:50Z",
      "side": 1,
      "message": "lgtm\n\nI feel like @ccameron knows these issues on macOS best?",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8ced4be_415b00ce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-07-21T23:01:07Z",
      "side": 1,
      "message": "lgtm\n\n+enga, sunnyps and junov too in case they can think of any potential interop bugs that could show up here. Hopefully we\u0027re waiting on MTLSharedEvents in all of the needed places; WebGPU -\u003e compositor (currently Ganesh on top of ANGLE/Metal), Canvas 2D \u003c-\u003e WebGL, etc.",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7119ed1f_71528eef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-07-22T06:40:56Z",
      "side": 1,
      "message": "I think the flush here was added by me. It\u0027s because the eglBindTexImage spec says:\n\u003e If display and surface are the display and surface for the calling thread\u0027s current context, eglBindTexImage performs an implicit glFlush\n\nBut I think this is not necessary.",
      "parentUuid": "d8ced4be_415b00ce",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7b1d6b5_2bc48b31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2023-07-22T08:43:12Z",
      "side": 1,
      "message": "I agree that this waitUntilScheduled shouldn\u0027t be needed.\n\nThe following comes with the caveat that I may not understand the situation:\n\nThe last time I tired to convince myself of the correctness of the synchronization of IOSurfaceImageBacking, I wasn\u0027t able to. Because of that, I worry that we may happen to be relying on this waitUntilScheduled. I wrote up the level of synchronization that I believe is needed [here](https://docs.google.com/document/d/1FgkO1vpHKfHsxzZ6OT3r6HnSu0lpumINHB4m-8xxyW4/edit#bookmark\u003did.o2bqel5jjgw).",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d9e1f1d_79a7bd9d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-07-24T14:32:29Z",
      "side": 1,
      "message": "I think in the case of ANGLE ingesting an IOSurface this way, the synchronization risk is that *another* MTLDevice did not flush with WaitUntilScheduled so that ANGLE can properly see/schedule based on that. When ANGLE calls WaitUntilScheduled it\u0027s only for work that ANGLE scheduled itself, we can\u0027t force whatever external device wrote to the IOSurface to flush.",
      "parentUuid": "d7b1d6b5_2bc48b31",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50c1ea31_3e43a39d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-07-24T14:36:31Z",
      "side": 1,
      "message": "Chrome branched last week it\u0027s a good time to merge a more risky CL like this.",
      "revId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "301ba4230aaf4c7799154af18fba4b4db545a5e8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}