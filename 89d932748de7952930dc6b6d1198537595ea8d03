{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b7427547_77f56630",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-10T01:14:13Z",
      "side": 1,
      "message": "oops patch 6 over fixed and removed return line.\nPatch 7 looks good\nPTAL",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a471de0e_6a6315af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-10T17:29:11Z",
      "side": 1,
      "message": "It seems ready to merge. Can we get a +2",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6421bea_2f67ecde",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2021-02-10T19:30:19Z",
      "side": 1,
      "message": "LGTM",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1e73986_3ba92f9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-10T20:01:18Z",
      "side": 1,
      "message": "Can you add a test that does this?\n\nfor (n \u003d 0 to 10)\n If age \u003d\u003d 0\n   draw color[n]\n   EXPECT_PIXEL_COLOR_EQ color[n]\n else\n   EXPECT_PIXEL_COLOR_EQ color[n - age] // beware of off by one bugs\n\nThat is the functional test for this change, to make sure the contents of the buffer have actually been preserved, and age doesn\u0027t have off-by-one bugs (assuming the test itself doesn\u0027t!)",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de08cff4_930032bf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-10T20:07:17Z",
      "side": 1,
      "message": "The spec says:\n\n\u003e If the EGL implementation decides to free un-used back-buffers\n\u003e when the system is under memory pressure or in response to\n\u003e power-management events then EGL will return an age of 0 when\n\u003e it allocates a new buffer at the start of a new frame.\n\nWhat guarantee do we have that the Vulkan swapchain doesn\u0027t similarly free back-buffers that are not being rendered to and aren\u0027t owned by the application?",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fdf630e_d6c11ca0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-11T15:54:34Z",
      "side": 1,
      "message": "The VkImages for the VkSwapchain, I think are completely allocated at vkCreateSwapchain. They can only be replaced/resized/reallocated at vkCreateSwapchain. This was an original requirement that the images could be coded into the pipeline. No Swapbuffers like behavior. So I don\u0027t think this scenario can work with Vulkan. If i\u0027m wrong, I would think it would still require a new call to vkCreateSwapchain and recreate the buffers?",
      "parentUuid": "de08cff4_930032bf",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "504d6a2d_b184b4db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-11T15:54:34Z",
      "side": 1,
      "message": "Rely to Shahbaz comments. Please check if they seem right to you.",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a9dc64a_0d7cf4f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-11T15:54:34Z",
      "side": 1,
      "message": "Ready, will be in next patch.",
      "parentUuid": "f1e73986_3ba92f9c",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc584615_59dd0e58",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-11T17:49:11Z",
      "side": 1,
      "message": "Can we get a guarantee from the working group, or add explicit spec language about the image contents being retained? Without such a guarantee the implementation is free to delete the image memory and reallocate it on ANI. As long as the implementation retains the handle values, this can still be satisfied: \"This was an original requirement that the images could be coded into the pipeline.\"",
      "parentUuid": "0fdf630e_d6c11ca0",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41d26600_9c2d050f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-18T00:48:39Z",
      "side": 1,
      "message": "I can go verify, its been a long time since I last looked at this. I have the privilege of asking the WSI WG too.",
      "parentUuid": "bc584615_59dd0e58",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "257d0c4d_2c35a81b",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1254,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-10T20:07:17Z",
      "side": 1,
      "message": "Please move this (and currentImage.mFrameNumber \u003d mFrameCount) to swapImpl.",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11e83111_302630d4",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1254,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-11T15:54:34Z",
      "side": 1,
      "message": "I do like moving the math and any overhead to getBufferAge().\nUnfortunately, We end up updating the mFrameNumber of the Image, without capturing the difference for age:\n\n    // EGL_EXT_buffer_age - When an image becomes render target we mark\n    // its FrameNumber with the current mFrameCount.\n    mSwapchainImages[mCurrentSwapchainImageIndex].mFrameNumber \u003d ++mFrameCount;",
      "parentUuid": "257d0c4d_2c35a81b",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2154429_c117c8d2",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1254,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-11T17:49:11Z",
      "side": 1,
      "message": "The problem is that you are setting mFrameNumber for the current image that was swapped in, but you should probably be setting it for the image that was swapped out. In other words, instead of:\n\n- ANI\n- mFrameNumber \u003d N\n- Draw    // age query needs age cached\n- QP\n\nYou can do:\n\n- ANI\n- Draw    // age query can use mFrameNumber\n- mFrameNumber \u003d N\n- QP",
      "parentUuid": "11e83111_302630d4",
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5a8586a_5d7ce32e",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1909,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-10T20:07:17Z",
      "side": 1,
      "message": "Shouldn\u0027t need to cache this. The logic above (from WindowSurfaceVk::swap) can be moved here.",
      "range": {
        "startLine": 1909,
        "startChar": 15,
        "endLine": 1909,
        "endChar": 25
      },
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4469042b_997b6b99",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 7
      },
      "lineNbr": 1909,
      "author": {
        "id": 1359249
      },
      "writtenOn": "2021-02-11T15:54:34Z",
      "side": 1,
      "message": "Because of above, mFrameCount, and currentImage-\u003emFrameNumber are the same, and so getBufferAge always returns 0.\n\negl::Error WindowSurfaceVk::getBufferAge(EGLint *age) const\n{\n    // EGL_EXT_buffer_age - Age \u003d difference between the current frame number\n    // and the frame the image was last drawn.\n    const SwapchainImage *currentImage \u003d \n             \u0026mSwapchainImages[mCurrentSwapchainImageIndex];\n    if (currentImage-\u003emFrameNumber \u003d\u003d 0)\n    {\n        *age \u003d 0;  // Has not been used for rendering yet, no age.\n    }\n    else\n    {\n        *age \u003d static_cast\u003cEGLint\u003e(mFrameCount - currentImage-\u003emFrameNumber);\n    }\n    return egl::NoError();",
      "parentUuid": "a5a8586a_5d7ce32e",
      "range": {
        "startLine": 1909,
        "startChar": 15,
        "endLine": 1909,
        "endChar": 25
      },
      "revId": "89d932748de7952930dc6b6d1198537595ea8d03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}