{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "df048ee6_b46bfd03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-17T03:04:17Z",
      "side": 1,
      "message": "This looks like good cleanup and should make things clearer moving forward, but it\u0027s too big to review too closely so I\u0027m going to rely on the bots to catch things.",
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "875fc83b_ca5c27f6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1107,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-17T03:04:17Z",
      "side": 1,
      "message": "Do we want to use inheritance here or have OutsideRenderPassCommandBufferHelper/RenderPassCommandBufferHelper have a CommandBufferHelperCommon member to hold those values.\n\nI think the general feedback is to avoid inheritance and use composition instead in these types of cases.",
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d651ccc_5a946d79",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1107,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-17T03:54:04Z",
      "side": 1,
      "message": "I went with inheritance because \"Outside/RP CB Helper\" *is* a \"CB Helper\". It makes things a bit simpler too given that it provides member functions callable on both CB helpers.\n\nIn a few cases, a pointer to CommandBufferHelperCommon is passed to functions where the logic is identical for both CB helpers.",
      "parentUuid": "875fc83b_ca5c27f6",
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9f31fb4_fbd3e9b3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1107,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-22T20:02:06Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "6d651ccc_5a946d79",
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05cce23b_790eee6e",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1119,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-17T03:04:17Z",
      "side": 1,
      "message": "If you keep inheritance:\nThese types of functions should be declared pure virtual in CommandBufferHelperCommon.",
      "range": {
        "startLine": 1113,
        "startChar": 0,
        "endLine": 1119,
        "endChar": 57
      },
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6f09f77_3b2670b0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1119,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-17T03:54:04Z",
      "side": 1,
      "message": "virtual will just be extra cost. The caller always knows on which CB helper it\u0027s calling these on, so there\u0027s no need for virtual-ness.",
      "parentUuid": "05cce23b_790eee6e",
      "range": {
        "startLine": 1113,
        "startChar": 0,
        "endLine": 1119,
        "endChar": 57
      },
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a847f72_b16eae11",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1119,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-12-22T20:02:06Z",
      "side": 1,
      "message": "Ack\n\nI didn\u0027t realize virtual functions were so expensive:\nhttps://stackoverflow.com/questions/449827/virtual-functions-and-performance-c\n\nObviously that will vary on different platforms, but that\u0027s quite a lot of overhead.",
      "parentUuid": "a6f09f77_3b2670b0",
      "range": {
        "startLine": 1113,
        "startChar": 0,
        "endLine": 1119,
        "endChar": 57
      },
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "829c25e8_e3411885",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 3
      },
      "lineNbr": 1119,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-12-24T03:22:47Z",
      "side": 1,
      "message": "/nod\n\nThere are many things at play that make it inefficient, the compiler cannot inline the functions, the CPU can mispredict the jump target, the call itself is prefixed with a load of the function address from the object\u0027s vtable etc.\n\nOne of the things I have in the back of my mind for things to try to squeeze a bit more performance out (when we run out of things to optimize) is for example to turn some of the ANGLE \"features\" into constexpr constants in the final build; for example asyncCommandQueue can be a constant which eliminates some ifs, and most importantly allows LTO to devirtualize the command-processor class (or we\u0027d have to do it manually). Another is to change the way the files are built so we can have single-backend builds build the front-end and back-end objects together, both allowing the backend to be devirtualized and function calls in it inlined.\n\nBut again, that\u0027d be a job for when really having nothing left to optimize!",
      "parentUuid": "2a847f72_b16eae11",
      "range": {
        "startLine": 1113,
        "startChar": 0,
        "endLine": 1119,
        "endChar": 57
      },
      "revId": "d747adaed72a072b1ade551ae75879a2667c0074",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}