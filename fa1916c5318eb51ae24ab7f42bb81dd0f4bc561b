{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4d6234c1_1125a6be",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T16:33:02Z",
      "side": 1,
      "message": "PTAL - trivial change",
      "revId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba7b051e_be0b4c23",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4190,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-18T19:02:01Z",
      "side": 1,
      "message": "We are supposed to reset the subpass every time the render pass closes (`onRenderPassFinished`). If we are closing a render pass without that call, it\u0027s a problem. Could you please give some details of how this is happening? The test runs fine on swiftshader",
      "revId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cb4b6d4_69fbc46c",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4190,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T20:16:20Z",
      "side": 1,
      "message": "\u003e We are supposed to reset the subpass every time the render pass closes\n\nnot really? i mean if the updated renderpass also contains unresolve attachments then subpass index doesnt need to be reset\n\n\u003e The test runs fine on swiftshader\n\nthen there is still a gap between swiftshader and our ICD\n\nthis is the validation error we see internally before the test fails -\n```\nVkGraphicsPipelineCreateInfo-renderPass-06046 ] Object 0: handle \u003d 0xde10000000de1,\ntype \u003d VK_OBJECT_TYPE_RENDER_PASS; | MessageID \u003d 0x9391d499 |\nvkCreateGraphicsPipelines(): pCreateInfos[0].subpass (1) is out of range for this\nrenderpass (0..0). The Vulkan spec states: If renderPass is not VK_NULL_HANDLE,\nsubpass must be a valid subpass within renderPass\n(https://www.khronos.org/registry/vulkan/specs/1.3-\nextensions/html/vkspec.html#VUID-VkGraphicsPipelineCreateInfo-renderPass-06046)\n```",
      "parentUuid": "ba7b051e_be0b4c23",
      "revId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de8c3428_b1496f57",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4190,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-18T20:31:26Z",
      "side": 1,
      "message": "\u003e \u003e We are supposed to reset the subpass every time the render pass closes\n\n\u003e not really? i mean if the updated renderpass also contains unresolve attachments then subpass index doesnt need to be reset\n\n`onRenderPassFinished` does that, so yes really. If the new render pass has unresolve, the subpass index still has to be reset because the unresolve commands should be recorded to subpass 0.\n\nI understand there\u0027s a bug, I\u0027m afraid this is hiding a bigger problem. Do you think you can figure out why the `resetSubpass` call in `ContextVk::onRenderPassFinished` is not taking care of this? Is that function just not called? Is it called but `mRenderPassCommandBuffer` is nullptr? What happens if you move the `resetSubpass` call out of the `if` in that function?",
      "parentUuid": "9cb4b6d4_69fbc46c",
      "revId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11fb3506_3fa0ec1b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 4190,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-18T21:49:52Z",
      "side": 1,
      "message": "ok, looks like i was missing this -\u003e https://chromium-review.googlesource.com/c/angle/angle/+/5407073\n\nwe no longer fail with this cherry-pick\u0027d",
      "parentUuid": "de8c3428_b1496f57",
      "revId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "fa1916c5318eb51ae24ab7f42bb81dd0f4bc561b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}