{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44f302d6_2e089698",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-08T10:00:36Z",
      "side": 1,
      "message": "This one might be a bit controversial, maybe the assertion should be moved elsewhere. but I\u0027m not sure where. ",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3b1b3c3_f41ad1b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-08T16:36:30Z",
      "side": 1,
      "message": "Maybe it\u0027s better to fix this by calling a different method if the texture is not cube complete and is a cube map?",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7da8e9de_0a41e080",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-06-08T18:29:37Z",
      "side": 1,
      "message": "Same here.  I\u0027m hesitant to remove ASSERTs from ANGLE to support capture.  Maybe we need a getBaseLevelDescForCapture that doesn\u0027t require cube complete?",
      "parentUuid": "b3b1b3c3_f41ad1b3",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "773c5356_cbcb23e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-08T20:09:33Z",
      "side": 1,
      "message": "The assert is there for a reason. If the levels are inconsistent you should be indexing them.",
      "parentUuid": "7da8e9de_0a41e080",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dce4cd27_dbb1eaf9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-09T11:33:13Z",
      "side": 1,
      "message": "The call chain leading to the assertion doesn\u0027t seem to be very capture specific, i.e. it is called from syncState, and this is triggered by  getTexImage: \n\n\nTextureState::getBaseLevelDesc() const at Texture.cpp:?\nrx::TextureVk::getBaseLevelFormat ... at TextureVk.cpp:3008\nrx::TextureVk::ensureImageInitialized ... at TextureVk.cpp:2230\nrx::TextureVk::syncState ... at TextureVk.cpp:2523\ngl::Texture::syncState ... at Texture.cpp:2021\ngl::Texture::getTexImage ... \n\n\nSo I don\u0027t think there is a simple way to work around this. For now my proposal is to skip get getTexImage if the texture is cube and not cube complete. There is a caveat, but I don\u0027t think it is really an issue, certainly not as long as the serialized state is actually de-serialized and used to start a trace.",
      "parentUuid": "773c5356_cbcb23e0",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffef9b95_ba455f7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-09T11:33:13Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "773c5356_cbcb23e0",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10ff5352_50fd6f70",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T13:31:55Z",
      "side": 1,
      "message": "It is capture related. getTexImage is an extension we added for capture specifically. So it\u0027s covering code paths we don\u0027t support via other GL APIs. If the image is not complete, would need to look at the getTexImage API and see what makes sense.",
      "parentUuid": "ffef9b95_ba455f7c",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5512a36e_08279099",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-09T15:27:50Z",
      "side": 1,
      "message": "I know that you added the extension for GLES, GetTexImage is part of OpenGL though, and if you ever consider also supporting this, then it would have to follow that standard. \n\nIt seems that GetTexImage is not defining any specific behavior if the texture is  not complete, so it\u0027s hard to say what would make sense to do in such a case. \n\nBut back to the code, the call that leads to the assert is actually Texture::syncState, and this is called from many places, but I also see that there is http://anglebug.com/4058, but it is marked as fixed. \n\nI reordered the series, so that this patch is no longer required to get the other stuff landed, so I think I\u0027ll take a deep dive to see whether this can be fixed correctly.",
      "parentUuid": "10ff5352_50fd6f70",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bc41a2dd_3dd2ffd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-09T15:40:24Z",
      "side": 1,
      "message": "ANGLE implements GLES right now, and for the forseeable future, so GetTexImage is only implemented for the ANGLE ext. We do want similar/same functionality in general. Looking at the API, the cube face is specified in the target parameter, so this API should work for incomplete cube textures. That means we shouldn\u0027t be calling syncState, and a proper fix would be to handle the texture update (if necessary) in the back-end without touching dirty bits. It could be annoying for some edge cases, like a cube map that could never be complete - we\u0027d need to read back staged data somehow.\n\nSGTM on reordering, this does seem a minor issue that is a bit annoying to fix. Also skipping capture for non-cube-complete cube maps is a reasonable workaround while we don\u0027t have a complete fix so LGTM.",
      "parentUuid": "5512a36e_08279099",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9178a560_c1d82c8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1491823
      },
      "writtenOn": "2021-06-10T07:00:48Z",
      "side": 1,
      "message": "I took another look at the code and tried to skip the syncState, but TextureVk::getTexImage leads to calling ensureImageInitialized on its own for an incomplete cube map. I\u0027ve also seen the part of the staged data, that looks a bit scary.",
      "parentUuid": "bc41a2dd_3dd2ffd6",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f58a9a52_65234d90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-16T19:56:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9178a560_c1d82c8e",
      "revId": "7d63dfa2f73a105c10ee45d019e9caccbaaa94be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}