{
  "comments": [
    {
      "key": {
        "uuid": "dccded4d_a93b32ba",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3027,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2020-03-09T20:33:37Z",
      "side": 1,
      "message": "Can be const I think",
      "range": {
        "startLine": 3027,
        "startChar": 4,
        "endLine": 3027,
        "endChar": 23
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "126a1419_9e17ed02",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 8
      },
      "lineNbr": 3027,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-10T17:07:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dccded4d_a93b32ba",
      "range": {
        "startLine": 3027,
        "startChar": 4,
        "endLine": 3027,
        "endChar": 23
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3babfd7d_a3500f3b",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2020-03-09T20:33:37Z",
      "side": 1,
      "message": "nit: doesn\u0027t need to be const ref",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f8f8370_10f9ee4a",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-10T17:07:25Z",
      "side": 1,
      "message": "For the full context on how this is used:\nhttps://chromium-review.googlesource.com/c/angle/angle/+/2072652/40/src/libANGLE/renderer/glslang_wrapper_utils.cpp#1878\n\nUnfortunately, GenerateTransformFeedbackExtensionOutputs() needs to be able to update this value so it can be used later during AssignLocations(), both during GlslangGetShaderSource() and later in ProgramPipelineVk::link().\n\nThe alternative is to have:\n\n    uint32_t getLocationsUsedForXfbExtension() const\n    {\n        return mLocationsUsedForXfbExtension;\n    }\n    void setLocationsUsedForXfbExtension(uint32_t locationsUsedForXfbExtension)\n    {\n        mLocationsUsedForXfbExtension \u003d locationsUsedForXfbExtension;\n    }\n\nHowever, that would mean removing the \u0027const\u0027 qualifier on the ProgramState that\u0027s passed through the full GlslangGetShaderSource() call chain so setLocationsUsedForXfbExtension() could be called.   That felt a little worse than cheating with a const_cast\u003c\u003e in a single place, since the ProgramState really is const otherwise:\n\nvoid GlslangGetShaderSource(GlslangSourceOptions \u0026options,\n                            const gl::ProgramState \u0026programState,\n                            const gl::ProgramLinkedResources \u0026resources,\n                            gl::ShaderMap\u003cstd::string\u003e *shaderSourcesOut,\n                            gl::ShaderMap\u003cShaderInterfaceVariableInfoMap\u003e *variableInfoMapOut)\n{\n...\n            if (options.supportsTransformFeedbackExtension)\n            {\n                GenerateTransformFeedbackExtensionOutputs(\n                    programState, resources, vertexSource,\n                    \u0026(*variableInfoMapOut)[gl::ShaderType::Vertex],\n                    \u0026(const_cast\u003cuint32_t \u0026\u003e(programState.getLocationsUsedForXfbExtension())));\n            }\n\nThe other option is to find somewhere else for that value to live that will survive until ProgramPipelineVk::link() (draw time) for each program, though most everything is already marked \u0027const\u0027.",
      "parentUuid": "3babfd7d_a3500f3b",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a16e94e_89e55cc6",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-12T21:32:41Z",
      "side": 1,
      "message": "Can you make it live in ProgamExecutable?",
      "parentUuid": "2f8f8370_10f9ee4a",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c97c762_555e8800",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-12T23:16:05Z",
      "side": 1,
      "message": "Yeah, it can live in ProgramExecutable.\n\nIt wouldn\u0027t really change much here:\n- we can pass in a non-const ProgramExecutable* throughout here also so I can call the get/set\nOR\n- update it to const_cast\u003c\u003e the programState.mExecutable",
      "parentUuid": "2a16e94e_89e55cc6",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc097d6_976b43e2",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-03-13T00:05:40Z",
      "side": 1,
      "message": "Let\u0027s chat tomorrow. It\u0027s kind of a mystery to me why you need to use an int reference or do a const cast.",
      "parentUuid": "8c97c762_555e8800",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "026bbd25_28cda665",
        "filename": "src/libANGLE/Program.h",
        "patchSetId": 8
      },
      "lineNbr": 350,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-03-13T15:33:31Z",
      "side": 1,
      "message": "Sounds good.\n\nTo clarify, the only requirement is that the uint32_t value is updatable and stored somewhere.   Whichever object holds it (ProgramState, ProgramExecutable, etc.) needs to be modifiable by either:\n- being non-const from the beginning (feels heavy-handed since we only update 1 value)\nOR\n- const_cast\u003c\u003e\u0027ed (feels like cheating)",
      "parentUuid": "cfc097d6_976b43e2",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 20
      },
      "revId": "55d9a36d6e80a5fd42347fb3a98a9d7d207dcc01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}