{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9a9b72da_6cc070ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T02:18:26Z",
      "side": 1,
      "message": "Thanks Shabi, will address the feedback after others commented.",
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd975687_35a185db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:08Z",
      "side": 1,
      "message": "Looks good except the union \u0026 a few minor cleanups. If you get stuck on the union thing, let me know what the blocker is, I think we can resolve it.",
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71a162a3_de7697c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-06T16:56:19Z",
      "side": 1,
      "message": "LGTM with Jamie\u0027s comments.",
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ae509604_c2dfb8b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-06T18:34:41Z",
      "side": 1,
      "message": "LGTM",
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "596ef21d_8821ce08",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-06T16:56:19Z",
      "side": 1,
      "message": "Assuming we\u0027ll need a call for every specialization constant, including any new ones added in the future, can this just be a single setSpecializationConstants() that takes the full \u0027optionBits\u0027?   Then setSpecializationConstants() can be simplified to the following, and adding a new spec constant is just adding a single line there:\n\n    void ShaderProgramHelper::setSpecializationConstant(ProgramTransformOptions optionBits)\n    {\n        mSpecializationConstants.lineRasterEmulation \u003d optionBits.enableLineRasterEmulation;\n        mSpecializationConstants.surfaceRotation \u003d optionBits.surfaceRotation;\n    }",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21ecf9c8_00a0e4f7",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 1290487
      },
      "writtenOn": "2020-11-06T18:34:41Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "596ef21d_8821ce08",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5caf3c0_afc76e9b",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "This is a bit tricky to do without moving the definition of ProgramTransformOptions to a different file, due to the header inclusion order, or I will have to change to pass in via pointer. The reason I did this way is that I was thinking that in future we may need to pass the actual float value to the program. For example, if we want to send down viewport size as specialization constant or depth range value etc. So in some way this is try to be a bit future proof as well.",
      "parentUuid": "21ecf9c8_00a0e4f7",
      "range": {
        "startLine": 160,
        "startChar": 0,
        "endLine": 163,
        "endChar": 73
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afe7922a_bc503e6f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 677,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-06T16:56:19Z",
      "side": 1,
      "message": "nit: Pull these out of the local variable declarations to group them better:\n\n    const gl::State \u0026glState                    \u003d contextVk-\u003egetState();\n    ProgramInfo \u0026programInfo                    \u003d getGraphicsProgramInfo(mTransformOptions);\n    RendererVk *renderer                        \u003d contextVk-\u003egetRenderer();\n    vk::PipelineCache *pipelineCache            \u003d nullptr;\n\n    const gl::ProgramExecutable *glExecutable \u003d glState.getProgramExecutable();\n    ASSERT(glExecutable \u0026\u0026 !glExecutable-\u003eisCompute());\n\n    // Specialization Constants\n    mTransformOptions.enableLineRasterEmulation \u003d contextVk-\u003eisBresenhamEmulationEnabled(mode);\n    mTransformOptions.surfaceRotation           \u003d static_cast\u003cuint8_t\u003e(desc.getSurfaceRotation());",
      "range": {
        "startLine": 676,
        "startChar": 0,
        "endLine": 677,
        "endChar": 98
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8a66c34_f313eb45",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 10
      },
      "lineNbr": 677,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afe7922a_bc503e6f",
      "range": {
        "startLine": 676,
        "startChar": 0,
        "endLine": 677,
        "endChar": 98
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2f74e37_796158ec",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:08Z",
      "side": 1,
      "message": "nit: avoid the anonymous struct. no need for it and it clashes with our other bit packing patterns.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 59,
        "endChar": 6
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b76ffc0_1901be77",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2f74e37_796158ec",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 59,
        "endChar": 6
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27ad9633_64232075",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:08Z",
      "side": 1,
      "message": "nit: \"Program\" is redundant since you\u0027re always scoped to ProgramTransformOptions. can remove it.",
      "range": {
        "startLine": 60,
        "startChar": 30,
        "endLine": 60,
        "endChar": 54
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e363c73e_c091698c",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 60,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27ad9633_64232075",
      "range": {
        "startLine": 60,
        "startChar": 30,
        "endLine": 60,
        "endChar": 54
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8ee750f_8a871df4",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 272,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-11-06T16:56:19Z",
      "side": 1,
      "message": "nit: SPIR-V",
      "range": {
        "startLine": 272,
        "startChar": 69,
        "endLine": 272,
        "endChar": 73
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0070f076_7ef848a0",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.h",
        "patchSetId": 10
      },
      "lineNbr": 272,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e8ee750f_8a871df4",
      "range": {
        "startLine": 272,
        "startChar": 69,
        "endLine": 272,
        "endChar": 73
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d36222c9_487cd814",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 480,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:08Z",
      "side": 1,
      "message": "this clashes with ANGLE\u0027s code style. pull two bits off of the compare op instead of using a union. try to avoid unions if possible. don\u0027t worry about microscopic nano-optimizations for pulling bits off for the transition mask.",
      "range": {
        "startLine": 466,
        "startChar": 0,
        "endLine": 480,
        "endChar": 6
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a88a5ef_9f3e1550",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 480,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:33Z",
      "side": 1,
      "message": "three bits*",
      "parentUuid": "d36222c9_487cd814",
      "range": {
        "startLine": 466,
        "startChar": 0,
        "endLine": 480,
        "endChar": 6
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9848e3e4_f1f10543",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 480,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "I chnaged it to struct",
      "parentUuid": "2a88a5ef_9f3e1550",
      "range": {
        "startLine": 466,
        "startChar": 0,
        "endLine": 480,
        "endChar": 6
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36cbeb01_74eaf6cb",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 689,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-11-06T15:59:08Z",
      "side": 1,
      "message": "nit: either make these private or make this a struct. You can use inline init instead of the constructor.",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 689,
        "endChar": 29
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99db10b4_575f9e71",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 10
      },
      "lineNbr": 689,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-11-06T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36cbeb01_74eaf6cb",
      "range": {
        "startLine": 688,
        "startChar": 0,
        "endLine": 689,
        "endChar": 29
      },
      "revId": "084645bf20512ef10997f16567eda08cae656db5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}