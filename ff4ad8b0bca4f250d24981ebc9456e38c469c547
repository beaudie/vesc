{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f491c90c_da06874b",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1114,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-13T14:50:43Z",
      "side": 1,
      "message": "Hmm, why can\u0027t this call be replaced with `removeActiveThreadAndPerformCleanup`?\n\nif `mActiveThreads.size() \u003e 1`, `removeActiveThreadAndPerformCleanup()` and `removeActiveThread()` calls are equivalent.\n\nif `mActiveThreads.size() \u003d\u003d 1`, then the thread calling eglTerminate is the last active thread - shouldn\u0027t we be performing the cleanup right away then? If I\u0027m missing something, could you add a comment to the code explaining why `removeActiveThreadAndPerformCleanup` can\u0027t be called here?",
      "range": {
        "startLine": 1114,
        "startChar": 8,
        "endLine": 1114,
        "endChar": 26
      },
      "revId": "ff4ad8b0bca4f250d24981ebc9456e38c469c547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ec0eb52_90193e16",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1114,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-13T16:48:13Z",
      "side": 1,
      "message": "wanted to keep `removeActiveThread` as a simple helper that does just 1 thing.\n\nI was thinking about this a bit more and it is not at all necessary to call `removeActiveThread` here. We can have good logical separation by allowing thread destruction call to perform any necessary cleanup and let `Display::terminate` not call into any additional cleanup routine. There is no value added by preempting the existing call flow with the clean up call flow when we can just wait for the thread to be destroyed and handle the clean up there. Let me know your thoughts",
      "parentUuid": "f491c90c_da06874b",
      "range": {
        "startLine": 1114,
        "startChar": 8,
        "endLine": 1114,
        "endChar": 26
      },
      "revId": "ff4ad8b0bca4f250d24981ebc9456e38c469c547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f34cc1f_151d85ad",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1114,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2022-07-13T18:31:04Z",
      "side": 1,
      "message": "\u003e when we can just wait for the thread to be destroyed and handle the clean up there\n\nBut the thread may not be destroyed for a while though? It might do another eglInitialize or just hang around for whatever reason. For example, a thread could do eglInitialize -\u003e test -\u003e eglTerminate in a loop, and then we would postpone all cleanups until the very end.\n\nGiven that the thread explicitly called eglTerminate, shouldn\u0027t we go ahead with the cleanup simply by calling `removeActiveThreadAndPerformCleanup` here? Are you seeing some potential issues we could run into by doing this?",
      "parentUuid": "1ec0eb52_90193e16",
      "range": {
        "startLine": 1114,
        "startChar": 8,
        "endLine": 1114,
        "endChar": 26
      },
      "revId": "ff4ad8b0bca4f250d24981ebc9456e38c469c547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d52133d_4b09a31f",
        "filename": "src/libANGLE/Display.cpp",
        "patchSetId": 19
      },
      "lineNbr": 1114,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-07-13T18:52:18Z",
      "side": 1,
      "message": "\u003e For example, a thread could do eglInitialize -\u003e test -\u003e eglTerminate in a loop, and then we would postpone all cleanups until the very end\n\nif that was the only active thread and the test did something like this -\n```\n for (...)\n {\n     eglInitialize\n     test(...)\n     {\n         create context\n         create surface\n         makecurrent\n         draw\n         unmakecurrent\n     }\n     eglTerminate\n }\n```\n\nthen the regular flow of terminate will free all resources",
      "parentUuid": "4f34cc1f_151d85ad",
      "range": {
        "startLine": 1114,
        "startChar": 8,
        "endLine": 1114,
        "endChar": 26
      },
      "revId": "ff4ad8b0bca4f250d24981ebc9456e38c469c547",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}