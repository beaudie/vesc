{
  "comments": [
    {
      "key": {
        "uuid": "77698514_6dcdb307",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-06-17T14:47:52Z",
      "side": 1,
      "message": "It\u0027s fine to no-op these for now but it might let us implement a ring buffer in GL in the future.\n\nSay the user creates a buffer with the DYNAMIC hint. If the user then maps the buffer for write, we must assume that the user can overwrite some bits but not others. If the user maps with INVALIDATE_RANGE then we can discard the whole region and allocate a new chunk from the dynamic buffer.\n\nThis is a performance optimization though so it\u0027s not high priority to fix immediately.\n\nCommented in issue 3213.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 18,
        "endChar": 34
      },
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2ecdc70_c2a5227e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-06-17T14:59:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "77698514_6dcdb307",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 18,
        "endChar": 34
      },
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c543f4c_fff9e7d9",
        "filename": "src/libANGLE/renderer/vulkan/BufferVk.cpp",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-06-17T18:12:00Z",
      "side": 1,
      "message": "Is mapImpl() necessary anymore?   It looks like you can just call directly to mapRangeImpl() from here without really losing any readability.",
      "range": {
        "startLine": 161,
        "startChar": 11,
        "endLine": 161,
        "endChar": 18
      },
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77558223_531e6700",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-06-17T14:47:52Z",
      "side": 1,
      "message": "this looks like it doesn\u0027t belong in submitcommands. I would rather see this inserted in the locations where buffers are adding barriers. How feasible is it to do that?",
      "range": {
        "startLine": 833,
        "startChar": 8,
        "endLine": 833,
        "endChar": 38
      },
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9365b509_f6421ee4",
        "filename": "src/libANGLE/renderer/vulkan/CommandGraph.cpp",
        "patchSetId": 2
      },
      "lineNbr": 833,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2019-06-17T14:59:58Z",
      "side": 1,
      "message": "It would be inefficient to do so. You wouldn\u0027t want to add such a barrier after every buffer write (which would effectively flush it from the GPU caches) because you may write to it later or need to read from it.\n\nThis makes sure there is only a single flush for all writes to host-visible-buffers. It\u0027s analogous to the memory barriers inserted in `visitAndExecute()`, which is also called from `submitCommands`.\n\nAn alternative could be to add a special node to execute this and insert it before calling `submitCommands`, though that would be the same thing with extra overhead.",
      "parentUuid": "77558223_531e6700",
      "range": {
        "startLine": 833,
        "startChar": 8,
        "endLine": 833,
        "endChar": 38
      },
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c391122_808df634",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1189,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2019-06-17T18:12:00Z",
      "side": 1,
      "message": "Maybe this is just reiterating Jamie\u0027s comment, but looking at the various bits and their meanings:\n\n\u003e VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT bit specifies that memory allocated with this type can be mapped for host access using vkMapMemory.\n\n- The memory can be mapped, but this doesn\u0027t necessarily mean that it is mapped so we may be adding unnecessary barriers to keep memory coherent that no one is looking at.   Are we doing too many barriers by only looking at VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT and not whether the memory is actually mapped also (assumign we know that)?\n\n\u003e VK_MEMORY_PROPERTY_HOST_COHERENT_BIT bit specifies that the host cache management commands vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges are not needed to flush host writes to the device or make device writes visible to the host, respectively.\n\n- Based on this code, this is how OpenGL expects to behave by default and the caller should use additional flags to override that behavior.   Should we set this flag by default or would that kill performance too much and the extra work to do it only when necessary is worth the effort?\n\n\u003e VK_MEMORY_PROPERTY_HOST_CACHED_BIT bit specifies that memory allocated with this type is cached on the host. Host memory accesses to uncached memory are slower than to cached memory, however uncached memory is always host coherent.\n\n- Presumably the Vulkan driver is doing the work to keep the uncached memory coherent, so there\u0027s no work needed for us.",
      "revId": "8455181fd688cade530f9ad6c418c233fdd291be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}