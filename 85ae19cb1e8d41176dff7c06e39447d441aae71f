{
  "comments": [
    {
      "key": {
        "uuid": "ab110656_a8ca9dfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "It looks like enabling the feature is missing from this CL, so a lot of the code isn\u0027t being tested.\n\nCan you enable that here too?",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ec13168_05de8a6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:42:12Z",
      "side": 1,
      "message": "This may give us some other ways to tackle mediump stuff if we\u0027re finding the precision qualifier stuff isn\u0027t behaving exactly how we\u0027d like:\n\nhttps://www.lunarg.com/wp-content/uploads/2020/05/Automatic-RelaxedPrecision-Decoration-and-Conversion-in-Spirv-Opt_r1.pdf\n\nThe stuff about spirv-opt --convert-relaxed-to-half and when to use it seems relevant:\n\nUnfortunately, some Vulkan drivers such as MoltenVK ignore the RelaxedPrecision directive,\nusually because the underlying implementation (in the case of MoltenVK, Metal), does not\nsupport the RelaxedPrecision semantics. If it is the situation, however, that the underlying\nimplementation does support a true 16-bit floating point type (as it is with Metal), benefits of\nRelaxedPrecision semantics can be achieved by converting RelaxedPrecision instructions to\ntrue 16-bit-type instructions using the VK_KHR_shader_float16_int8 extension.\n\nTo this end, the --convert-relaxed-to-half pass has been added to spirv-opt. This\npass translates all arithmetic float32 instructions decorated with RelaxedPrecision to 16-bit\nfloating point (float16 aka half) instructions, adding additional conversion instructions for\noperands and results where needed.",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "785231a7_2b24407a",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1587,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "programPipeline-\u003egetMergedVaryings",
      "range": {
        "startLine": 1587,
        "startChar": 12,
        "endLine": 1587,
        "endChar": 52
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce51006c_2513c86f",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1587,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "785231a7_2b24407a",
      "range": {
        "startLine": 1587,
        "startChar": 12,
        "endLine": 1587,
        "endChar": 52
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a8e1960_0e1002e4",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1310,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "gfxbench does this the other way, where the VS uses highp (output) and the FS uses mediump (input):\n\n  [INFO ]: Using highp in vs.\n  [INFO ]: Using mediump in fs.\n\nRegardless, we shouldn\u0027t be assuming in these comments what the programs are doing and just indicate that we are updating the types to match what\u0027s specified in the shaders.",
      "range": {
        "startLine": 1309,
        "startChar": 0,
        "endLine": 1310,
        "endChar": 86
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81382ae0_e76a936c",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1310,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "This is an input (!info-\u003evaryingIsOutput) and info-\u003ecastPrecision is true, therefore the incoming precision is mediump and the shader\u0027s precision is highp. Those conditions are required to get to this spot.",
      "parentUuid": "9a8e1960_0e1002e4",
      "range": {
        "startLine": 1309,
        "startChar": 0,
        "endLine": 1310,
        "endChar": 86
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91793912_04323222",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1536,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "Why is it safe to assume they are only down-casting values?   What happens if a program uses mediump in the VS and outputs to the FS as highp (assuming that\u0027s possible, of course)?",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51b6a772_0b37839d",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.cpp",
        "patchSetId": 26
      },
      "lineNbr": 1536,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "In that case, info-\u003ecastPrecision for VS will be false and info-\u003ecastPrecision for FS will be true (for this varying). The varying will be marked as an input so we know it\u0027s coming in as mediump and the FS shader wants it to be highp.",
      "parentUuid": "91793912_04323222",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "303a3d65_24a145b4",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "How do we know what to cast it to?   Should this be an enum with something like:\n\n  enum Precision\n  {\n    NoChange,\n    High,\n    Medium,\n    Low,\n    ...\n  }\n\nSomething like that may even already exist somewhere.",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17121d28_5238173e",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "When there is a mismatch we always transfer mediump.\nWe only set castPrecision to true for varyings that are highp that need to output/input mediump.",
      "parentUuid": "303a3d65_24a145b4",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e916861_bf658f15",
        "filename": "src/libANGLE/renderer/glslang_wrapper_utils.h",
        "patchSetId": 26
      },
      "lineNbr": 85,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-08-28T02:44:25Z",
      "side": 1,
      "message": "I agree with Tim that the above enum is better (minus High). Why do we always transfer mediump? If the VS outputs highp and FS inputs lowp, we should transform VS to output lowp, instead of casting both to mediump!",
      "parentUuid": "17121d28_5238173e",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1e66aca_b40b503f",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 26
      },
      "lineNbr": 895,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "Is this a technical restriction or just to help keep things simple for the initial implementation?",
      "range": {
        "startLine": 894,
        "startChar": 0,
        "endLine": 895,
        "endChar": 38
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8eb33f66_b1fc2913",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 26
      },
      "lineNbr": 897,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "Looks like this is where it would be better to store what we are casting to.",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7875e4b_59e2d26e",
        "filename": "src/libANGLE/renderer/vulkan/ProgramExecutableVk.cpp",
        "patchSetId": 26
      },
      "lineNbr": 904,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "Unfortunately, I don\u0027t quite understand the SPIR-V changes well enough, but...\n\nWhy does the input varying need to know it\u0027s being cast?   Isn\u0027t the output varying being cast to the type this input expects?",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "561e6c79_2c403dea",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 26
      },
      "lineNbr": 92,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "This appears to violate the spec:\n\n7.4. PROGRAM PIPELINE OBJECTS\nAt an interface between program objects, the set of inputs and outputs are considered to match exactly if and only if:\n• Every declared input variable has a matching output, as described above.\n• There are no user-defined output variables declared without a matching input\nvariable declaration.\n• All matched input and output variables have identical precision qualification.\nWhen the set of inputs and outputs on an interface between programs matches\nexactly, all inputs are well-defined except when the corresponding outputs were not\nwritten in the previous shader. However, any mismatch between inputs and outputs\nwill result in a validation failure.\n\nI\u0027m pretty sure dEQP tests this.   Is the feature enabled to test all of this new code?",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 92,
        "endChar": 5
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a992f915_c4d71461",
        "filename": "src/libANGLE/renderer/vulkan/ProgramPipelineVk.cpp",
        "patchSetId": 26
      },
      "lineNbr": 92,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T06:20:48Z",
      "side": 1,
      "message": "Ah, wait, got mixed up.   This change is converting the internally-highp value to a mediump in the output shader so it matches the mediump in the input shader, so it should all be happy.",
      "parentUuid": "561e6c79_2c403dea",
      "range": {
        "startLine": 89,
        "startChar": 0,
        "endLine": 92,
        "endChar": 5
      },
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7edf7e10_0b8608db",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 5935,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-27T05:01:15Z",
      "side": 1,
      "message": "It doesn\u0027t look like the feature is enabled, so I\u0027m not sure this is actually validating the new code yet.",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "959b6856_b71c4ef6",
        "filename": "src/tests/gl_tests/GLSLTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 5935,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-08-27T14:11:15Z",
      "side": 1,
      "message": "Yes, I\u0027ve enabled in a follow-on patch per Jamie\u0027s request.",
      "parentUuid": "7edf7e10_0b8608db",
      "revId": "85ae19cb1e8d41176dff7c06e39447d441aae71f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}