{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc683091_88b50660",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-08-05T01:31:15Z",
      "side": 1,
      "message": "Shabi, Jamie: please review.\n\nThis will fail the s3tc and s3tc-srgb conformance tests on all the trybots; still running a dry run to see what other failures there might be.\n",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c42290b0_f93b6823",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1014,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-05T12:29:11Z",
      "side": 1,
      "message": "nit: is there some kind of symbolic constant you can use here? feel free to use constexpr or anything, just to make this more readable.",
      "range": {
        "startLine": 1014,
        "startChar": 16,
        "endLine": 1014,
        "endChar": 18
      },
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b3b8803_ad81ba28",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-05T02:26:11Z",
      "side": 1,
      "message": "Is the check here really helpful for non-zero levels? If Size0 is mip0\u0027s size and Size0\u003e\u003elevel \u003d\u003d Size, that doesn\u0027t mean that Size\u003c\u003clevel \u003d\u003d Size0. ValidCompressedBaseLevelForWebGL is testing Size\u003c\u003clevel, but that\u0027s not necessarily the actual mip0 size. Given that it\u0027s a shift left (and block size is probably like 4 or 8), that would pass for any level \u003e\u003d 2 or 3.\n\nThe bug says:\n\n\u003e an implicit requirement was added that the 0th level of mipmapped compressed textures must be block-sized\n\nIsn\u0027t it sufficient to only perform this test for level\u003d\u003d0?",
      "range": {
        "startLine": 1063,
        "startChar": 62,
        "endLine": 1064,
        "endChar": 48
      },
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f61c520_6e3a9453",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-08-05T02:37:39Z",
      "side": 1,
      "message": "Tests already exist for level\u003d\u003d0. Understanding that Size\u003c\u003clevel doesn\u0027t necessarily equal Size0, there are still some obviously invalid situations. For example, if width or height\u003d\u003d1 at level 1, that implies level 0 has a width or height of 2 (or 3), which is invalid.\n\nThe new tests that were added in https://github.com/KhronosGroup/WebGL/pull/3304 and that I\u0027m following up on in https://github.com/KhronosGroup/WebGL/pull/3307 verify these constraints. They seem reasonable to me to enforce. What do you think?\n\n(The new angle_end2end_tests in this CL are ports of portions of those WebGL conformance tests, and fail pretty badly without these changes.)",
      "parentUuid": "7b3b8803_ad81ba28",
      "range": {
        "startLine": 1063,
        "startChar": 62,
        "endLine": 1064,
        "endChar": 48
      },
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ab7911_8a94187b",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-05T02:57:26Z",
      "side": 1,
      "message": "Ack. I\u0027m not blocking the change or anything, but I\u0027m curious. What\u0027s somewhat strange to me is why go through the trouble of half-validating level 1, when eventually level 0 will be specified and validated anyway. Like take these two scenarios:\n\n- App defines level 1 as 1x1, then level 0 as 2x2\n- App defines level 1 as 4x4, then level 0 as 9x9\n\nPreviously we failed both when specifying level 0. Now we fail the first scenario earlier (but we still can\u0027t for the second one). I suppose the WebGL WG has discussed this enough, so doesn\u0027t matter if it doesn\u0027t sound particularly useful to me ðŸ˜„",
      "parentUuid": "6f61c520_6e3a9453",
      "range": {
        "startLine": 1063,
        "startChar": 62,
        "endLine": 1064,
        "endChar": 48
      },
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5105a560_bdd6115f",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1064,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-08-05T12:30:35Z",
      "side": 1,
      "message": "I think the early exit in the first scenario prevents potential unwanted allocation attempt. Still, the only difference between these validation functions is that the new one disallows odd sizes for mip level 1.",
      "parentUuid": "48ab7911_8a94187b",
      "range": {
        "startLine": 1063,
        "startChar": 62,
        "endLine": 1064,
        "endChar": 48
      },
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31652b8d_37e296b0",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-08-05T12:42:30Z",
      "side": 1,
      "message": "In the worst case, both validations will occur. Given that the new one currently implicitly includes the old one, should the branching happen earlier?\n\nAlternatively, the new validation could be simplified to\n  return (level \u003d\u003d 1) \u0026\u0026 (size \u0026 1);\n\nbecause all BC formats use only 4x4 blocks.",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee8e83c6_efb7588a",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-08-05T12:50:14Z",
      "side": 1,
      "message": "Oops, missed the negation; the correct expression is\n  return !((level \u003d\u003d 1) \u0026\u0026 (size \u0026 1));",
      "parentUuid": "31652b8d_37e296b0",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9910b53_6eb54549",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-08-05T13:46:53Z",
      "side": 1,
      "message": "I think it\u0027s best to rely on the blockSize (i.e. what the code already does). All BC formats are 4x4, but that doesn\u0027t mean every compressed format would be 4x4.",
      "parentUuid": "ee8e83c6_efb7588a",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53dc2023_5734cacf",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-08-05T14:00:10Z",
      "side": 1,
      "message": "\u003e that doesn\u0027t mean every compressed format would be 4x4\n\nTechnically, non-BC formats do not trigger this codepath (all these checks come from D3D limitations).\n\nJamie brought up another question on Slack: why should D3D-specific dimension checks apply to other backends when not using WebGL mode?",
      "parentUuid": "b9910b53_6eb54549",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb5b246_0e0bb45b",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1394635
      },
      "writtenOn": "2021-08-05T14:33:00Z",
      "side": 1,
      "message": "Looking at this section again, I think the old check may be removed altogether from this block:\n- WebGL requirements are fully covered by the new one.\n- D3D renderer workarounds nonconforming sizes in d3d11::MakeValidSize; that path would be relevant only for non-WebGL users.",
      "parentUuid": "53dc2023_5734cacf",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "afb696d7_a9053c02",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 1066,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2021-08-11T17:59:56Z",
      "side": 1,
      "message": "Removing the old check may break non-WebGL applications using compressed textures. This new check already is more stringent than it used to be; there is a previously-passing part of WebGL\u0027s S3TC and RGTC tests that now generates INVALID_OPERATION. See https://github.com/KhronosGroup/WebGL/pull/3307 .\n\nIt\u0027s a good point that the spec changes were only made to S3TC, BPTC and RGTC in https://github.com/KhronosGroup/WebGL/pull/3304 , and as written this code is applying to ETC formats per CompressedTextureFormatRequiresExactSize. This new block should really only apply to the S3TC, BPTC and RGTC formats; I\u0027ll update the code.",
      "parentUuid": "6fb5b246_0e0bb45b",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c54669c_01cc1d95",
        "filename": "src/tests/gl_tests/WebGLCompatibilityTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3057,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-05T12:29:11Z",
      "side": 1,
      "message": "nit: please comment before each new test.",
      "revId": "b7ec0f8ae4fee336c28fc20e79d2369816a5dae2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}