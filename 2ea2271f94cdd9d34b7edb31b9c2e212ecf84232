{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "35feae37_d60dd4ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-04T04:09:41Z",
      "side": 1,
      "message": "nit: that a texture data upload is followed up by the data upload for the whole mipchain",
      "range": {
        "startLine": 9,
        "startChar": 49,
        "endLine": 10,
        "endChar": 46
      },
      "revId": "2ea2271f94cdd9d34b7edb31b9c2e212ecf84232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "278b227e_9a1ce3d6",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1889,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-04T04:09:41Z",
      "side": 1,
      "message": "Why is this done here, rather than ImageHelper::initStagingBuffer() where we know it\u0027s a texture upload?\n\nMoving this to ImageHelper::initStagingBuffer() would allow DynamicBufferPolicy to revert back to just OneShotUse, since DynamicBuffer wouldn\u0027t have to detect and perform the special handling.   That would also remove the extra overhead of the extra branching, along with reducing the size of this CL pretty significantly.",
      "revId": "2ea2271f94cdd9d34b7edb31b9c2e212ecf84232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc7012a2_bb80a173",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1889,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-03-04T09:57:36Z",
      "side": 1,
      "message": "Unfortunately not. See comment on the previous change that explains a bit more how DynamicBuffer works.\n\nWhen we reach here, we are in the \"oversized allocation\" mode. Say DynamicBuffer has been making 1MB allocations so far. A texture upload comes in that needs 16MB of memory. We want to allocate 16MB*4/3 instead. There\u0027s no way to make OneShotUse work like this, unless the caller is the one who instead calls this same function.\n\nDon\u0027t you think it\u0027s better if this call is made in one place, instead of every (relevant) call site?",
      "parentUuid": "278b227e_9a1ce3d6",
      "revId": "2ea2271f94cdd9d34b7edb31b9c2e212ecf84232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fbc37b7_036434cb",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 4
      },
      "lineNbr": 1889,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-05T06:11:47Z",
      "side": 1,
      "message": "Ah, right, all the other ImageHelper::mStagingBuffer-\u003eallocateWithAlignment() calls would need to be updated also to do the *4/3 resizing.   Makes sense.",
      "parentUuid": "dc7012a2_bb80a173",
      "revId": "2ea2271f94cdd9d34b7edb31b9c2e212ecf84232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "322a0635_ce36a656",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-03-04T04:09:41Z",
      "side": 1,
      "message": "nit (if these are kept): Can you indicate what the differences in the buffer vs texture policies are?   For example, add something like:\n\n    OneShotBufferUse,     // Allocate exact size specified\n    OneShotTextureUpload, // Allocate size*4/3",
      "revId": "2ea2271f94cdd9d34b7edb31b9c2e212ecf84232",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}