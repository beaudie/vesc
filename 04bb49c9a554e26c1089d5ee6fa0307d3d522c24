{
  "comments": [
    {
      "key": {
        "uuid": "f9dff0b0_ab627b5f",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-05-19T17:33:42Z",
      "side": 1,
      "message": "fine grained dependency",
      "range": {
        "startLine": 309,
        "startChar": 35,
        "endLine": 309,
        "endChar": 53
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bd2148f_0a575946",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 2
      },
      "lineNbr": 309,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-05-19T18:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9dff0b0_ab627b5f",
      "range": {
        "startLine": 309,
        "startChar": 35,
        "endLine": 309,
        "endChar": 53
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d77a2e6a_fb7d2def",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-05-19T17:33:42Z",
      "side": 1,
      "message": "fine grained",
      "range": {
        "startLine": 314,
        "startChar": 40,
        "endLine": 314,
        "endChar": 49
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "712c2c3e_895ece4e",
        "filename": "include/platform/FeaturesVk.h",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-05-19T18:38:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d77a2e6a_fb7d2def",
      "range": {
        "startLine": 314,
        "startChar": 40,
        "endLine": 314,
        "endChar": 49
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10bc48b6_bf568e1a",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-19T17:19:29Z",
      "side": 1,
      "message": "Is this actually any faster?   The member variable mPipelineBarrierMask still has to be read once, so the most expensive part is already paid.\n\nMy preference would be to avoid doing this copy and use mPipelineBarrierMask directly.",
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2da88fe4_a7eb5b55",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-05-19T17:28:34Z",
      "side": 1,
      "message": "I don\u0027t disagree with you. Make a local variable or not, compiler might able to optimize it either way and result in the same instruction. But I think making a local copy won\u0027t be any slower at least, that is why I am taking feedback advice here from previous CL.",
      "parentUuid": "10bc48b6_bf568e1a",
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11c4766d_483870cd",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-19T18:20:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2da88fe4_a7eb5b55",
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a08985fc_0d86ebc4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-05-19T19:18:37Z",
      "side": 1,
      "message": "@Tim, this way `mPipelineBarrierMask` is only read once instead of multiple times, and the copy lives as a register.",
      "parentUuid": "11c4766d_483870cd",
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98164eb8_86b3a6a1",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 596,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-19T20:26:31Z",
      "side": 1,
      "message": "I\u0027d expect that to happen regardless of a stack vs heap variable since it\u0027s not marked volatile.",
      "parentUuid": "a08985fc_0d86ebc4",
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d2f392a_cd9d8f7c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-19T17:19:29Z",
      "side": 1,
      "message": "This can keep the simplified for loop:\n\n        PipelineBarrier \u0026barrier \u003d mPipelineBarriers[*mask.begin()];\n        for (PipelineStage pipelineStage : mask)\n        {\n            barrier.merge(\u0026mPipelineBarriers[pipelineStage]);\n        }",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 609,
        "endChar": 9
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a3f67d_80a4cdf5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-05-19T17:28:34Z",
      "side": 1,
      "message": "Isn\u0027t that the for loop will iterate over the all set bits in the mask? I want the for loop skip the first element, since the first one already assigned to barrier.",
      "parentUuid": "3d2f392a_cd9d8f7c",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 609,
        "endChar": 9
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfa7733c_0451683b",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-05-19T17:33:42Z",
      "side": 1,
      "message": "Won\u0027t this call barrier.merge twice for the 1st element?\nThat\u0027s probably not a problem functionality-wise, is it a perf concern?\nBoth loops will also potentially change the first element, is that okay?",
      "parentUuid": "3d2f392a_cd9d8f7c",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 609,
        "endChar": 9
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d9f059_ae53b7a7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-05-19T18:11:13Z",
      "side": 1,
      "message": "It is a problem functionality-wise. That is why patchset1 failed (it was merging the first element).\nMy loop has a ++iter in the initialization part of for loop, so it will skip the first element in the for loop. I can use Tim\u0027s for loop, but I will need to remove the first bit from the mask. I thought about that, and think it is easier to just use the iterator in the for loop since I already have the iterator.",
      "parentUuid": "dfa7733c_0451683b",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 609,
        "endChar": 9
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4403129_abbe6644",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 2
      },
      "lineNbr": 609,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-05-19T18:20:09Z",
      "side": 1,
      "message": "Oh, I see.   I missed that.   Sounds good.",
      "parentUuid": "63d9f059_ae53b7a7",
      "range": {
        "startLine": 604,
        "startChar": 0,
        "endLine": 609,
        "endChar": 9
      },
      "revId": "04bb49c9a554e26c1089d5ee6fa0307d3d522c24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}