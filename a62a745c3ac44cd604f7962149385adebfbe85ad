{
  "comments": [
    {
      "key": {
        "uuid": "d02982de_c962eeee",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 19,
      "author": {
        "id": 1263724
      },
      "writtenOn": "2020-09-18T02:27:40Z",
      "side": 1,
      "message": "change",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 6
      },
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "904a14ba_4b1c03e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-18T00:39:41Z",
      "side": 1,
      "message": "PTAL",
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dba30749_12b1b606",
        "filename": "src/libANGLE/State.h",
        "patchSetId": 8
      },
      "lineNbr": 584,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-18T19:31:36Z",
      "side": 1,
      "message": "A short \"because ...\" would be great",
      "range": {
        "startLine": 584,
        "startChar": 61,
        "endLine": 584,
        "endChar": 62
      },
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d6c5b6_a48467c5",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2788,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-18T16:24:27Z",
      "side": 1,
      "message": "This moves from  ContextVk::handleDirtyGraphicsPipeline to here. When DIRTY_BIT_SAMPLE_ALPHA_TO_COVERAGE_ENABLED is set, we set DIRTY_BIT_PROGRAM_EXECUTABLE, which will gte us to  ContextVk::invalidateProgramExecutableHelper(), which sets mCurrentGraphicsPipeline to NULL, which gets us to ContextVk::handleDirtyGraphicsPipeline() and detect mCurrentGraphicsPipeline is NULL and calls ProgramExecutableVk::getGraphicsPipeline). That call will end up modify the program to disable early fragment test.\n\nWith this change, does getGraphicsPipeline() still get called when DIRTY_BIT_PROGRAM_EXECUTABLE bit is set? From my brief code search, it does not seems so.",
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a097643a_6385bc06",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2788,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-18T19:31:36Z",
      "side": 1,
      "message": "Charlie, if you can think of a sequence of operations to exercise your concern, you can outline it for Jamie to write a test. Probably can add a counter for how many times this optimization was applied and use that for verification.",
      "parentUuid": "f2d6c5b6_a48467c5",
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9b5e8db_82a3f2fc",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2788,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-18T21:06:08Z",
      "side": 1,
      "message": "Hey Charlie, invalidateProgramExecutableHelper calls invalidateVertexAndIndexBuffers which will set DIRTY_BIT_PIPELINE -\u003e handleDirtyGraphicsPipeline. \n\nhandleDirtyGraphicsPipeline will call getGraphicsPipeline if there is is a state change and there\u0027s no prior transition to a known pipeline state. if there is a transition it\u0027ll pull the new pipeline from the cache.\n\nShabi we could start tracking perf counters for dirty bit handlers. I\u0027m not sure if we want to track perf counters for specific function calls. CPU overhead tests should give us good regression protection (eventually).\n\nRegarding the dirty bit, when I checked \"isEarlyFragmentTestsOptimizationAllowed\" it was checking isSampleCoverageEnabled, which corresponds to DIRTY_BIT_SAMPLE_COVERAGE_ENABLED.",
      "parentUuid": "a097643a_6385bc06",
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0540803e_ce2e7937",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2788,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-18T23:54:05Z",
      "side": 1,
      "message": "I do wish I wrote a test. The sample coverage stuff is always a myth to me, not sure how to write that test myself. If anyone has time to write such a test, I will appreciate. Based on what Jamie explains here, this looks good to me now.",
      "parentUuid": "a9b5e8db_82a3f2fc",
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "199d883c_8242c005",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2889,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-18T16:24:27Z",
      "side": 1,
      "message": "Is this needed? This dirty bit does not related to how fragment shader affects the sample coverage. Thus moving depth test before or after should not matter.",
      "range": {
        "startLine": 2889,
        "startChar": 17,
        "endLine": 2889,
        "endChar": 72
      },
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c91d85_97e58a0a",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2889,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-09-18T21:06:08Z",
      "side": 1,
      "message": "When I checked \"isEarlyFragmentTestsOptimizationAllowed\" it was checking isSampleCoverageEnabled, which corresponds to DIRTY_BIT_SAMPLE_COVERAGE_ENABLED.",
      "parentUuid": "199d883c_8242c005",
      "range": {
        "startLine": 2889,
        "startChar": 17,
        "endLine": 2889,
        "endChar": 72
      },
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f11aea9_9cf7f726",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 8
      },
      "lineNbr": 2889,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-18T23:54:05Z",
      "side": 1,
      "message": "oops, that is my bug. It should check isSampleAlphaToCoverageEnabled(). Could you fix that instead? From what I read, what matters to the early fragment test matters is alpha to sample coverage, since FS could modify alpha, which could modify coverage, which interfere with depth test.",
      "parentUuid": "15c91d85_97e58a0a",
      "range": {
        "startLine": 2889,
        "startChar": 17,
        "endLine": 2889,
        "endChar": 72
      },
      "revId": "a62a745c3ac44cd604f7962149385adebfbe85ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}