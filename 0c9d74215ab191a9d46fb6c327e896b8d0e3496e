{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "81da006a_ea7f5d00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-08-27T04:26:03Z",
      "side": 1,
      "message": "Jamie, sharing this as WIP for feedback and discussion.  It works for the initial scene I discussed with you.  Will throw some more stuff at it tomorrow.",
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9bf4f32_55871b23",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-08-30T13:32:14Z",
      "side": 1,
      "message": "the bindings are a totally separate set of states. I think it would make to capture them in a separate loop for the non-default-state bindings.",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7875e5de_7f59928c",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-09-02T17:33:40Z",
      "side": 1,
      "message": "Put up another pass that splits out the bindings, adds in CaptureVertexBindingDivisor. Also moves VertexAttribDivisor into the same block of code for use with VertexAttribPointer.  Results are looking better with Fortnite MEC, but still working through crashes/asserts.",
      "parentUuid": "e9bf4f32_55871b23",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93239b48_24fbc363",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-09-09T06:04:17Z",
      "side": 1,
      "message": "I think this method works to keep it in the loop without refactoring too much code.  This has been working solidly for Fortnite this week.",
      "parentUuid": "7875e5de_7f59928c",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2eb19e79_4e9f761d",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-09T11:36:06Z",
      "side": 1,
      "message": "I think this will break validation because it won\u0027t correctly reconstruct VertexAttribPointer calls, which is the only way to set the vertexAttribArrayStride. Can we do it without the version checks and instead using checks for non-default values like it was before?",
      "parentUuid": "93239b48_24fbc363",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "961c443f_4af03c2a",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-09-09T16:40:02Z",
      "side": 1,
      "message": "Ah, I see that now.  VertexAttribPointer can\u0027t entirely be replaced with new calls.  From the spec:\n\n They are equivalent to...:\n ...\n VERTEX_ATTRIB_ARRAY_STRIDE[index] \u003dstride;\n VERTEX_ATTRIB_ARRAY_POINTER[index] \u003dpointer;\n ...\n \nWhat I just put up is a clunkier version I was trying to avoid, similar to patchset #4, but includes a check on whether to emit BindVertexBuffer/VertexBindingDivisor.\n\nThe alternative is to split this up farther, like CaptureVertexArrayState and CaptureVertexArrayStateES31, but it seemed like too much code duplication.  The intent is avoid mixing VertexAttribPointer with ES3.1 calls.",
      "parentUuid": "2eb19e79_4e9f761d",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d6266a_3fee1b10",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-09T16:46:30Z",
      "side": 1,
      "message": "Well, if the app mixes 3.1 and 2.0 calls, we should be able to reconstruct that. Although it may not really happen in the wild. We could go with the totally separated method if you prefer for now, but it shouldn\u0027t be based on context version, but rather what the app uses.\n\nMaybe that\u0027s the best option - use the detection logic I have here in a pre-pass, and if you detect ES 2.0 semantics do that, and if you detect 3.1 semantics do all that. If there\u0027s a mixed semantic set, do unimplemented()",
      "parentUuid": "961c443f_4af03c2a",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36730e96_2e1daf85",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-09-09T17:17:36Z",
      "side": 1,
      "message": "Maybe we could mix them by tracking the attrib.bindingIndex for each attribute requiring ES31 semantics, then only call BindVertexBuffer/VertexBindingDivisor on those binding indexes, rather than all non-default bindings in this current CL.",
      "parentUuid": "d1d6266a_3fee1b10",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24ae87d4_b84d9251",
        "filename": "src/libANGLE/capture/FrameCapture.cpp",
        "patchSetId": 1
      },
      "lineNbr": 2055,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-09-09T17:28:59Z",
      "side": 1,
      "message": "I considered that, but it\u0027s not correct. The app could call BindVertexBuffer for some bindings that are never used in the current VAO state, then use those bindings later on (after MEC) which would lead to incorrect behaviour.\n\nIt might work the other way round - you track which bindings are set by VertexAttribPointer then only scan the bindings that explicitly *not* using 2.0 sets.",
      "parentUuid": "36730e96_2e1daf85",
      "range": {
        "startLine": 2042,
        "startChar": 0,
        "endLine": 2055,
        "endChar": 13
      },
      "revId": "0c9d74215ab191a9d46fb6c327e896b8d0e3496e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}