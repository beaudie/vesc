{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "48478b7f_6bb5cc5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-26T18:52:28Z",
      "side": 1,
      "message": "Haven\u0027t gotten around for a full review yet",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2acb4d00_9083cb16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T22:00:48Z",
      "side": 1,
      "message": "Thanks",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01d2d7f5_165a79cc",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 876,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T20:01:56Z",
      "side": 1,
      "message": "Since in your earlier CL, zero dimension will generate INVALID_OP, this should be assertion.",
      "range": {
        "startLine": 876,
        "startChar": 4,
        "endLine": 876,
        "endChar": 78
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e40a531e_a39df7b2",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 876,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T22:00:48Z",
      "side": 1,
      "message": "It is legal for the clear area to be zero. However, the earlier CL added the validation for when the dimensions of that texture level were zero (i.e., the level is not defined yet).",
      "parentUuid": "01d2d7f5_165a79cc",
      "range": {
        "startLine": 876,
        "startChar": 4,
        "endLine": 876,
        "endChar": 78
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e891c77f_d89494b1",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 876,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-28T20:15:42Z",
      "side": 1,
      "message": "You can just take early return if empty clear box in the front end. Then here you can assert it is not empty",
      "parentUuid": "e40a531e_a39df7b2",
      "range": {
        "startLine": 876,
        "startChar": 4,
        "endLine": 876,
        "endChar": 78
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aec7fa63_f2aff6bd",
        "filename": "src/libANGLE/renderer/vulkan/TextureVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 876,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T00:37:54Z",
      "side": 1,
      "message": "Thanks. The earlier CL has been updated. Therefore, this has been changed into an assert.",
      "parentUuid": "e891c77f_d89494b1",
      "range": {
        "startLine": 876,
        "startChar": 4,
        "endLine": 876,
        "endChar": 78
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33b16fa6_14e0d23c",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T20:01:56Z",
      "side": 1,
      "message": "This is doing a compute write to buffer and then copy from buffer to image. Can\u0027t you directly use compute shader write to image? Is that because of some formats does not support compute write? If yes, then I think all you need to do is have utility function fill the buffer and then stage the buffer to image which would reuse all logic for image update from buffer code. And you could use CPU to fill the buffer as well.",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac922833_f8113d5e",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T22:00:48Z",
      "side": 1,
      "message": "I think the image should be created with the storage usage bit so we can directly write to the image using `imageStore()`. However, it seems that `imageStore()` can only be used for color images.\nI also looked into `vkCmdFillBuffer()`, but it seems to only support a 4-byte input word.",
      "parentUuid": "33b16fa6_14e0d23c",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c9f86e0_0587fb86",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-28T20:15:42Z",
      "side": 1,
      "message": "Sure, but is using GPU to fill buffer faster than just use CPU? Looks like it will be at least simpler to just use CPU to fill the buffer and then stage the buffer to fill image.",
      "parentUuid": "ac922833_f8113d5e",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5025aa6a_9420e124",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T00:37:54Z",
      "side": 1,
      "message": "With the host, we should use a loop and `memcpy()` (or vector constructor?) to copy the input value (up to 16 bytes) into a new host-visible buffer and process it as a regular buffer update.\nHowever IIUC, with a compute shader, many threads should be simultaneously writing the related bytes to different parts of a new device-side buffer before it is transferred to the image. It should also reduce the host-device memory bandwidth usage in case of a discrete device.",
      "parentUuid": "0c9f86e0_0587fb86",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ee0910_f6c3257b",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-29T14:34:49Z",
      "side": 1,
      "message": "I believe, the _real_ gain you may have with a UtilsVk shader is by using a fragment shader when the format is renderable. Then you can directly draw to the image and halve the bandwidth used. If you want to keep a compute based copy as a fallback, that\u0027s fine but you\u0027ll probably find that path is probably never hit in real apps (so a CPU buffer fill is just as fine).",
      "parentUuid": "5025aa6a_9420e124",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "985c0f24_385265b9",
        "filename": "src/libANGLE/renderer/vulkan/UtilsVk.cpp",
        "patchSetId": 23
      },
      "lineNbr": 2272,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-29T16:35:45Z",
      "side": 1,
      "message": "Agree. My suggestion is do the simple thing in this code path as the fallback (and CPU side buffer fill will be simpler). In the follow up CL you implement the faster clear which hopefully will cover all real usages.",
      "parentUuid": "59ee0910_f6c3257b",
      "range": {
        "startLine": 2272,
        "startChar": 23,
        "endLine": 2272,
        "endChar": 35
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ad207a_fc6691c5",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ClearTexture.comp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-26T18:52:28Z",
      "side": 1,
      "message": "These `#if`s cost us in binary size. Please use them only when absolutely necessary. That is when the _types_ need to change.\n\nFor numeric parameters, please pass whatever you need through the push constants. For example a bounds constant to check against `threadId`, a mask for the data, and a couple of bools for special cases (stencil, rgb)",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f203054_74d18dd9",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ClearTexture.comp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T00:37:54Z",
      "side": 1,
      "message": "Thanks! I agree. I can update the CL to move some parts of the work from the shader to the host (e.g., determining the elements to be copied), simplifying the shader to checking the input parameters and copying the appropriate bytes. This should result in a single shader (albeit a bit larger than each of the current shaders).",
      "parentUuid": "b0ad207a_fc6691c5",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba6888df_c4d37e19",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ClearTexture.comp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T02:12:00Z",
      "side": 1,
      "message": "Sample: https://chromium-review.googlesource.com/c/angle/angle/+/5825118",
      "parentUuid": "1f203054_74d18dd9",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7996ca6d_ee980a5d",
        "filename": "src/libANGLE/renderer/vulkan/shaders/src/ClearTexture.comp",
        "patchSetId": 23
      },
      "lineNbr": 27,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-08-29T14:34:49Z",
      "side": 1,
      "message": "Something like that is totally fine! The shader is bound by memory bandwidth, so some ALU in between is going to come for free.",
      "parentUuid": "ba6888df_c4d37e19",
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "65737b2f_154be0b7",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 23
      },
      "lineNbr": 10043,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-26T20:01:56Z",
      "side": 1,
      "message": "clearTexture also works for MS tetxure, right?",
      "range": {
        "startLine": 10043,
        "startChar": 60,
        "endLine": 10043,
        "endChar": 74
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "783a50c1_ef255fb9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 23
      },
      "lineNbr": 10043,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-26T22:00:48Z",
      "side": 1,
      "message": "Currently, `clearTexture()` does not work for MS textures, since `vkCmdCopyBufferToImage()` can only accept a single-sampled destination image. `clearTextureMS()` uses `vkCmdClearAttachments()` to accomplish this instead.",
      "parentUuid": "65737b2f_154be0b7",
      "range": {
        "startLine": 10043,
        "startChar": 60,
        "endLine": 10043,
        "endChar": 74
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7c532af_0b783fe4",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 23
      },
      "lineNbr": 10043,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-08-28T20:15:42Z",
      "side": 1,
      "message": "SGTM. Put that in comment will be helpful.",
      "parentUuid": "783a50c1_ef255fb9",
      "range": {
        "startLine": 10043,
        "startChar": 60,
        "endLine": 10043,
        "endChar": 74
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51a0017d_fd043d97",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 23
      },
      "lineNbr": 10043,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2024-08-29T00:37:54Z",
      "side": 1,
      "message": "Thanks. Comment added.",
      "parentUuid": "e7c532af_0b783fe4",
      "range": {
        "startLine": 10043,
        "startChar": 60,
        "endLine": 10043,
        "endChar": 74
      },
      "revId": "ff6657d80ce25ddc623d3c6c8b25078712f2a571",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}