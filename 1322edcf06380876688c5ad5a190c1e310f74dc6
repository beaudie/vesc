{
  "comments": [
    {
      "key": {
        "uuid": "37b082be_6cda1d7a",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 5,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "nit: top level comment",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 2
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_2ca665fa",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 14,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "you can use static constexpr int kWindowSize and not worry about w vs h.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 28
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_4caba1bf",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "nit: use override instead of virtual",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 11
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_ec9fed9a",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "I would prefer you didn\u0027t use the SHADER_SOURCE macro until we can use something similar using advanced c++ features. just make a multi-line string with newlines.",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 57,
        "endChar": 10
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_0ca5a9e9",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 63,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "ASSERT_NE(0u, mTextureProgram);",
      "range": {
        "startLine": 60,
        "startChar": 7,
        "endLine": 63,
        "endChar": 9
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_acb9f512",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 65,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "ASSERT_NE(-1, mTextureUniformLocation)",
      "range": {
        "startLine": 65,
        "startChar": 8,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_ccb6b122",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 70,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "nit: override instead of virtual",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 11
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_6cb3fd31",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 77,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "\u003d 0",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 26
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_8cb0b924",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "\u003d -1",
      "range": {
        "startLine": 78,
        "startChar": 10,
        "endLine": 78,
        "endChar": 33
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_2c0f451a",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 81,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "nit: comment before each test.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 81,
        "endChar": 6
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_ec184d5d",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "static constexpr size_t kMaxCompressedSize/etc.",
      "range": {
        "startLine": 90,
        "startChar": 3,
        "endLine": 91,
        "endChar": 52
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_0c1e0948",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 92,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "git cl format. it will mangle the below grid, you might want to land that in a inlined separate source file.",
      "range": {
        "startLine": 92,
        "startChar": 20,
        "endLine": 92,
        "endChar": 21
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_6c0c5d1e",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 101,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "how about splitting this into four test cases and making a new TEST_P for each, calling a method on the fixture for each item.",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 101,
        "endChar": 50
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_ac0255eb",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 210,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "use GLTexture from gl_raii.h.",
      "range": {
        "startLine": 210,
        "startChar": 4,
        "endLine": 210,
        "endChar": 10
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_ccff91b4",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 221,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "can you use GLColor here? You can probably reinterpret_cast the expected data to GLColor.",
      "range": {
        "startLine": 221,
        "startChar": 4,
        "endLine": 221,
        "endChar": 11
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_8c09990e",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 227,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "pretty sure it\u0027s better to use ASSERT_GL_NO_ERROR here, and everywhere.",
      "range": {
        "startLine": 227,
        "startChar": 8,
        "endLine": 227,
        "endChar": 26
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_c1551a14",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 261,
      "author": {
        "id": 1172235
      },
      "writtenOn": "2016-12-23T03:42:16Z",
      "side": 1,
      "message": "Sorry this logic is excessively complex (and also duplicated); I\u0027ll clean this up.",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 261,
        "endChar": 5
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_814f2282",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 269,
      "author": {
        "id": 1172235
      },
      "writtenOn": "2016-12-23T03:42:16Z",
      "side": 1,
      "message": "I don\u0027t know why, but the SRGB*S3TC formats don\u0027t seem to be available on ES2 on D3D11. I couldn\u0027t spot anything in the JSON that would cause this.\n\nI need to either fix it, or not expose the extension on ES2. Any advice?",
      "range": {
        "startLine": 269,
        "startChar": 23,
        "endLine": 269,
        "endChar": 82
      },
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_6170e6b9",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 269,
      "author": {
        "id": 1172235
      },
      "writtenOn": "2016-12-23T03:51:00Z",
      "side": 1,
      "message": "Clarification: s/don\u0027t seem to be available/cause GL_INVALID_ENUM errors/",
      "parentUuid": "37b082be_814f2282",
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_2cf8a5c8",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 269,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T14:57:49Z",
      "side": 1,
      "message": "I\u0027ll check.",
      "parentUuid": "37b082be_6170e6b9",
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37b082be_4c7f2152",
        "filename": "src/tests/gl_tests/DXTSRGBCompressedTextureTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 269,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2016-12-23T15:20:52Z",
      "side": 1,
      "message": "This is a legitimate bug -- good work on catching this with the test. The problem is the ES2 texture validation code is custom and very different from the ES3.\n\nYou can trap this by putting a breakpoint in gl::Context::handleError inside the isError if statement. It finds that there\u0027s an error generated in ValidateES2TexImageParameters where it explicitly checks a list of specified compressed formats. I sort of forget the intricacies of our texture support code, but I think you should be able to change this code to the same logic as the ES3 validation:\n\nhttps://chromium.googlesource.com/angle/angle.git/+/master/src/libANGLE/validationES3.cpp#181\n\nGeoff can you confirm?",
      "parentUuid": "37b082be_2cf8a5c8",
      "revId": "1322edcf06380876688c5ad5a190c1e310f74dc6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}