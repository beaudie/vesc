{
  "comments": [
    {
      "key": {
        "uuid": "0a189570_da95a843",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-25T22:48:48Z",
      "side": 1,
      "message": "How did you settle on 4K?",
      "range": {
        "startLine": 12,
        "startChar": 18,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c8d722_3883b603",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-25T23:06:12Z",
      "side": 1,
      "message": "i assumed manhattan offscreen has a reasonable intensive resource use and i enumnerated the counts across the benchmarks i have access to and the max i saw was about 4.5k",
      "parentUuid": "0a189570_da95a843",
      "range": {
        "startLine": 12,
        "startChar": 18,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a302e0e_737f28a3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-25T23:39:50Z",
      "side": 1,
      "message": "Every app will be allocating 32KB (4K * 8B) by default now, but if \u0027most\u0027 are going to get there eventually anyway, it shouldn\u0027t be any difference.",
      "parentUuid": "06c8d722_3883b603",
      "range": {
        "startLine": 12,
        "startChar": 18,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9674aaba_3f6ca551",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-25T23:52:07Z",
      "side": 1,
      "message": "perf related benchmarks get there, manhattan is 4.5k trex is ~3k and there are heavier ones than these. For those not sensitive to perf, given that they are usually single context apps, the trade-off of 32kB memory for no mem ops seemed reasonable.\n\nwe can revisit this when we have the SharedResourceUsePool logic",
      "parentUuid": "3a302e0e_737f28a3",
      "range": {
        "startLine": 12,
        "startChar": 18,
        "endLine": 12,
        "endChar": 20
      },
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f654e3b_5e27607e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-25T21:38:00Z",
      "side": 1,
      "message": "PTAL - this reduces the CPU usage of the retain method from 2.2% -\u003e 1.6% with manhattan.\nonly contextvk has an instance of this and it is not a monotonically increasing value like\nserial so we are more unlikely to hit memory related issues",
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd433797_9a1f14c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2020-08-25T23:29:54Z",
      "side": 1,
      "message": "LGTM",
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b010829_b7e13ab0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-08-25T23:39:50Z",
      "side": 1,
      "message": "I\u0027m still learning the details of C++, but would inverting add() help?   The SharedResourceUse could be created directly in the vector and then updated, rather than being moved there:\n\nANGLE_INLINE void ResourceUseList::add(const SharedResourceUse \u0026resourceUse)\n{\n    mResourceUses.emplace_back(SharedResourceUse());\n    mResourceUses.back().set(resourceUse);\n}\n\nLooking at the disassembly it\u0027s only 2 instructions shorter, but I haven\u0027t profiled it to see if there\u0027s any actual noticeable difference.",
      "parentUuid": "7f654e3b_5e27607e",
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "142b1019_552bec61",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2020-08-25T23:52:07Z",
      "side": 1,
      "message": "interesting, i thought the compiler will in-place construct the temp one given the sequence of commands that follow. Will give this a try and update in a bit\n\nas a side note - we really should have a SharedResourceUsePool from which we acquire and release mUse objects instead of alloc\u0027ing in here and free\u0027ing in releaseAndUpdateSerial...()",
      "parentUuid": "7b010829_b7e13ab0",
      "revId": "126964ff6ab4977a6e00fc16f1fe5d7eeda9b34b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}