{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "854a4c28_569136f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-10T18:33:30Z",
      "side": 1,
      "message": "PTAL shabi while i work on enhancing testing",
      "revId": "fa6c4d3e7f4b99f1d90767443cf747381e7a10d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e91d3a86_90ee164c",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8296,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-10T18:40:43Z",
      "side": 1,
      "message": "reading man page again and it might be better for me to do -\n\n SubresourceUpdatesIterator supersededUpdate \u003d (update + 1).base();\nand then increment `update` later",
      "range": {
        "startLine": 8296,
        "startChar": 12,
        "endLine": 8296,
        "endChar": 72
      },
      "revId": "fa6c4d3e7f4b99f1d90767443cf747381e7a10d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbc4c918_934530e9",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8296,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2022-06-10T18:53:39Z",
      "side": 1,
      "message": "Just use `std::erase` with lambda like before, it will take care of all this.",
      "parentUuid": "e91d3a86_90ee164c",
      "range": {
        "startLine": 8296,
        "startChar": 12,
        "endLine": 8296,
        "endChar": 72
      },
      "revId": "fa6c4d3e7f4b99f1d90767443cf747381e7a10d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7cd7d69_1e658f8d",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8296,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-10T22:37:25Z",
      "side": 1,
      "message": "hmmm, all `std::xxx` take `ForwardIt`.\n\neven in the original lambda confused as to how it was handling removal of non-contiguous superseded updates",
      "parentUuid": "dbc4c918_934530e9",
      "range": {
        "startLine": 8296,
        "startChar": 12,
        "endLine": 8296,
        "endChar": 72
      },
      "revId": "fa6c4d3e7f4b99f1d90767443cf747381e7a10d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02afe540_a6e545f0",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 8
      },
      "lineNbr": 8296,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2022-06-11T01:27:43Z",
      "side": 1,
      "message": "\u003e confused as to how it was handling removal of non-contiguous superseded updates\n\nah, you were looking for only those updates that covered the whole subresource which meant you could erase all updates that came before it. My situation is a little different which wont lend well to erase / lambda pattern",
      "parentUuid": "c7cd7d69_1e658f8d",
      "range": {
        "startLine": 8296,
        "startChar": 12,
        "endLine": 8296,
        "endChar": 72
      },
      "revId": "fa6c4d3e7f4b99f1d90767443cf747381e7a10d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}