{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "339283ca_6503466d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-01-26T21:07:18Z",
      "side": 1,
      "message": "Thanks for the updates so far - will fully re-review later, but one question in advance of that.",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4512f736_d56e7835",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-01-26T21:07:39Z",
      "side": 1,
      "message": "(Addressing this comment can wait - let\u0027s see how the current dry run goes)",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6194d102_5f880b45",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2023-01-26T21:20:04Z",
      "side": 1,
      "message": "Dry run\u0027s going to fail, I messed up the delete on the encoder.",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da27a64c_8bac5c27",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-01-26T21:07:18Z",
      "side": 1,
      "message": "If I understand correctly, the specific case this handles is uniform blocks declared as arrays, like this example from the ES 3.0 spec:\n\n  uniform Transform {  // API uses “Transform[2]” to refer to instance 2\n    mat4           ModelViewMatrix;\n    mat4           ModelViewProjectionMatrix;\n    float          Deformation;\n  } transforms[4];\n\nIs my understanding correct?\n\nIf so, could we explain this a bit differently, perhaps:\n\n\"\"\"\nHandle uniform blocks declared as arrays. In this case, sizeToCopy covers the\nentire range of the array, and blockConversionInfo.stdSize() is the size of\neach individual element.\n\"\"\"\n?",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b77ec5de_e19d0c42",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2023-01-26T21:20:04Z",
      "side": 1,
      "message": "Not quite, this is the case where the buffer bound to the UBO is larger than the actual UBO. The idea is that you could upload multiple uniform buffers, and access each one by offset. I use offset%blocksize as an hash into the conversion buffers, so we can pre-convert everything instead of converting on the fly every time. \n\nAt least, that was the intent, I don\u0027t think my code is right there. Taking a look...",
      "parentUuid": "da27a64c_8bac5c27",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3e4c6dd_b00962ce",
        "filename": "src/libANGLE/renderer/metal/ProgramMtl.mm",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 1500872
      },
      "writtenOn": "2023-01-27T18:02:12Z",
      "side": 1,
      "message": "Double checked my code and fixed the UBO reuse indexing, added more clarifying comments.",
      "parentUuid": "b77ec5de_e19d0c42",
      "revId": "44c17aa7e25fd3cb4a39fc36603403b6253bae7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}