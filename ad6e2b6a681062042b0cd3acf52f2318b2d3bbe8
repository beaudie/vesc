{
  "comments": [
    {
      "key": {
        "uuid": "e30ae228_f26f372a",
        "filename": "util/EGLWindow.cpp",
        "patchSetId": 6
      },
      "lineNbr": 327,
      "author": {
        "id": 1119849
      },
      "writtenOn": "2017-09-13T14:57:47Z",
      "side": 0,
      "message": "Robustness is optional so we want the tests to explicitly enable it with a call to setRobustAccess in SetUp. Please revert the changes to EGLWindow.",
      "revId": "ad6e2b6a681062042b0cd3acf52f2318b2d3bbe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19941be4_b3219434",
        "filename": "util/EGLWindow.cpp",
        "patchSetId": 6
      },
      "lineNbr": 327,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-09-18T08:07:04Z",
      "side": 0,
      "message": "I removed it because I met error on Mac. The situation is hasRobustness is false, but we call setRobustAccess(true) in RobustBufferAccessBehaviorTest. In this case, it will go to \"destroyGL(); return false;\" which is not we expected. So I removed it.\n\nI think we can still explicitly enable it with a call to setRobustAccess in the new change since we use below sentence:\n    contextAttributes.push_back(EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT);\n    contextAttributes.push_back(mRobustAccess ? EGL_TRUE : EGL_FALSE);\n\nIf mRobustAccess is true, it will enable robust access. Otherwise, it will disable robust access.",
      "parentUuid": "e30ae228_f26f372a",
      "revId": "ad6e2b6a681062042b0cd3acf52f2318b2d3bbe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34709b2e_5a67fc98",
        "filename": "util/EGLWindow.cpp",
        "patchSetId": 6
      },
      "lineNbr": 327,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-09-18T11:33:25Z",
      "side": 0,
      "message": "If you want to fix this problem, you can make a setup() method in your test that a) checks for the extension and returns false if not presentt, or b) destroys GL, enables the extension, then re-initializes GL again, and returns true. Then in your tests you can do ANGLE_SKIP_TEST_IF(!setup()).",
      "parentUuid": "19941be4_b3219434",
      "revId": "ad6e2b6a681062042b0cd3acf52f2318b2d3bbe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d9379d_1648c4f7",
        "filename": "util/EGLWindow.cpp",
        "patchSetId": 6
      },
      "lineNbr": 327,
      "author": {
        "id": 1165541
      },
      "writtenOn": "2017-09-19T07:22:10Z",
      "side": 0,
      "message": "Done",
      "parentUuid": "34709b2e_5a67fc98",
      "revId": "ad6e2b6a681062042b0cd3acf52f2318b2d3bbe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}