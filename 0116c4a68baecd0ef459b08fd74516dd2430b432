{
  "comments": [
    {
      "key": {
        "uuid": "a2c7dc52_7e26d52b",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 143,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "For make it easier to tell the context of the helper, please rename to CheckAttachmentSampleCompletenessHelper or something similar.",
      "range": {
        "startLine": 143,
        "startChar": 5,
        "endLine": 143,
        "endChar": 23
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f76c3b6_401aa7e6",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 147,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Please put this helper into an anonymous namespace to keep it compartmentalized in this file.",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 147,
        "endChar": 0
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e798b7_6ee806b1",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 207,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-05T21:05:42Z",
      "side": 1,
      "message": "Do you think this would be cleaner if you remove this constant and just use zero for this check? Same for the other uses.",
      "range": {
        "startLine": 207,
        "startChar": 12,
        "endLine": 207,
        "endChar": 65
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b39e5f1a_72822ff6",
        "filename": "src/libANGLE/Framebuffer.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1647,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-05T21:05:42Z",
      "side": 1,
      "message": "is it possible that we could make this a typed enum or something like that?",
      "range": {
        "startLine": 1647,
        "startChar": 63,
        "endLine": 1647,
        "endChar": 75
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e92e0d1_8dcb42be",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1845,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-05T21:05:42Z",
      "side": 1,
      "message": "where does this come from again? the dirty storage notification is for when the storage of the texture itself changes. rather than the contents. maybe we can tweak this slightly if I were to understand.",
      "range": {
        "startLine": 1844,
        "startChar": 8,
        "endLine": 1845,
        "endChar": 55
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e65cc73_f890f503",
        "filename": "src/libANGLE/Texture.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1845,
      "author": {
        "id": 1335991
      },
      "writtenOn": "2019-09-05T21:49:56Z",
      "side": 1,
      "message": "So I was originally trying to use signalDirtyState, but I realized this isn\u0027t actually what I want.\n\nIn this case when the contents change, it is equivalent to the storage changing, since what we are signalling is that the actual storage object was either 1) a new MS storage object that was created and the renderTarget is now that of the MS or 2) the MS has now been resolved to a SS and the renderTarget should be of the SS.\n\nFrom what i saw using signalDirtyState as it is below, when it gets caught at the Framebuffer level, it doesnt set any dirtybits in the framebuffer. But if the renderTargets are changing due to the resolve, we need the framebuffer to also purge/update its renderTargetCache.",
      "parentUuid": "0e92e0d1_8dcb42be",
      "range": {
        "startLine": 1844,
        "startChar": 8,
        "endLine": 1845,
        "endChar": 55
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d87d126a_69d6c286",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 14
      },
      "lineNbr": 897,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Since reset already does the nullptr check internally, the if check is not necessary here.",
      "range": {
        "startLine": 894,
        "startChar": 8,
        "endLine": 897,
        "endChar": 9
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404af424_a992956f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 14
      },
      "lineNbr": 960,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2019-09-05T21:05:42Z",
      "side": 1,
      "message": "It\u0027s not critical that we clean up everything in the D3D11 back-end. But would it be possible to return a bool or something indicating that we had a state change instead of using the callback? Most of the places seem to be called mostly directly from TextureD3D. Wasn\u0027t sure if there was one site in TextureD3D that called in through a common non-MS function and reached this code.",
      "range": {
        "startLine": 960,
        "startChar": 8,
        "endLine": 960,
        "endChar": 21
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60f27db6_a935f09f",
        "filename": "src/libANGLE/renderer/d3d/d3d11/TextureStorage11.cpp",
        "patchSetId": 14
      },
      "lineNbr": 960,
      "author": {
        "id": 1335991
      },
      "writtenOn": "2019-09-05T21:49:56Z",
      "side": 1,
      "message": "I realize that this particular onStateChange call is redundant, as we will have made the same call in resolveAndReleaseTexture called on line 930. \nI can remove this, but did your comment mean to reach a deeper problem with the code?",
      "parentUuid": "404af424_a992956f",
      "range": {
        "startLine": 960,
        "startChar": 8,
        "endLine": 960,
        "endChar": 21
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "579ce37a_a1a364a4",
        "filename": "src/libANGLE/renderer/gl/FramebufferGL.cpp",
        "patchSetId": 14
      },
      "lineNbr": 580,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Mind adding a comment for why we need to resource samples if the attachment samples is \u003e 0?",
      "range": {
        "startLine": 571,
        "startChar": 0,
        "endLine": 580,
        "endChar": 0
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d303d1a6_3b51b190",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2481,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Nit: wil --\u003e will",
      "range": {
        "startLine": 2481,
        "startChar": 88,
        "endLine": 2481,
        "endChar": 91
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1e0a88a_ccedc151",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 14
      },
      "lineNbr": 5456,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Nit: wil --\u003e will",
      "range": {
        "startLine": 5456,
        "startChar": 88,
        "endLine": 5456,
        "endChar": 91
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d88ffee_bdf98976",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 14
      },
      "lineNbr": 983,
      "author": {
        "id": 1130144
      },
      "writtenOn": "2019-09-05T20:11:28Z",
      "side": 1,
      "message": "Nit: wil --\u003e will",
      "range": {
        "startLine": 983,
        "startChar": 88,
        "endLine": 983,
        "endChar": 91
      },
      "revId": "0116c4a68baecd0ef459b08fd74516dd2430b432",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}