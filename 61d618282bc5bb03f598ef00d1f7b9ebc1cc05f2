{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "dd5d5aeb_7f13984a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-12-01T06:17:48Z",
      "side": 1,
      "message": "Note the special handling for ES 3.2 on SwiftShader.  This is the first trace we\u0027re attempting to land that creates a 3.2 context.",
      "revId": "61d618282bc5bb03f598ef00d1f7b9ebc1cc05f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "709fb4a2_fb2b5956",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-12-01T15:40:48Z",
      "side": 1,
      "message": "+Lubosz who has a couple of ES 3.2 traces also queued up",
      "revId": "61d618282bc5bb03f598ef00d1f7b9ebc1cc05f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f72dcef0_29617669",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 675,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-12-01T15:47:04Z",
      "side": 1,
      "message": "Hm... I\u0027d prefer to avoid this kind of skip, because I need all traces to work with SwiftShader for re-tracing. Can you make this work with non-conformant features?",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 675,
        "endChar": 5
      },
      "revId": "61d618282bc5bb03f598ef00d1f7b9ebc1cc05f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "509a08df_ad8c26a5",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 675,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-12-01T16:18:17Z",
      "side": 1,
      "message": "I think so.  The check failing is this one:\n\n    // Limit to ES3.1 if there are any blockers for 3.2.\n    if (!vk::CanSupportGPUShader5EXT(mPhysicalDeviceFeatures))\n    {\n        maxVersion \u003d LimitVersionTo(maxVersion, {3, 1});\n    }",
      "parentUuid": "f72dcef0_29617669",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 675,
        "endChar": 5
      },
      "revId": "61d618282bc5bb03f598ef00d1f7b9ebc1cc05f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5888806_41e87173",
        "filename": "src/tests/perf_tests/TracePerfTest.cpp",
        "patchSetId": 2
      },
      "lineNbr": 675,
      "author": {
        "id": 1256237
      },
      "writtenOn": "2021-12-01T16:57:25Z",
      "side": 1,
      "message": "More specifically, the check inside:\n\n    return features.shaderImageGatherExtended \u0026\u0026\n           features.shaderSampledImageArrayDynamicIndexing \u0026\u0026\n           features.shaderUniformBufferArrayDynamicIndexing;\n\nSwiftShader does not support shaderImageGatherExtended.",
      "parentUuid": "509a08df_ad8c26a5",
      "range": {
        "startLine": 670,
        "startChar": 0,
        "endLine": 675,
        "endChar": 5
      },
      "revId": "61d618282bc5bb03f598ef00d1f7b9ebc1cc05f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}