{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6d0b3ffa_e806f6a4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3367591
      },
      "writtenOn": "2024-03-29T08:05:29Z",
      "side": 1,
      "message": "Hi,\n\nI came across a compile error while trying to bump webkitgtk on buildroot.\n\n\n```\nFAILED: Source/ThirdParty/ANGLE/CMakeFiles/ANGLE.dir/src/libANGLE/renderer/gl/RenderbufferGL.cpp.o \n/home/thomas/br-test-pkg/bootlin-armv5-uclibc/host/bin/arm-linux-g++ --sysroot\u003d/home/thomas/br-test-pkg/bootlin-armv5-uclibc/host/arm-buildroot-linux-uclibcgnueabi/sysroot -DANGLE_ENABLE_ESSL -DANGLE_ENABLE_GLSL -DANGLE_ENABLE_OPENGL -DANGLE_PLATFORM_LINUX -DBUILDING_GTK__\u003d1 -DBUILDING_WEBKIT\u003d1 -DBUILDING_WITH_CMAKE\u003d1 -DEGL_EGL_PROTOTYPES\u003d0 -DEGL_NO_PLATFORM_SPECIFIC_TYPES -DGETTEXT_PACKAGE\u003d\\\"WebKitGTK-4.1\\\" -DGL_GLES_PROTOTYPES\u003d0 -DHAVE_CONFIG_H\u003d1 -DJSC_GLIB_API_ENABLED -DLIBANGLE_IMPLEMENTATION -DPAS_BMALLOC\u003d1 -DUSE_SYSTEM_EGL -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/WebKit -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/include -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/include/KHR -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/common/base -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/common/third_party/xxhash -I/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/third_party/zlib/google -fdiagnostics-color\u003dalways -Wextra -Wall -pipe -fmax-errors\u003d20 -Wno-odr -Wno-stringop-overread -Wno-stringop-overflow -Wno-nonnull -Wno-array-bounds -Wno-expansion-to-defined -Wno-noexcept-type -Wno-psabi -Wno-misleading-indentation -Wno-maybe-uninitialized -Wundef -Wpointer-arith -Wmissing-format-attribute -Wformat-security -Wcast-align -Wno-tautological-compare -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS\u003d64 -O2 -g0 -fno-strict-aliasing -fno-exceptions -fno-rtti  -DNDEBUG -fPIC -fvisibility\u003dhidden -w -std\u003dc++20 -MD -MT Source/ThirdParty/ANGLE/CMakeFiles/ANGLE.dir/src/libANGLE/renderer/gl/RenderbufferGL.cpp.o -MF Source/ThirdParty/ANGLE/CMakeFiles/ANGLE.dir/src/libANGLE/renderer/gl/RenderbufferGL.cpp.o.d -o Source/ThirdParty/ANGLE/CMakeFiles/ANGLE.dir/src/libANGLE/renderer/gl/RenderbufferGL.cpp.o -c /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/gl/RenderbufferGL.cpp\nIn file included from /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/RefCountObject.h:20,\n                 from /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/angletypes.h:19,\n                 from /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/RenderbufferImpl.h:15,\n                 from /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/gl/RenderbufferGL.h:12,\n                 from /home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/gl/RenderbufferGL.cpp:9:\n/home/thomas/br-test-pkg/bootlin-armv5-uclibc/build/webkitgtk-2.44.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/serial_utils.h:132:37: error: static assertion failed: Must always be lock free\n  132 |     static_assert(decltype(mValue)::is_always_lock_free, \"Must always be lock free\");\n      |                   ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n[824/6278] Building CXX object Source/ThirdParty/ANGLE/CMakeFiles/ANGLE.dir/src/libANGLE/renderer/gl/ShaderGL.cpp.o\n```\n\nAre there any compiler limitations that should be considered, or is this a bug?\n\n\nKind regards,\n\n\nThomas Devoogdt",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88ce668d_d6652c69",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-03-29T17:27:42Z",
      "side": 1,
      "message": "Not exactly sure if its compiler bug or we have too strict assertion. I am pretty sure our usage will be lock free on most of modern architectures that we care about. Maybe we just remove this assertion.",
      "parentUuid": "6d0b3ffa_e806f6a4",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05aca823_b97fee43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-03-29T17:40:18Z",
      "side": 1,
      "message": "Actually I think the reason is you are compiling with armv5 which is 32 bit architecture. std::atomic\u003cuint64_t\u003e will use lock on 32 bit architecture. But again, I am expecting ANGLE vulkan backend will mostly used on 64 bit platform. If not, it will still function, just a bit slow due to lock.",
      "parentUuid": "88ce668d_d6652c69",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da548f43_52c5800c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-03-29T17:50:35Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/angle/angle/+/5407870",
      "parentUuid": "05aca823_b97fee43",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8fddf44_97df4483",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1210911
      },
      "writtenOn": "2023-03-28T17:37:28Z",
      "side": 1,
      "message": "this static assert means it is not intended to run on machines which can not guarantee 64bit atomics like mips32, ppc32? can you confirm.",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fdc8844_4676e3e4",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-03-28T19:35:25Z",
      "side": 1,
      "message": "To be honest we might as well drop the assertion; we don\u0027t have a fallback if the architecture has slow atomics anyway (@Charlie who added the assertion)",
      "parentUuid": "e8fddf44_97df4483",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60395225_5b5b2016",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-28T19:40:53Z",
      "side": 1,
      "message": "It will still work, just might be slower (due to lock). The assertion is mainly an alert so that we are aware of this and understand the perf impact. So far all architecture we care are actually lock free.",
      "parentUuid": "0fdc8844_4676e3e4",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "637c6b62_8c653db6",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1210911
      },
      "writtenOn": "2023-03-28T20:54:31Z",
      "side": 1,
      "message": "\u003e It will still work, just might be slower (due to lock). The assertion is mainly an alert so that we are aware of this and understand the perf impact. So far all architecture we care are actually lock free.\n\nSo what do you recommend for building it for architectures like mip32 ?\nbecause currently its a hard build error. \n\n```\n| ../webkitgtk-2.40.0/Source/ThirdParty/ANGLE/src/libANGLE/renderer/serial_utils.h:132:5: error: static assertion failed due to requirement \u0027atomic\u003cunsigned long long\u003e::is_always_lock_free\u0027: Must always be lock free\n|     static_assert(decltype(mValue)::is_always_lock_free, \"Must always be lock free\");\n|     ^             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n| 1 error generated.\n```",
      "parentUuid": "60395225_5b5b2016",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a67a105_3ddc9e0d",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-28T21:20:35Z",
      "side": 1,
      "message": "yea, on 32 bit platform it will be troublesome. If you really want to get it running on 32 bit, you can remove the assertion.",
      "parentUuid": "637c6b62_8c653db6",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7965c8a2_ef620295",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1210911
      },
      "writtenOn": "2023-03-29T19:09:04Z",
      "side": 1,
      "message": "are you open to remove this assert completely then ?",
      "parentUuid": "0a67a105_3ddc9e0d",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d6f11c5_9b636617",
        "filename": "src/libANGLE/renderer/serial_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-03-29T19:15:24Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "7965c8a2_ef620295",
      "revId": "ce8ce6f81eff8a84e2ea59930cb995b1107181e2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}