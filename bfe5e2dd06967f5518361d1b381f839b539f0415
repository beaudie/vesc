{
  "comments": [
    {
      "key": {
        "uuid": "b33f88c4_33a79119",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-03T23:24:24Z",
      "side": 1,
      "message": "PTAL",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "579c6413_74dc0626",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "Looks much cleaner.",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae36d306_8e2a91e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:26:55Z",
      "side": 1,
      "message": "Thanks, will handle your other feedback in next update.",
      "parentUuid": "579c6413_74dc0626",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b5cc753_c8de1396",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1673,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T16:12:40Z",
      "side": 1,
      "message": "I was thinking about it more and I actually have a question. Take this scenario:\n\n- Create 2D texture T0 and T1\n- Attach FBO to T0 (as draw buffer 0) and T1 (as draw buffer 1)\n- Draw (so RP starts)\n- Disable draw buffer 1\n- Bind T1 as texture\n- Draw with a program that samples from the texture\n\nDoes the second draw in the above program constitute a feedback loop? If not (and that\u0027s legal OpenGL), then we have a problem in that we are using the image of T1 as both color attachment and sampled image. It would be great if you added a test based on this.\n\nIf the above is not legal OpenGL, then what\u0027s stopping us from always starting the RP with all draw buffers (so, the loop below wouldn\u0027t go over mState.getEnabledDrawBuffers(), but rather all draw buffers with some attachment, enabled or not)?",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57b015d_e99d2c0d",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1673,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T17:30:30Z",
      "side": 1,
      "message": "From reading of GL spec says that this constitutes a feedback loop, and should produce undefined behavior. The feedback loop condition says as long as it is attached, it creates the loop. draw buffer state should not affect the loop. This is orthogonal to how we implement this via a new RP or use color mask. I am not sure we should add a test for the undefined behavior though.\n\nNothing stops us always starts RP with all attached buffers. I think that is the right thing to do. I just avoiding the bigger change here to get it going. Maybe we  can do it as a follow up CL. (I was looking at exact this, but not seeing a bit mask for all attachments, and opt for a smaller change that solves the problem I am looking).",
      "parentUuid": "0b5cc753_c8de1396",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77b6536d_e724ed61",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1673,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T18:11:37Z",
      "side": 1,
      "message": "Excellent.\n\nFollow up sounds good to me.",
      "parentUuid": "d57b015d_e99d2c0d",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c99c2d84_db58e18c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1803,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "It would probably look a little cleaner to do something like was here before:\n\n  gl::DrawBufferMask drawBufferMask \u003d mCurrentFramebufferDesc.getColorBufferMask();",
      "range": {
        "startLine": 1803,
        "startChar": 24,
        "endLine": 1803,
        "endChar": 66
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deefcccd_00b3a30c",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1803,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c99c2d84_db58e18c",
      "range": {
        "startLine": 1803,
        "startChar": 24,
        "endLine": 1803,
        "endChar": 66
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4de030ea_11199224",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1879,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T18:11:37Z",
      "side": 1,
      "message": "Not sure what I\u0027m missing, but isn\u0027t colorBufferMask always identical to enabledDrawBuffers()? (That is, except in syncState)",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86e4c68d_4fa0eae9",
        "filename": "src/libANGLE/renderer/vulkan/FramebufferVk.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1879,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "This get called from various draw commands (clearImpl, for example), at which time the enabledDrawBuffers may have changed and no longer matches mCurrentFramebufferDesc. With this, you will hit test failures as seen in previous patchsets.",
      "parentUuid": "4de030ea_11199224",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a563b9e_05f81d35",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1867,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T16:12:40Z",
      "side": 1,
      "message": "Please use `if` instead. We generally use ?: for value expression rather than to achieve if-else.",
      "range": {
        "startLine": 1867,
        "startChar": 4,
        "endLine": 1867,
        "endChar": 34
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e55f153_068ae777",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 6
      },
      "lineNbr": 1867,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a563b9e_05f81d35",
      "range": {
        "startLine": 1867,
        "startChar": 4,
        "endLine": 1867,
        "endChar": 34
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a2d51e1_2e729fad",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 984,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "Can you return a (const) reference?   It looks like most functions that return a gl::DrawBufferMask just return the value, but some return a reference.",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9e8eb91_e3f30dee",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 984,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2020-09-09T15:58:57Z",
      "side": 1,
      "message": "gl::DrawBufferMask is a wrapped integer, so preference is to make a copy instead of returning reference.",
      "parentUuid": "4a2d51e1_2e729fad",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdff97a7_96a8e8ab",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 6
      },
      "lineNbr": 984,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Right, and agree. But I do see a few places is returning reference though.",
      "parentUuid": "d9e8eb91_e3f30dee",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3f48245_83f093e0",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 800,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "typo: color2UniformLocation",
      "range": {
        "startLine": 800,
        "startChar": 18,
        "endLine": 800,
        "endChar": 39
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f01db64_66b81e9c",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 800,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3f48245_83f093e0",
      "range": {
        "startLine": 800,
        "startChar": 18,
        "endLine": 800,
        "endChar": 39
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e6e54e7_0ef67f27",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 816,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "Need to uncomment.",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 816,
        "endChar": 0
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "974a3f12_ca743f90",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 816,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:26:55Z",
      "side": 1,
      "message": "Will remove these four lines. verifyAttachment call will break renderpass, I think. I was using it to verify that the rendering is actually saine.",
      "parentUuid": "8e6e54e7_0ef67f27",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 816,
        "endChar": 0
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fa17f29_a9c6a220",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 816,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "974a3f12_ca743f90",
      "range": {
        "startLine": 813,
        "startChar": 0,
        "endLine": 816,
        "endChar": 0
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c9d132d_d30081ea",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 841,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "Should this be something other than what setupColorMaskForDrawBuffersTest() initialized it to (e.g., red or yellow), so we know the draw didn\u0027t write to it?",
      "range": {
        "startLine": 841,
        "startChar": 52,
        "endLine": 841,
        "endChar": 57
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf6432e_2b71e1a7",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 841,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4c9d132d_d30081ea",
      "range": {
        "startLine": 841,
        "startChar": 52,
        "endLine": 841,
        "endChar": 57
      },
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c2e58e6_f20688ee",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 892,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-08T23:08:30Z",
      "side": 1,
      "message": "Should there be a ANGLE_INSTANTIATE_TEST_ES1() version also, since you have an ES1 version of the shader?   Or is that shader exercised somehow else?",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1524d49a_451b2dee",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 892,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T00:26:55Z",
      "side": 1,
      "message": "This is GLSL version 1. I dont think OpenGLES1 supports FBO at all.",
      "parentUuid": "3c2e58e6_f20688ee",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8973985b_e6a68c0c",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 892,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2020-09-09T00:36:39Z",
      "side": 1,
      "message": "Ah, right.   I ask, because you have this above:\n\n        if (getClientMajorVersion() \u003d\u003d 3)\n        {\n            program \u003d CompileProgram(essl3_shaders::vs::Simple(), kFS_ESSL3);\n        }\n        else\n        {\n            program \u003d CompileProgram(essl1_shaders::vs::Simple(), kFS_ESSL1);\n        }\n\nThese tests will (currently) always be run with a 3.x context.   If you want to execute both shaders, you\u0027ll need to use ANGLE_INSTANTIATE_TEST_ES2_AND_ES3().\n\nOtherwise, you can remove the check and the extra \u003c3.x shader.",
      "parentUuid": "1524d49a_451b2dee",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f9a2d57_e48e50be",
        "filename": "src/tests/gl_tests/DrawBuffersTest.cpp",
        "patchSetId": 6
      },
      "lineNbr": 892,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2020-09-09T19:11:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8973985b_e6a68c0c",
      "revId": "bfe5e2dd06967f5518361d1b381f839b539f0415",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}