{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1844c05a_14a1934e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3581,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T17:16:38Z",
      "side": 1,
      "message": "The API name sounds this should be a const func, but it is not just doing check. checkAndFlushExcessivePendingGarbage?",
      "range": {
        "startLine": 3581,
        "startChar": 25,
        "endLine": 3581,
        "endChar": 48
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98ebd469_228822ec",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3581,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T18:07:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1844c05a_14a1934e",
      "range": {
        "startLine": 3581,
        "startChar": 25,
        "endLine": 3581,
        "endChar": 48
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b136cbf8_49e2fa9e",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3587,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T17:16:38Z",
      "side": 1,
      "message": "flushImpl should be enough. Once you flush, you have the other code that handles \"finish\" already submitted commands when allocation fails should take care of the reset.",
      "range": {
        "startLine": 3587,
        "startChar": 18,
        "endLine": 3587,
        "endChar": 28
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "edd71aeb_9ceba4f2",
        "filename": "src/libANGLE/renderer/vulkan/ContextVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3587,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T18:07:45Z",
      "side": 1,
      "message": "Updated. Thanks!",
      "parentUuid": "b136cbf8_49e2fa9e",
      "range": {
        "startLine": 3587,
        "startChar": 18,
        "endLine": 3587,
        "endChar": 28
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3b4a6df_5bae3aee",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3563,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T17:16:38Z",
      "side": 1,
      "message": "I feel that this is a bit excessive. We are not distinguishing heap types in the garbage accounting, so I am not seeing reasons to distinguish heap types here as well. Probably a simple for loop to find out the max heap size should be good enough.",
      "range": {
        "startLine": 3560,
        "startChar": 3,
        "endLine": 3563,
        "endChar": 69
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbdd2155_aa51a6fa",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3563,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T18:07:45Z",
      "side": 1,
      "message": "On some devices, I see that one heap is much larger than the others. For example, on a tested Linux machine, we have the following heaps:\n```\n0 | Heap size: 4294967296 | Flags: 0x1\n1 | Heap size: 50248083456 | Flags: 0x0\n2 | Heap size: 257949696 | Flags: 0x1\n```\nThe largest heap size is about 50GB. If we use this size, the test `BufferDataInLoopManyTimes` will still run out of memory.\n\nWhat if we only use the heaps that have a flag of `0x1` (`VK_MEMORY_HEAP_DEVICE_LOCAL_BIT`) if there are any. Otherwise, we would pick the largest one?",
      "parentUuid": "e3b4a6df_5bae3aee",
      "range": {
        "startLine": 3560,
        "startChar": 3,
        "endLine": 3563,
        "endChar": 69
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78b39e73_6289f784",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3563,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T18:41:41Z",
      "side": 1,
      "message": "Here is what I am thinking: there will be two paths trigger this:\n\n1) When allocation failed, the call unwind to Buffer/Image and then we realize there are pending garbages, and we can issue a flushImpl call and try allocation again.\n\n2) When we accumulate excessive garbage that could gets recycled if we flush them, we should do that. This is precaution approach and also for performance reasons.\n\nWe need both, and this CL is handling #2). You will need another CL to handle #1).\n\nAnd by doing this, you can also moving the existing allocation failure logic all the way back to one place, at the higher level call stack where you trigger flushImpl.\n\nWith just this CL, no matter how you pick the threshold, I think you will still end up OOM, depends on which heap you try to allocate.",
      "parentUuid": "bbdd2155_aa51a6fa",
      "range": {
        "startLine": 3560,
        "startChar": 3,
        "endLine": 3563,
        "endChar": 69
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d829be04_f91d0849",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 3563,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T20:00:03Z",
      "side": 1,
      "message": "Thanks. I see. For case #1, we will have the following CL: https://crrev.com/c/4787949\n\nFor the excessive garbage threshold, I have changed it to the maximum heap size, but currently it is capped at 1GB.",
      "parentUuid": "78b39e73_6289f784",
      "range": {
        "startLine": 3560,
        "startChar": 3,
        "endLine": 3563,
        "endChar": 69
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c591334a_8f15ad48",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 5409,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T17:16:38Z",
      "side": 1,
      "message": "This line cancels out line 5401, then why not just move line 5401 to 5404?",
      "range": {
        "startLine": 5409,
        "startChar": 0,
        "endLine": 5409,
        "endChar": 86
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d5156b_3ea19b94",
        "filename": "src/libANGLE/renderer/vulkan/RendererVk.cpp",
        "patchSetId": 5
      },
      "lineNbr": 5409,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T18:07:45Z",
      "side": 1,
      "message": "Done. The original intent was to follow the size of `mPendingSubmissionSuballocationGarbage` in each iteration. However, after this change, the result at the end of the function will be the same.",
      "parentUuid": "c591334a_8f15ad48",
      "range": {
        "startLine": 5409,
        "startChar": 0,
        "endLine": 5409,
        "endChar": 86
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0531e485_e7f073f7",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-21T17:16:38Z",
      "side": 1,
      "message": "ExcessivePendingGarbage?",
      "range": {
        "startLine": 1289,
        "startChar": 4,
        "endLine": 1289,
        "endChar": 35
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "345ae602_ed835c33",
        "filename": "src/libANGLE/renderer/vulkan/vk_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 1289,
      "author": {
        "id": 1525982
      },
      "writtenOn": "2023-08-21T18:07:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0531e485_e7f073f7",
      "range": {
        "startLine": 1289,
        "startChar": 4,
        "endLine": 1289,
        "endChar": 35
      },
      "revId": "626c2685a5f3740fe1ae32b675a8f56f465c3abc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}