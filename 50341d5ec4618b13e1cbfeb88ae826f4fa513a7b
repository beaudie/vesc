{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6fc9142d_a228c324",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-01T17:35:08Z",
      "side": 1,
      "message": "Sigh...\n\nI regret now now separating the locks for EGLsync objects. I thought we were done with this deadlock",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19ef5dd0_99996b8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-01T17:49:29Z",
      "side": 1,
      "message": "Hmm... sorry this is the share group lock. I hope we can figure out a way to avoid this.",
      "parentUuid": "6fc9142d_a228c324",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9811538d_849db520",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-01T18:08:00Z",
      "side": 1,
      "message": "Like, I wonder what happens if we _don\u0027t_ take the sharegroup lock for getBufferAge, and instead return an age of 0 if ANI is needed. I do recall some test bugs which expected age to be always set, but we could fix (deqp) test bugs if we have to.\n\nNeither Chromium, nor any app we have traces of use EGL_BUFFER_AGE. I\u0027d lean on hurting EGL_BUFFER_AGE instead of the sharegroup lock if we have to choose.",
      "parentUuid": "19ef5dd0_99996b8e",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9934eb72_22b66eb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-08-01T18:11:18Z",
      "side": 1,
      "message": "It is slightly different deadlock.\n\nIn the future I want to try and make change that will perform almost all (except initial) ANI calls before/after swap without the lock. Initial ANI calls should not cause recursion. But for this change at least 4 swapchain images is required, because ANI near the swap will be for the next frame (so -1 frame of lag in the worst case).\n\n\u003e Like, I wonder what happens if we don\u0027t take the sharegroup lock for getBufferAge, and instead return an age of 0 if ANI is needed. I do recall some test bugs which expected age to be always set, but we could fix (deqp) test bugs if we have to.\n\nI was thinking about that. However if skip ANI in getBufferAge it may still happen in the next GLES call if it will use the Windows Surface. I can try to see what will happen.\n\n---\n\nNot related to this deadlock, but rather to the old one. Android platform\u0027s change by Yiwei:\n```\nswapchain: avoid redundant disconnect/connect for new surface\n```\nit looks like it will skip `connect/disconnect` calls only for the initial Swapchain creation. Recreate of the Swapchain will still call `connect/disconnect` and may cause the deadlock. Unfortunately this is hard to fix without mutex unlock and not breaking \"asyncCommandQueue\".\n\nOne idea that I just come up with: if need to recreate a Swapchain inside GLES calls - use temporary off-screen image instead to render the frame, then perform Recreate + ANI without the lock just before the swap and then blit to the image inside the swap. Next frame will be rendered as usual.\n\n\u003e  I hope we can figure out a way to avoid this.\n\nI also hope so.",
      "parentUuid": "6fc9142d_a228c324",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d51e5fe_a1a0239c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-08-01T18:21:56Z",
      "side": 1,
      "message": "ASSERT in `glDrawArrays`\n\nI disabled `angle_enable_context_mutex_recursion` and made changes\n```\n     if (needsAcquireImageOrProcessResult())\n     {\n-        // Acquire the current image if needed.\n-        egl::Error result \u003d\n-            angle::ToEGL(doDeferredAcquireNextImage(context, false), EGL_BAD_SURFACE);\n-        if (result.isError())\n-        {\n-            return result;\n-        }\n+        *age \u003d 0;\n+        return egl::NoError();\n     }\n```\n\n```\nAssert failed in doLock (../../src/libANGLE/SharedContextMutex.cpp:244): !CheckThreadIdCurrent(mOwnerThreadId, \u0026currentThreadId)\n\n#00 pc 0000000000679528  /vendor/lib64/egl/libGLESv2_angle.so (gl::LogMessage::~LogMessage()+280) (BuildId: e841a50d89da50da)\n#01 pc 0000000000546d74  /vendor/lib64/egl/libGLESv2_angle.so (egl::SharedContextMutex\u003cstd::__Cr::mutex\u003e::doLock()+220) (BuildId: e841a50d89da50da)\n#02 pc 00000000002a0aa4  /vendor/lib64/egl/libGLESv2_angle.so (EGL_ClientWaitSyncKHR+360) (BuildId: e841a50d89da50da)\n#03 pc 00000000000674f0  /system/lib64/libEGL.so (android::eglClientWaitSyncKHRImpl(void*, void*, int, unsigned long)+112) (BuildId: c4698b8b366f6519dbd7bd3a5f6239f2)\n#04 pc 0000000000086648  /system/lib64/libgui.so (android::BufferQueueProducer::dequeueBuffer(int*, android::sp\u003candroid::Fence\u003e*, unsigned int, unsigned int, int, unsigned long, unsigned long*, android::FrameEventHistoryDelta*)+3240) (BuildId: ff35b91736084ee7c49efe908fb9f8f3)\n#05 pc 00000000000e24fc  /system/lib64/libgui.so (android::Surface::dequeueBuffer(ANativeWindowBuffer**, int*)+392) (BuildId: ff35b91736084ee7c49efe908fb9f8f3)\n#06 pc 0000000000755770  /system/lib64/libhwui.so (android::uirenderer::renderthread::ReliableSurface::hook_dequeueBuffer(ANativeWindow*, int (*)(ANativeWindow*, ANativeWindowBuffer**, int*), void*, ANativeWindowBuffer**, int*)+80) (BuildId: 0ab7d7584ac800860c4d180557441d1b)\n#07 pc 00000000000e0b48  /system/lib64/libgui.so (android::Surface::hook_dequeueBuffer(ANativeWindow*, ANativeWindowBuffer**, int*)+92) (BuildId: ff35b91736084ee7c49efe908fb9f8f3)\n#08 pc 000000000002cc8c  /system/lib64/libvulkan.so (vulkan::driver::AcquireNextImageKHR(VkDevice_T*, VkSwapchainKHR_T*, unsigned long, VkSemaphore_T*, VkFence_T*, unsigned int*)+280) (BuildId: 0c72f8685858f73fbb13fd68d401bba5)\n#09 pc 00000000003ea5cc  /vendor/lib64/egl/libGLESv2_angle.so (rx::(anonymous namespace)::TryAcquireNextImageUnlocked(VkDevice_T*, VkSwapchainKHR_T*, rx::impl::ImageAcquireOperation*)+324) (BuildId: e841a50d89da50da)\n#10 pc 00000000003e6a84  /vendor/lib64/egl/libGLESv2_angle.so (rx::WindowSurfaceVk::acquireNextSwapchainImage(rx::vk::Context*)+320) (BuildId: e841a50d89da50da)\n#11 pc 00000000003e7ef8  /vendor/lib64/egl/libGLESv2_angle.so (rx::WindowSurfaceVk::doDeferredAcquireNextImageWithUsableSwapchain(gl::Context const*)+176) (BuildId: e841a50d89da50da)\n#12 pc 00000000003e6c00  /vendor/lib64/egl/libGLESv2_angle.so (rx::WindowSurfaceVk::getAttachmentRenderTarget(gl::Context const*, unsigned int, gl::ImageIndex const\u0026, int, rx::FramebufferAttachmentRenderTarget**)+256) (BuildId: e841a50d89da50da)\n#13 pc 00000000003a8b80  /vendor/lib64/egl/libGLESv2_angle.so (gl::FramebufferAttachment::getRenderTargetImpl(gl::Context const*, int, rx::FramebufferAttachmentRenderTarget**) const+248) (BuildId: e841a50d89da50da)\n#14 pc 00000000003a8a34  /vendor/lib64/egl/libGLESv2_angle.so (rx::RenderTargetCache\u003crx::RenderTargetVk\u003e::updateCachedRenderTarget(gl::Context const*, gl::FramebufferAttachment const*, rx::RenderTargetVk**)+248) (BuildId: e841a50d89da50da)\n#15 pc 00000000003a3b1c  /vendor/lib64/egl/libGLESv2_angle.so (rx::RenderTargetCache\u003crx::RenderTargetVk\u003e::updateColorRenderTarget(gl::Context const*, gl::FramebufferState const\u0026, unsigned long)+76) (BuildId: e841a50d89da50da)\n#16 pc 00000000003a3940  /vendor/lib64/egl/libGLESv2_angle.so (rx::FramebufferVk::updateColorAttachment(gl::Context const*, unsigned int)+52) (BuildId: e841a50d89da50da)\n#17 pc 00000000003a440c  /vendor/lib64/egl/libGLESv2_angle.so (rx::FramebufferVk::syncState(gl::Context const*, unsigned int, angle::BitSetT\u003c29ul, unsigned long, unsigned long\u003e const\u0026, gl::Command)+680) (BuildId: e841a50d89da50da)\n#18 pc 00000000004f3b6c  /vendor/lib64/egl/libGLESv2_angle.so (gl::Framebuffer::syncState(gl::Context const*, unsigned int, gl::Command) const+104) (BuildId: e841a50d89da50da)\n#19 pc 00000000005578ec  /vendor/lib64/egl/libGLESv2_angle.so (gl::State::syncDrawFramebuffer(gl::Context const*, gl::Command)+256) (BuildId: e841a50d89da50da)\n#20 pc 00000000002b9a40  /vendor/lib64/egl/libGLESv2_angle.so (GL_DrawArrays+908) (BuildId: e841a50d89da50da)\n```\n\nEverything is fine with `angle_enable_context_mutex_recursion \u003d true`.",
      "parentUuid": "9934eb72_22b66eb8",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51018947_a11bbed6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-01T18:47:44Z",
      "side": 1,
      "message": "ðŸ˜ž Ok\n\n\u003e One idea that I just come up with\n\nThat could work, but the connect/disconnect thing is a separate problem, isn\u0027t it?",
      "parentUuid": "7d51e5fe_a1a0239c",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47de9792_e807eb7f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-01T18:48:14Z",
      "side": 1,
      "message": "(oops, you just said it\u0027s not related to this, never mind)",
      "parentUuid": "51018947_a11bbed6",
      "revId": "50341d5ec4618b13e1cbfeb88ae826f4fa513a7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}