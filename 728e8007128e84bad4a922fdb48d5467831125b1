{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d3193538_25114c4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-11T13:49:42Z",
      "side": 1,
      "message": "@Igor FYI",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67026990_28bd0577",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1860,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-11T17:37:20Z",
      "side": 1,
      "message": "This ASSERT fired in a simple test app. Need to update enf2end tests to also cover this case.\n\n```\neglMakeCurrent(display, surface, surface, context);\neglSurfaceAttrib(display, surface, EGL_RENDER_BUFFER, EGL_SINGLE_BUFFER);\neglSwapBuffers(display, surface);\n\nglClearColor(0.2f, 0.2f, 0.2f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\nglFlush();\n\nglEnable(GL_SCISSOR_TEST);  // Works fine without scissor (can\u0027t tell why).\nglScissor(100, 100, 100, 100);\nglClearColor(0.0f, 0.5f, 0.0f, 1.0f);\nglClear(GL_COLOR_BUFFER_BIT);\nglFlush();  // Assert in this flush.\n\nAbort message: \u0027FATAL: SurfaceVk.cpp:1860 (prePresentSubmit):        ! Assert failed in prePresentSubmit (../../src/libANGLE/renderer/vulkan/SurfaceVk.cpp:1860): !renderer-\u003egetFeatures().supportsPresentation.enabled || image.image-\u003egetCurrentImageLayout() \u003d\u003d vk::ImageLayout::Present || image.image-\u003egetCurrentImageLayout() \u003d\u003d vk::ImageLayout::Undefined\u0027\n```\n\n\u003e image may already in Present layout (if single buffer mode)\n\nIn single buffer mode Layout is `vk::ImageLayout::SharedPresent`. Adding this layout fixes the above assert.\n\nHowever, `vk::ImageLayout::Present` still need to be present. Because this layout happens a lot in FIFO mode, when testing this CL as system driver on the S906B device. From my testing `vk::ImageLayout::Present` happens in a simple test:\n```\n// Will also test for vk::ImageLayout::Undefined\nfor (int i \u003d 0; i \u003c 10; ++i)\n{\n    eglSwapBuffers(display, surface);\n}\n```\n\nTherefore, comment to this `if` is not completely correct.\n\n---\n\nThis assert got me thinking...\nThe clear with scissor writte some commands but did NOT processed the ANI semaphore! What if that commands will be flushed to primary somehow and then submitted without a semaphore at all? I suspect a bug.\n\nTherefore, this `addWaitSemaphore()` is a bit dangerous. It will skip possible bugs and add wait semaphore after commands that access the image.\n\nThe only valid case for `addWaitSemaphore()` is when there was no access to the image at ALL. Unfortunately, `ASSERT` can\u0027t distinguish cases when there was no access or there was access but ANI was not processed.\n\n---\n\nMade additional checks. ASSERT also fires if replace scissored clear with `drawQuad()`. So it turns out problem affects everything that performs draw with RenderPass.\n\nThis time I tested in the modified `EGLSingleBufferTest.OnSetSurfaceAttrib` test. Basically inserted test code after the line:\n```\n        // Check color for automation.\n        EXPECT_PIXEL_COLOR_EQ(1, 1, GLColor::green);\n```\n\nAfter adding `vk::ImageLayout::SharedPresent` into the ASSERT I got VVL error:\n```\nRR: RendererVk.cpp:761 (DebugUtilsMessenger): [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Validation Error: [ UNASSIGNED-CoreValidation-DrawState-InvalidImageLayout ] Object 0: handle \u003d 0x79fb5a0c10, type \u003d VK_OBJECT_TYPE_COMMAND_BUFFER; | MessageID \u003d 0x4dae5635 | vkQueueSubmit(): pSubmits[0].pCommandBuffers[0] command buffer VkCommandBuffer 0x79fb5a0c10[] expects VkImage 0x1f000000001f[] (subresource: aspectMask 0x1 array layer 0, mip level 0) to be in layout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL--instead, current layout is VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR.\n```",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1857e443_7253280c",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1860,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-11T17:48:06Z",
      "side": 1,
      "message": "Here is my test code:\n```\n        glClearColor(0.0, 1.0, 0.0, 1.0);\n        glClear(GL_COLOR_BUFFER_BIT);\n        glFlush();\n\n        glEnable(GL_SCISSOR_TEST);  // Works fine without scissor (can\u0027t tell why).\n        glScissor(1, 1, 10, 10);\n        glClearColor(0.0f, 0.5f, 0.0f, 1.0f);\n        // glClear(GL_COLOR_BUFFER_BIT);\n        ANGLE_GL_PROGRAM(program, essl1_shaders::vs::Simple(), essl1_shaders::fs::Red());\n        drawQuad(program, essl1_shaders::PositionAttrib(), 0.5f);\n        glFlush();  // Assert in the next flush.\n        glDisable(GL_SCISSOR_TEST);\n```",
      "parentUuid": "67026990_28bd0577",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df6c4cf2_dbd86eca",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1860,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Thanks for catching the assertion. I added three new tests based on your comment.\nThe single buffer mode there is no ANI call (See https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/renderer/vulkan/SurfaceVk.cpp#2281 to 2291). There is only one time ANI call when we switch from double buffer mode to single buffer mode, and at that time we insert the semaphore wait as well as layout change ( see https://chromium.googlesource.com/angle/angle/+/refs/heads/main/src/libANGLE/renderer/vulkan/SurfaceVk.cpp#2337 to #2365)",
      "parentUuid": "1857e443_7253280c",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e183ed7e_5de5b661",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1860,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-12T13:23:26Z",
      "side": 1,
      "message": "\u003e The single buffer mode there is no ANI call\n\nI guess there should be no ANI call but there is. I wanted to fix this, but more about this later.\n\nThe `mNeedToAcquireNextSwapchainImage` will be `true` as always and instead of checking status in `vkGetSwapchainStatusKHR()` we will do acquire again.\n```\nif (isSharedPresentMode() \u0026\u0026 !mNeedToAcquireNextSwapchainImage)\n```\n\nHere is logs from a simple test:\n```\n    eglSurfaceAttrib(mDisplay, surface, EGL_RENDER_BUFFER, EGL_SINGLE_BUFFER))\n    for (int i \u003d 0; i \u003c 6; ++i)\n    {\n        glClearColor(1.0, 1.0, 1.0 / (i + 1), 1.0);\n        glClear(GL_COLOR_BUFFER_BIT);\n        INFO() \u003c\u003c \"SPM_LOG: eglSwapBuffers() #\" \u003c\u003c i;\n        EXPECT_EGL_TRUE(eglSwapBuffers(mDisplay, surface));\n        INFO() \u003c\u003c \"SPM_LOG:\";\n    }\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 0; isSPMDesired(): 0; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #0\nWindowSurfaceVk::present(): isSPM(): 0; presentSemaphore.getHandle(): 0xd897d90000000016\nWindowSurfaceVk::present(): isSPM(): 0; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 0; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 1; isSPMDesired(): 1; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #1\nWindowSurfaceVk::present(): isSPM(): 1; presentSemaphore.getHandle(): 0x2cfba2000000001c\nWindowSurfaceVk::present(): isSPM(): 1; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 1; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 1; isSPMDesired(): 1; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #2\nWindowSurfaceVk::present(): isSPM(): 1; presentSemaphore.getHandle(): 0x908683000000001d\nWindowSurfaceVk::present(): isSPM(): 1; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 1; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 1; isSPMDesired(): 1; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #3\nWindowSurfaceVk::present(): isSPM(): 1; presentSemaphore.getHandle(): 0xd897d90000000016\nWindowSurfaceVk::present(): isSPM(): 1; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 1; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 1; isSPMDesired(): 1; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #4\nWindowSurfaceVk::present(): isSPM(): 1; presentSemaphore.getHandle(): 0x908683000000001d\nWindowSurfaceVk::present(): isSPM(): 1; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 1; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\nWindowSurfaceVk::acquireNextSwapchainImage() isSPM(): 1; isSPMDesired(): 1; ImageIndex: 0; presentFence.getStatus(): 0\nEGLSingleBufferTest.OnSetSurfaceAttrib: eglSwapBuffers() #5\nWindowSurfaceVk::present(): isSPM(): 1; presentSemaphore.getHandle(): 0xd897d90000000016\nWindowSurfaceVk::present(): isSPM(): 1; mPresentHistory.emplace_back() -\u003e mPresentHistory.{size(): 2; back().imageIndex: 0}\nWindowSurfaceVk::present(): isSPM(): 1; cleanUpPresentHistory() -\u003e mPresentHistory.size(): 1\n\n```\n\nHowever, attaching Single Buffer Mode ANI semaphore late - is not a problem, because it is already signaled right away.\n\n---\n\nI wanted to remove `!mNeedToAcquireNextSwapchainImage` but it is not that simple because of CL:\n[Vulkan: Rework present semaphore recycling](https://chromium-review.googlesource.com/c/angle/angle/+/4058286)\n\nThe above CL relies on Acquire Fence to manage Present Semaphores. However in a Single Buffer Mode image index is always 0 and ANI fence is always signaled! So the whole \"Rework\" logic is broken when using Single Buffer Mode. Semaphore will always be recycled on the next present resulting in 2 semaphores reused.\n\nHowever, if simply remove `!mNeedToAcquireNextSwapchainImage` from the check, there will be no ANI call, and no `AssociateFenceWithPresentHistory()` call, resulting in infinite grow of `mPresentHistory`.\n\nTherefore, I can\u0027t fix repeated ANI in a single buffer mode without fixing the \"Rework\" first. Maybe generate virtual image index in a Single Buffer Mode that will wrap around based on some max index, deduced from the CPU throttling logic.\n\nNote: problem only relevant if device does not support `VK_EXT_swapchain_maintenance1`.",
      "parentUuid": "df6c4cf2_dbd86eca",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dbeb7113_2d4bb106",
        "filename": "src/libANGLE/renderer/vulkan/SurfaceVk.cpp",
        "patchSetId": 15
      },
      "lineNbr": 1860,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-12T17:04:04Z",
      "side": 1,
      "message": "Right, I think you probably even don\u0027t need any of ANI semaphores, just pass in nullptr for the semaphore when you make ANI calls. But anyway, I made a separate CL for slightly better fix for this. See https://chromium-review.googlesource.com/c/angle/angle/+/4419126",
      "parentUuid": "e183ed7e_5de5b661",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7622a8c_1cc73878",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 5733,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-11T13:49:42Z",
      "side": 1,
      "message": "nit: ANI",
      "range": {
        "startLine": 5733,
        "startChar": 76,
        "endLine": 5733,
        "endChar": 79
      },
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8575821_a4f45408",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 5733,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7622a8c_1cc73878",
      "range": {
        "startLine": 5733,
        "startChar": 76,
        "endLine": 5733,
        "endChar": 79
      },
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3cd1492_da7f523f",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 5735,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-11T13:49:42Z",
      "side": 1,
      "message": "Suggest doing this from the Surface itself, so _it_ will be the one managing this semaphore (for example if a future implementation transfers ownership instead).",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5832d3c6_e4e85f80",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.cpp",
        "patchSetId": 15
      },
      "lineNbr": 5735,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3cd1492_da7f523f",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73c0cd19_7b67c7dd",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1165,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-11T17:37:20Z",
      "side": 1,
      "message": "Why it is `add` and not `set`?",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92538886_c8118406",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 1165,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73c0cd19_7b67c7dd",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c31b3dea_052fa8cc",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 2418,
      "author": {
        "id": 1564492
      },
      "writtenOn": "2023-04-11T17:37:20Z",
      "side": 1,
      "message": "Need `ASSERT(semaphore !\u003d VK_NULL_HANDLE);`?",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6de3e69_65ebdab3",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 2418,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c31b3dea_052fa8cc",
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dcb0724_02c758a5",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 2538,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-04-11T13:49:42Z",
      "side": 1,
      "message": "nit: suggest either capitalizing ANI everywhere (even in the beginning), or better use a word instead? Like `swapchainSemaphore` or `swapchainAcquireSemaphore`.",
      "range": {
        "startLine": 2538,
        "startChar": 34,
        "endLine": 2538,
        "endChar": 37
      },
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd00bbc3_e063b8c2",
        "filename": "src/libANGLE/renderer/vulkan/vk_helpers.h",
        "patchSetId": 15
      },
      "lineNbr": 2538,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-04-11T20:18:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1dcb0724_02c758a5",
      "range": {
        "startLine": 2538,
        "startChar": 34,
        "endLine": 2538,
        "endChar": 37
      },
      "revId": "728e8007128e84bad4a922fdb48d5467831125b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}