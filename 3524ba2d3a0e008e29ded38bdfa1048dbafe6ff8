{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "542c5d88_bb83d6f3",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 9
      },
      "lineNbr": 281,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-08-24T15:40:50Z",
      "side": 1,
      "message": "This has been a recurrent pattern your recent CLs Charlie, and it\u0027s a fairly complex construct. Would it make sense to add a generic helper for saving/loading arrays like this? Something that would look like `stream-\u003ewriteArrayData(samplerBindings)` / `stream-\u003ereadArrayData(samplerBindings, samplerBindingCount)` (the latter could also resize)",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 281,
        "endChar": 81
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5a72753_43c5f6e8",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 9
      },
      "lineNbr": 281,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2023-08-24T15:49:10Z",
      "side": 1,
      "message": "On the same subject, I _really_ wish we would have the program state that can be serialized/deserialized defined in a json file and have the whole serialization/deserialization autogenerated as well as the different state structs that each of these classes can instantiate.\n\nThen we can play with their types too and we\u0027d know it\u0027s all safe.",
      "parentUuid": "542c5d88_bb83d6f3",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 281,
        "endChar": 81
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38cf64fa_72f6062c",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 9
      },
      "lineNbr": 281,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-24T16:55:28Z",
      "side": 1,
      "message": "I want to add a templated helper function for this to ease the eye, basically replace BinaryStream::writeIntVector with writeVector\u003cT\u003e. But I want to use static assert to ensure T is trivially copyale. So lets wait until https://chromium-review.googlesource.com/c/angle/angle/+/4799342 landed and I can clean some of this up.",
      "parentUuid": "b5a72753_43c5f6e8",
      "range": {
        "startLine": 280,
        "startChar": 0,
        "endLine": 281,
        "endChar": 81
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58378f98_5cdc185d",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1620,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-08-24T15:40:50Z",
      "side": 1,
      "message": "Might want to `.reserve()` before the loop?",
      "range": {
        "startLine": 1620,
        "startChar": 25,
        "endLine": 1620,
        "endChar": 34
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "419b492f_e544b950",
        "filename": "src/libANGLE/ProgramExecutable.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1620,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2023-08-24T16:55:28Z",
      "side": 1,
      "message": "This comes from ProgramPipeline (which none of app traces uses). We should reserve on the caller side. Lets deal with this in separate CL.",
      "parentUuid": "58378f98_5cdc185d",
      "range": {
        "startLine": 1620,
        "startChar": 25,
        "endLine": 1620,
        "endChar": 34
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a060ec3_5cd27997",
        "filename": "src/libANGLE/ProgramExecutable.h",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1531247
      },
      "writtenOn": "2023-08-24T15:40:50Z",
      "side": 1,
      "message": "cool assert!",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 13
      },
      "revId": "3524ba2d3a0e008e29ded38bdfa1048dbafe6ff8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}