{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b0c176aa_124b76a7",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-03-31T23:13:09Z",
      "side": 0,
      "message": "There\u0027s a race condition introduced by this removal. `glGetProgramBinary` is used with `nullptr` once to get the length, and again to get the binary. If the post-link task finishes in between, the application sees the binary length has changed.  Applications may not be able to handle that. Besides, a program binary that doesn\u0027t include the warmup is fairly useless.\n\nI understand if you want to remove this wait, and that\u0027s fair. Implementing anglebug.com/7393 would fix this race condition _and_ let you remove the wait.",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a2ed7e1_37f24ac5",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-01T12:09:39Z",
      "side": 0,
      "message": "im not sure i see it, looks like `Program::serialize(...)` is called irrespective of whether we are querying length or the blob itself. That eventually ends up in `ProgramExecutableVk::save` which does have the call to wait for post-link tasks, there should be no race. This gives the backends the option to choose whether they want to take the hit of a stall and save the vulkan pipeline or just skip saving it\n\n\u003e a program binary that doesn\u0027t include the warmup is fairly useless\n\nthis actually depends on many other factors, including but not limited to, the caching policy of Vulkan ICD",
      "parentUuid": "b0c176aa_124b76a7",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7810fdb_824bd1e6",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-01T12:39:19Z",
      "side": 0,
      "message": "just realized you might be talking about non-vulkan backends that have post-link tasks (maybe the WIP webgpu backend?)\n\nWe could expand `ProgramExecutableImpl::waitForPostLinkTasks(...)` to take in `gl::Command`? Then the front end can have these waits all over the place but the backend can be selective about which wait it will actually honor?",
      "parentUuid": "7a2ed7e1_37f24ac5",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaa2efa7_4b5a5a49",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-02T16:03:03Z",
      "side": 0,
      "message": "I was talking about Vulkan.\n\n\u003e That eventually ends up in ProgramExecutableVk::save which does have the call to wait for post-link tasks\n\nThanks, I see it now.\n\n\u003e This gives the backends the option to choose whether they want to take the hit of a stall and save the vulkan pipeline or just skip saving it\n\nNot sure how you\u0027d manage to skip that (without caching the binary). But ok giving the backend the option is fine. Until that race is prevented when the wait is skipped, could you please `ASSERT` after `save()` that no post-link tasks are running?",
      "parentUuid": "e7810fdb_824bd1e6",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a26519e_b49ace92",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-03T16:32:49Z",
      "side": 0,
      "message": "\u003e Not sure how you\u0027d manage to skip that (without caching the binary)\n\nwe disable implicit program binary caching\n\n\u003e Until that race is prevented when the wait is skipped, could you please ASSERT after save() that no post-link tasks are running?\n\ndepending on backend\u0027s choice, `ProgramExecutableVk::save` will do the right thing on the 1st call to serialize (ignore warmup pipelines or not) and will make the same choice on the 2nd call as well. Could you be specific about what the race condition would be?",
      "parentUuid": "eaa2efa7_4b5a5a49",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b21eefa_93da0d6d",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-04-03T17:40:30Z",
      "side": 0,
      "message": "\u003e we disable implicit program binary caching\n\nThis is not about the implicit cache, but GL program binary.\n\n\u003e Could you be specific about what the race condition would be?\n\nOf course. First, see the \"Ref\" comment. In `ProgramExecutableVk::save`, we serialize the contents of `mPipelineCache`. Depending on whether the warm up task is finished or not, the cache could either be empty or not.\n\nNow imagine the following scenario:\n\n- App calls `glGetProgramiv(program, GL_PROGRAM_BINARY_LENGTH_OES, \u0026programLength);`.  The warm up task is not finished, and the returned length in `programLength` is calculated based on an empty `mPipelineCache`.\n\n- The warm up task finishes, `mPipelineCache` now has something int\n\n- App calls `glGetProgramBinary(program, programLength, ...);`.  The call fails because the provided `programLength` is too small.",
      "parentUuid": "0a26519e_b49ace92",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9bf69cb_2d29cc1b",
        "filename": "src/libANGLE/Program.cpp",
        "patchSetId": 9
      },
      "lineNbr": 2200,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2024-04-03T20:34:01Z",
      "side": 0,
      "message": "Done",
      "parentUuid": "1b21eefa_93da0d6d",
      "revId": "c6a6d3f9fa699eeae0e808f8259ea1ca93c78809",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}