{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aea2be8b_dfbf9d24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-23T08:28:30Z",
      "side": 1,
      "message": "https://pinpoint-dot-chromeperf.appspot.com/job/13a4093e760000 shows that this CL fixes the motionmark regression. PTAL. thanks.",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ad833ef_fb6e0614",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T18:39:23Z",
      "side": 1,
      "message": "lgtm - thanks for following up on this! One question.",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e361200_2c9c6b55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2023-10-23T22:12:38Z",
      "side": 1,
      "message": "LGTM",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95606c47_da693c0c",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-23T20:25:39Z",
      "side": 1,
      "message": "[1]",
      "range": {
        "startLine": 85,
        "startChar": 73,
        "endLine": 85,
        "endChar": 81
      },
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d685a95_a8bf9312",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T22:33:02Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "95606c47_da693c0c",
      "range": {
        "startLine": 85,
        "startChar": 73,
        "endLine": 85,
        "endChar": 81
      },
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bcc51b51_7b565a26",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T18:39:23Z",
      "side": 1,
      "message": "Does allocating mImplicitMSTexture have any side-effect to short-cut glBlitFramebuffer from this renderbuffer? I\u0027m guessing that glBlitFramebuffer would then copy from the implicitly resolved multisampled texture to the user\u0027s texture? I skimmed some of the code but didn\u0027t understand how this might be done.",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "230c6d23_c7471fef",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-23T19:13:17Z",
      "side": 1,
      "message": "Yes if we are using an implicit MS texture, glBlitFramebuffer will copy from the resolved texture to the target texture.\n\nglBlitFramebuffer actually uses `RenderTargetMtl`\u0027s `mTexture` as the source texture of the copy operation [1]. And `RenderTargetMtl`\u0027s `mTexture` is:\n- Single sampled texture/resolved texture if we use implicit MSAA. The muli-sampled texture in this case is `mImplicitMSTexture`.\n- Muli-sampled texture if we don\u0027t use implicit MSAA. In this case the MS texture is stored as `mTexture` member directly. And the blit shader will need to manually resolve it and save to the target texture.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/metal/FrameBufferMtl.mm;drc\u003dabbfc06e9b070c9ea64af2b233624646cef00252;l\u003d530",
      "parentUuid": "bcc51b51_7b565a26",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b24b377_4ca33184",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T19:43:38Z",
      "side": 1,
      "message": "Thanks - would you mind pointing me to the call chain that sets up `RenderTargetMtl` in this way? From what I see, the call on line 111 below which calls `setWithImplicitMSTexture` sets up both the `mTexture` and `mImplicitMSTexture` members of `RenderTargetMtl` to different texture objects, and I don\u0027t see how the blit code uses the implicit one instead of the other. Thanks.",
      "parentUuid": "230c6d23_c7471fef",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c8cbff5_34e870c5",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-23T20:25:39Z",
      "side": 1,
      "message": "Sorry for the confusion. There are two cases of the `RenderBufferMtl`\u0027s members when we allocate an MS render buffer:\n1. If `alwaysResolveMultisampleRenderBuffers` feature is enabled:\n  - `mTexture` is set to the single sampled texture [1]. Even though this texture is allocated hidden from users, it is not denoted as \"implicit\" in `RenderTargetMtl`\u0027s pov.\n  - `mImplicitMSTexture` is set the multi-sampled texture. This is called \"implicit\" because when we use the `RenderBufferMtl` in a render pass, the `mImplicitMSTexture` is automatically resolved into the `mTexture` as a `StoreAction`.\n2. If alwaysResolveMultisampleRenderBuffers is disabled:\n  - `mTexture` is set to multi-sampled texture. [2].\n\nThe blitFramebuffer\u0027s code flow:\n1. queries RenderTargetMtl\u0027s `mTexture` and uses it as source texture. [3].\n2. calls `RenderUtils::blitColorWithDraw`.\n3. gets the appropriate utility pipeline based on the source texture type [4].\n4. runs the selected pipeline to copy `mTexture` to the target texture:\n  - 1st case: `mTexture` is the hidden single-sampled texture.\n    - Because this texture is automatically resolved into when we end the render pass. The copy to another single sampled texture still contains the resolved texels correctly from users\u0027 pov.\n  - 2nd case: `mTexture` is the multi-sampled texture.\n    - In this case, the multi-sampled texture is resolved inside fragment shader and the result is written to the target texture. The target texture still contains resolved texels as expected.\n\nHope this helps.\n\n[3] https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/metal/FrameBufferMtl.mm;drc\u003dabbfc06e9b070c9ea64af2b233624646cef00252;l\u003d530\n[4] https://source.chromium.org/chromium/chromium/src/+/main:third_party/angle/src/libANGLE/renderer/metal/mtl_render_utils.mm;drc\u003dabbfc06e9b070c9ea64af2b233624646cef00252;l\u003d1358",
      "parentUuid": "0b24b377_4ca33184",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3d52498_16caff0a",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T22:33:02Z",
      "side": 1,
      "message": "Thanks very much for explaining this to me. I think I understand the flow now.\n\nIf you have time at some point, would you consider adding a small Markdown file in src/libANGLE/renderer/metal/doc/ describing these details of how multisampling works in the Metal backend? Thanks in advance.",
      "parentUuid": "7c8cbff5_34e870c5",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3193e351_c19860a7",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-24T05:09:55Z",
      "side": 1,
      "message": "Ok sure.",
      "parentUuid": "f3d52498_16caff0a",
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dea38d66_e6c0e901",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1543187
      },
      "writtenOn": "2023-10-23T20:25:39Z",
      "side": 1,
      "message": "[2]",
      "range": {
        "startLine": 108,
        "startChar": 73,
        "endLine": 108,
        "endChar": 81
      },
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0226e0d2_63e0426b",
        "filename": "src/libANGLE/renderer/metal/RenderBufferMtl.mm",
        "patchSetId": 4
      },
      "lineNbr": 108,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2023-10-23T22:33:02Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "dea38d66_e6c0e901",
      "range": {
        "startLine": 108,
        "startChar": 73,
        "endLine": 108,
        "endChar": 81
      },
      "revId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Owners",
        "description": {
          "value": "User with the code owner override approved the change"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:enabled_code-owners"
          }
        },
        "submittabilityExpression": {
          "expressionString": "has:approval_code-owners"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Owners-Override\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:enabled_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:enabled_code-owners"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:approval_code-owners"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:approval_code-owners"],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Owners-Override=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Owners-Override=+1"]}
      },
      "patchSetCommitId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:false"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:true"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:false"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:true"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "cdaa1af5c7715a74b559773e2a31c75f031d647e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}