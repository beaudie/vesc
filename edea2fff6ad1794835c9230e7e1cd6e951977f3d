{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "864e13db_4216e1f0",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6919,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T18:43:18Z",
      "side": 1,
      "message": "Better to just use an old-fashioned loop since you need the index? Or is `deque::operator[]` not as fast as it needs to be?\n\n```suggestion\n    size_t emptySlot \u003d kInvalidSlot;\n    for (size_t slot \u003d 0; slot \u003c mSharedCacheKeys.size(); ++slot)\n    {\n        SharedCacheKeyT \u0026sharedCacheKey \u003d mSharedCacheKeys[slot];\n        if (*sharedCacheKey.get() \u003d\u003d nullptr)\n        {\n            mEmptySlotBits[slot / kSlotBitCount].set(slot % kSlotBitCount);\n            emptySlot \u003d slot;\n        }\n    }\n```",
      "range": {
        "startLine": 6910,
        "startChar": 0,
        "endLine": 6919,
        "endChar": 5
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4e43518_38fbb76d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6919,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T18:59:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "864e13db_4216e1f0",
      "range": {
        "startLine": 6910,
        "startChar": 0,
        "endLine": 6919,
        "endChar": 5
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1685fe05_da923ab3",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6942,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T18:43:18Z",
      "side": 1,
      "message": "Could the code that releases an entry reset the right bit so we don\u0027t have to refresh this?",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bc7795ef_d4032c3d",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6942,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T18:59:35Z",
      "side": 1,
      "message": "No. For example, the cache contains two textures. When one texture is deleted, the cache entry will be destroyed. But we do not know what is the other texture that also uses the same cache, since there is no back pointer to all objects that participated in this cache. That is why we have to rely on refresh here.",
      "parentUuid": "1685fe05_da923ab3",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5103abd2_1ef8f09f",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6942,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T19:19:30Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "bc7795ef_d4032c3d",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc13467f_d20cb6e2",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-04T18:53:56Z",
      "side": 1,
      "message": "Why do we need to check it is not empty() here?",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6691f5ac_9c628cf4",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T18:58:45Z",
      "side": 1,
      "message": "Looks like it should have been if it _is_ empty!",
      "parentUuid": "cc13467f_d20cb6e2",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75928318_1d82c7e2",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T18:59:35Z",
      "side": 1,
      "message": "Because majority of usage uses less than 64 entries, so one uint64_t is enough. But if it goes beyond that, I immediately jump to eight uint64_t to avoid storage reallocation.",
      "parentUuid": "cc13467f_d20cb6e2",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21e2c013_b6e6dfe0",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T19:06:01Z",
      "side": 1,
      "message": "No, this is intended this way. Basically first time, it will just let c++ runtime allocate storage, which is one uint64_t. Like I pointed out above, that satisfy the majority usage case. But if this is not enough, if we let c++ run time to handle, it will try to allocate 2 uint64_t, and next time 4, and then 8,... This logic basically overrides that by immediately jump to 8 so that we will almost never needs to reallocate.",
      "parentUuid": "75928318_1d82c7e2",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cd8d434_e9b8d890",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T19:19:30Z",
      "side": 1,
      "message": "Ah, maybe making that explicit is better, like this?\n\n```suggestion\n    // On first insertion, let `deque` allocate a single entry for minimal memory overhead\n    // If that ever exceeds, reserve a larger chunk for efficiency.\n    if (mEmptySlotBits.size() \u003d\u003d 1)\n```",
      "parentUuid": "21e2c013_b6e6dfe0",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f7f14c6_dea70d85",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T19:36:40Z",
      "side": 1,
      "message": "Add more comment here. I don\u0027t think you need another if check. Comment should be enough to serve the purpose.",
      "parentUuid": "7cd8d434_e9b8d890",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c3fc258_b3297589",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-04T19:39:34Z",
      "side": 1,
      "message": "We reserve 8 more elements, but we only emplace_back 1 element at line 6962. Next time when all first 128 empty slots are used, we end up reserve 8 more, but my understanding is we have capacity to hold 7 more elements in mEmptySlotBits. Maybe we should check mEmptySlotBits size reaches capacity before calling reserve?\n\n```\nif (!mEmptySlotBits.empty() \u0026\u0026 mEmptySlotBits.size() \u003d\u003d mEmptySlotBits.capacity()) {\n  mEmptySlotBits.reserve(8);\n}\n```",
      "parentUuid": "21e2c013_b6e6dfe0",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b5b6227_6b6c8836",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T19:46:08Z",
      "side": 1,
      "message": "Not 8 more, but total 8. if capacity is already \u003e\u003d8, reserve does nothing. It already has the if check that you want in the reserve call. See https://en.cppreference.com/w/cpp/container/vector/reserve",
      "parentUuid": "1c3fc258_b3297589",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d678299_42f93135",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6956,
      "author": {
        "id": 1520902
      },
      "writtenOn": "2024-10-04T19:56:14Z",
      "side": 1,
      "message": "I see, thank you üëç",
      "parentUuid": "1b5b6227_6b6c8836",
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3e6fffa_4da2cdd6",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6962,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T18:43:18Z",
      "side": 1,
      "message": "Just to be a bit more explicit about what bits are set:\n\n```suggestion\n    mEmptySlotBits.emplace_back(0xFFFF\u0027FFFE);\n```",
      "range": {
        "startLine": 6962,
        "startChar": 32,
        "endLine": 6962,
        "endChar": 34
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8a25e83_e652e400",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.cpp",
        "patchSetId": 3
      },
      "lineNbr": 6962,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T18:59:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3e6fffa_4da2cdd6",
      "range": {
        "startLine": 6962,
        "startChar": 32,
        "endLine": 6962,
        "endChar": 34
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29d98fdd_5fc5742b",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 2150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T18:43:18Z",
      "side": 1,
      "message": "nit: You should be able to use `angle::BitSet` and let it choose the storage automatically from the bit count\n\n```suggestion\n    using SlotBitMask                     \u003d angle::BitSet\u003ckSlotBitCount\u003e;\n```",
      "range": {
        "startLine": 2150,
        "startChar": 44,
        "endLine": 2150,
        "endChar": 59
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72ec0bcf_6345e441",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 2150,
      "author": {
        "id": 1392020
      },
      "writtenOn": "2024-10-04T18:59:35Z",
      "side": 1,
      "message": "explicit is better though. The logic in angle::BitSet seems quite complicated, I am not sure if it will end up picking BitSetArray though.",
      "parentUuid": "29d98fdd_5fc5742b",
      "range": {
        "startLine": 2150,
        "startChar": 44,
        "endLine": 2150,
        "endChar": 59
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0938bf97_ed499883",
        "filename": "src/libANGLE/renderer/vulkan/vk_cache_utils.h",
        "patchSetId": 3
      },
      "lineNbr": 2150,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2024-10-04T19:16:15Z",
      "side": 1,
      "message": "It would on 32-bit systems, which is a good thing. Otherwise you\u0027re using `first()` on a 64-bit type on 32-bit archs (I\u0027m surprised this even compiled)",
      "parentUuid": "72ec0bcf_6345e441",
      "range": {
        "startLine": 2150,
        "startChar": 44,
        "endLine": 2150,
        "endChar": 59
      },
      "revId": "edea2fff6ad1794835c9230e7e1cd6e951977f3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}