# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# import the use_x11 variable
import("//build/config/ui.gni")

angle_git_is_present = exec_script("src/commit_id.py",
                                   [
                                     "check",
                                     rebase_path(".", root_build_dir),
                                   ],
                                   "value")

angle_use_commit_id = angle_git_is_present == 1

gles_gypi = exec_script(
  "//build/gypi_to_gn.py",
  [ rebase_path("src/libGLESv2.gypi") ],
  "scope",
  [ "src/libGLESv2.gypi" ])

compiler_gypi = exec_script(
  "//build/gypi_to_gn.py",
  [ rebase_path("src/compiler.gypi") ],
  "scope",
  [ "src/compiler.gypi" ])

# This config is exported to dependent targets (and also applied to internal
# ones).
config("external_config") {
  include_dirs = [
    "include",
  ]
}

# This config is applied to internal Angle targets (not pushed to dependents).
config("internal_config") {
  include_dirs = [
    "include",
    "src",
  ]
}

angle_enable_d3d9 = false
angle_enable_d3d11 = false
angle_enable_gl = false

if (is_win) {
  angle_enable_d3d9 = true
  angle_enable_d3d11 = true
  angle_enable_gl = true

  import("//build/config/win/visual_studio_version.gni")
  copy("copy_compiler_dll") {
    sources = [ "$windows_sdk_path/Redist/D3D/$target_cpu/d3dcompiler_47.dll" ]
    outputs = [ "$root_build_dir/d3dcompiler_47.dll" ]
  }
} # is_win

if (is_linux) {
  angle_enable_gl = true
}

angle_enable_hlsl = false

if (angle_enable_d3d9 || angle_enable_d3d11) {
  angle_enable_hlsl = true
}

component("translator") {
  sources = [
    "src/compiler/translator/ShaderLang.cpp",
    "src/compiler/translator/ShaderVars.cpp",
  ]

  defines = [ "ANGLE_TRANSLATOR_IMPLEMENTATION" ]

  if (angle_enable_hlsl) {
    sources += rebase_path(compiler_gypi.angle_translator_lib_hlsl_sources, ".", "src")
    defines += [ "ANGLE_ENABLE_HLSL" ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]

  public_deps = [
    ":translator_lib",
  ]
}

# Holds the shared includes so we only need to list them once.
source_set("includes") {
  sources = [
    "include/EGL/egl.h",
    "include/EGL/eglext.h",
    "include/EGL/eglplatform.h",
    "include/GLES2/gl2.h",
    "include/GLES2/gl2ext.h",
    "include/GLES2/gl2platform.h",
    "include/GLES3/gl3.h",
    "include/GLES3/gl3ext.h",
    "include/GLES3/gl3platform.h",
    "include/GLSLANG/ShaderLang.h",
    "include/KHR/khrplatform.h",
  ]
}

static_library("preprocessor") {
  sources = rebase_path(compiler_gypi.angle_preprocessor_sources, ".", "src")

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]
}

config("translator_static_config") {
  defines = [ "ANGLE_TRANSLATOR_STATIC" ]
}

config("debug_annotations_config") {
  if (is_debug) {
    defines = [
      "ANGLE_ENABLE_DEBUG_ANNOTATIONS",
    ]
  }
}

static_library("angle_common") {
  sources = rebase_path(gles_gypi.libangle_common_sources, ".", "src")

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    ":debug_annotations_config",
    "//build/config/compiler:no_chromium_code",
  ]
}

static_library("translator_lib") {
  sources = rebase_path(compiler_gypi.angle_translator_lib_sources, ".", "src")

  if (angle_enable_hlsl) {
    sources += rebase_path(compiler_gypi.angle_translator_lib_hlsl_sources, ".", "src")
    defines = [ "ANGLE_ENABLE_HLSL" ]
  }
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    ":translator_static_config",
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [ ":external_config" ]

  deps = [
    ":includes",
    ":preprocessor",
  ]

  public_deps = [
    ":angle_common",
  ]
}

static_library("translator_static") {
  sources = [
    "src/compiler/translator/ShaderLang.cpp",
    "src/compiler/translator/ShaderVars.cpp",
  ]

  if (angle_enable_hlsl) {
    defines = [ "ANGLE_ENABLE_HLSL" ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [ ":translator_static_config" ]

  public_deps = [
    ":translator_lib",
  ]
}

config("commit_id_config") {
  include_dirs = [ "$root_gen_dir/angle" ]
}

commit_id_output_file = "$root_gen_dir/angle/id/commit.h"
if (angle_use_commit_id) {
  action("commit_id") {
    script = "src/commit_id.py"
    outputs = [
      commit_id_output_file,
    ]

    args = [
      "gen",
      rebase_path(".", root_build_dir),
      rebase_path(commit_id_output_file, root_build_dir),
    ]

    public_configs = [ ":commit_id_config" ]
  }
} else {
  copy("commit_id") {
    sources = [
      "src/commit.h",
    ]
    outputs = [
      commit_id_output_file,
    ]
    public_configs = [ ":commit_id_config" ]
  }
}

config("libANGLE_config") {
  cflags = []
  defines = []
  if (angle_enable_d3d9) {
    defines += [ "ANGLE_ENABLE_D3D9" ]
  }
  if (angle_enable_d3d11) {
    defines += [ "ANGLE_ENABLE_D3D11" ]
  }
  if (angle_enable_gl) {
    defines += [ "ANGLE_ENABLE_OPENGL" ]
  }
  if (use_x11) {
    defines += [ "ANGLE_USE_X11" ]
  }
  defines += [
    "GL_APICALL=",
    "GL_GLEXT_PROTOTYPES=",
    "EGLAPI=",
  ]
  if (is_win) {
    cflags += [ "/wd4530" ]  # C++ exception handler used, but unwind semantics are not enabled.
  }
}

static_library("libANGLE") {
  sources = rebase_path(gles_gypi.libangle_sources, ".", "src")

  include_dirs = []
  libs = []
  defines = [
    "LIBANGLE_IMPLEMENTATION",
  ]

  # Shared D3D sources.
  if (angle_enable_d3d9 || angle_enable_d3d11) {
    sources += rebase_path(gles_gypi.libangle_d3d_shared_sources, ".", "src")

    defines += [
      "ANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ " +
        "\"d3dcompiler_47.dll\", \"d3dcompiler_46.dll\", \"d3dcompiler_43.dll\" }",
    ]
  }

  if (angle_enable_d3d9) {
    sources += rebase_path(gles_gypi.libangle_d3d9_sources, ".", "src")
    libs += [ "d3d9.lib" ]
  }

  if (angle_enable_d3d11) {
    sources += rebase_path(gles_gypi.libangle_d3d11_sources, ".", "src")
    sources += rebase_path(gles_gypi.libangle_d3d11_win32_sources, ".", "src")
    libs += [ "dxguid.lib" ]
  }

  if (angle_enable_gl) {
    sources += rebase_path(gles_gypi.libangle_gl_sources, ".", "src")
    include_dirs += [ "src/third_party/khronos" ]

    if (is_win) {
      sources += rebase_path(gles_gypi.libangle_gl_wgl_sources, ".", "src")
    }
    if (use_x11) {
      sources += rebase_path(gles_gypi.libangle_gl_glx_sources, ".", "src")
      libs += [ "X11" ]
    }
  }

  if (is_debug) {
    defines += [
      "ANGLE_GENERATE_SHADER_DEBUG_INFO",
    ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":commit_id_config",
    ":debug_annotations_config",
    ":libANGLE_config",
    ":internal_config",
    "//build/config/compiler:no_chromium_code",
  ]

  deps = [
    ":commit_id",
    ":includes",
    ":translator_static",
    ":angle_common",
  ]

  if (is_win) {
    deps += [ ":copy_compiler_dll" ]
  }
}

shared_library("libGLESv2") {
  sources = rebase_path(gles_gypi.libglesv2_sources, ".", "src")

  if (is_win) {
    ldflags = [ "/DEF:" +
                rebase_path("src/libGLESv2/libGLESv2.def", root_build_dir) ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    ":commit_id_config",
    ":debug_annotations_config",
    ":libANGLE_config",
    "//build/config/compiler:no_chromium_code",
  ]

  defines = [
    "LIBGLESV2_IMPLEMENTATION",
  ]

  deps = [
    ":includes",
    ":libANGLE",
  ]
}

shared_library("libEGL") {
  sources = rebase_path(gles_gypi.libegl_sources, ".", "src")

  if (is_win) {
    ldflags = [ "/DEF:" +
                rebase_path("src/libEGL/libEGL.def", root_build_dir) ]
  }

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    ":internal_config",
    ":commit_id_config",
    ":libANGLE_config",
    "//build/config/compiler:no_chromium_code",
  ]

  defines = [
    "LIBEGL_IMPLEMENTATION",
  ]

  deps = [
    ":includes",
    ":libGLESv2",
  ]
}

source_set("end_to_end_tests") {
  testonly = true

  sources = [
    # TODO(GYP): Actually include the tests.
    #"//third_party/angle/src/tests/gl_tests/BlendMinMaxTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/BlitFramebufferANGLETest.cpp",
    #"//third_party/angle/src/tests/gl_tests/BufferDataTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/ClearTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/CompressedTextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/CubeMapTextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/DebugMarkerTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/DepthStencilFormatsTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/DiscardFramebufferEXTTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/DrawBuffersTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/DrawElementsTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/FenceSyncTests.cpp",
    #"//third_party/angle/src/tests/gl_tests/FramebufferFormatsTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/FramebufferRenderMipmapTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/GLSLTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/ImageTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/IncompleteTextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/IndexBufferOffsetTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/IndexedPointsTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/InstancingTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/LineLoopTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/MaxTextureSizeTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/MipmapTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/media/pixel.inl",
    #"//third_party/angle/src/tests/gl_tests/PackUnpackTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/PbufferTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/PBOExtensionTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/PointSpritesTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/OcclusionQueriesTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/ProgramBinaryTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/ReadPixelsTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/RendererTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/SimpleOperationTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/SixteenBppTextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/SRGBTextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/SwizzleTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/TextureTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/TransformFeedbackTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/UniformBufferTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/UniformTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/UnpackAlignmentTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/UnpackRowLength.cpp",
    #"//third_party/angle/src/tests/gl_tests/VertexAttributeTest.cpp",
    #"//third_party/angle/src/tests/gl_tests/ViewportTest.cpp",
    #"//third_party/angle/src/tests/egl_tests/EGLContextCompatibilityTest.cpp",
    #"//third_party/angle/src/tests/egl_tests/EGLQueryContextTest.cpp",
    #"//third_party/angle/src/tests/egl_tests/EGLSurfaceTest.cpp",
    "src/tests/test_utils/ANGLETest.cpp",
    "src/tests/test_utils/ANGLETest.h",
    "src/tests/test_utils/angle_test_configs.cpp",
    "src/tests/test_utils/angle_test_configs.h",
    "src/tests/test_utils/angle_test_instantiate.cpp",
    "src/tests/test_utils/angle_test_instantiate.h",
  ]

  public_configs = [
    ":internal_config",
    ":util_config",
  ]

  configs += [
    ":internal_config",
  ]

  include_dirs = [
    "src/tests",
  ]

  if (is_win) {
    sources += [
      "src/tests/gl_tests/D3DImageFormatConversionTest.cpp",
      "src/tests/gl_tests/D3D11EmulatedIndexedBufferTest.cpp",
      "src/tests/gl_tests/D3D11FormatTablesTest.cpp",
      "src/tests/gl_tests/D3D11InputLayoutCacheTest.cpp",
      "src/tests/gl_tests/QueryDisplayAttribTest.cpp",
      # TODO(cwallez) for Linux, requires a portable implementation of threads
      "src/tests/egl_tests/EGLThreadTest.cpp",
    ]
  }

  deps = [
    ":util",
    ":libANGLE",
    ":libEGL",
    ":libGLESv2",
    "//base",
    "//base/test:test_support",
    "//testing/gmock",
  ]
}


config("util_config") {
  include_dirs = [
    "util"
  ]
}

source_set("util") {
  sources = [
    "util/com_utils.h",
    "util/keyboard.h",
    "util/mouse.h",
    "util/random_utils.cpp",
    "util/random_utils.h",
    "util/shader_utils.cpp",
    "util/shader_utils.h",
    "util/system_utils.h",
    "util/Event.h",
    "util/EGLWindow.cpp",
    "util/EGLWindow.h",
    "util/OSPixmap.h",
    "util/OSWindow.cpp",
    "util/OSWindow.h",
    "util/Timer.h",
  ]

  public_deps = [
    ":angle_common",
  ]

  public_configs = [
    ":util_config",
  ]

  configs += [
    ":internal_config"
  ]

  deps = [
    ":angle_common",
    ":libEGL",
    ":libGLESv2",
  ]

  if (is_linux) {
    sources += [
      "util/linux/Linux_system_utils.cpp",
      "util/linux/LinuxTimer.cpp",
      "util/linux/LinuxTimer.h",
      "util/posix/Posix_system_utils.cpp",
    ]
  }
  if (use_x11) {
    sources += [
      "util/x11/X11Pixmap.cpp",
      "util/x11/X11Pixmap.h",
      "util/x11/X11Window.cpp",
      "util/x11/X11Window.h",
    ]
  }
}

