{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "85c00133_1ed19923",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-30T18:39:44Z",
      "side": 1,
      "message": "This seems like an ANGLE or driver implementation error. Without a reproduction case it\u0027s unclear how this happens or who is responsible for the allocation failure.",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b257c25a_ed3b6202",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-06-30T18:50:23Z",
      "side": 1,
      "message": "It is the variability between ICDs on how many descriptors are needed for an immutable sampler that results in such errors.\n\n\u003e who is responsible for the allocation failure\n\nVulkan spec allows for failures, ANGLE needs to be updated to handle this error code. Repro case would need specific configs in bots that have certain descriptor count requirements for immutable samplers.\n\nThis is not invalid code according to Vulkan spec, so what am i missing?",
      "parentUuid": "85c00133_1ed19923",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "407d4356_14847ab2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-30T18:57:02Z",
      "side": 1,
      "message": "\u003e If the allocation fails due to no more space in the descriptor pool, and not because of system or device memory exhaustion, then VK_ERROR_OUT_OF_POOL_MEMORY must be returned.\n\nThis reads to me as an ANGLE internal error where we try to allocate too many descriptor sets from a pool. We shouldn\u0027t code ANGLE to be robust to internal errors, if this is the case. We should track down and fix the ANGLE code that\u0027s allocating too many - we\u0027re supposed to be doing bookkeeping to know how many sets are in a pool. It\u0027s possible YUV descriptor set accounting is borked.",
      "parentUuid": "b257c25a_ed3b6202",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c85d4c53_0accb7a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-06-30T20:02:39Z",
      "side": 1,
      "message": "\u003e where we try to allocate too many descriptor sets from a pool\n\nthat is not whats happening. We are undercounting descriptor counts not descriptor sets. ANGLE does descriptor set book keeping not descriptor count. The issue is we could run out of descriptor counts before running out of descriptor sets when immutable samplers are involved",
      "parentUuid": "407d4356_14847ab2",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7892e73b_dd159b57",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-06-30T20:04:55Z",
      "side": 1,
      "message": "Apologies, this is a complex part of the spec so my understanding might not be precise. As far as I know ANGLE can book-keep everything, so we should be able to prevent this error. If there\u0027s something totally unpredictable about descriptor set allocation that\u0027s not something I\u0027m familiar with.",
      "parentUuid": "c85d4c53_0accb7a8",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c20637e_3e53d197",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-06-30T20:09:34Z",
      "side": 1,
      "message": "\u003e this is a complex part of the spec\n\ncomplex and also the part where they messed up a bit\n\n\u003e ANGLE can book-keep everything\napparently vulkan 1.0 left descriptor count book keeping to apps but in 1.1 they moved that responsibility over to ICD and gave a introduced a new error code for cases where pool runs out of descriptors. (h/t internal vulkan team for this info)\n\nDescriptor sets are just incidental to this conversation.",
      "parentUuid": "7892e73b_dd159b57",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6887febf_c72ea45f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1297197
      },
      "writtenOn": "2021-06-30T23:13:16Z",
      "side": 1,
      "message": "I agree with Jamie that this is covering up another issue.\n\nANGLE keeps track of how many descriptors it creates the pool with and then how many have been allocated from it throughout the descriptor pool\u0027s lifetime.   This means the DescriptorPoolHelper::hasCapacity() should always be accurate and we should never get back VK_ERROR_OUT_OF_POOL_MEMORY if we attempt to allocate descriptor sets from a pool we believe has enough free descriptor sets.\n\nIf we are getting back VK_ERROR_OUT_OF_POOL_MEMORY, then DescriptorPoolHelper::mFreeDescriptorSets is not being updated correctly.   The likeliest cause for this is that the descriptor set layout doesn\u0027t match what the pool was allocated with, so more descriptors are being allocated than the DescriptorPoolHelper thinks.   However, there is an assert in DynamicDescriptorPool::allocateSetsAndGetInfo to catch this: \n\n    ASSERT(*descriptorSetLayout \u003d\u003d mCachedDescriptorSetLayout)\n\nSo maybe that\u0027s not it (assuming you have asserts enabled).\n\nRegardless, reallocating the pool doesn\u0027t fix the issue, since we\u0027ll just keep getting back VK_ERROR_OUT_OF_POOL_MEMORY every time the pool is exhausted, wasting cycles by issuing multiple vkAllocateDescriptorSets(), rather than a single one we know will succeed.   Instead, the root cause for why DescriptorPoolHelper::hasCapacity() is inaccurate should be debugged.",
      "parentUuid": "3c20637e_3e53d197",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f90afbcd_e4082bbd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-06-30T23:17:03Z",
      "side": 1,
      "message": "\u003e Instead, the root cause for why DescriptorPoolHelper::hasCapacity() is inaccurate should be debugged.\n\nas i mentioned earlier, ANGLE tracks descriptor **set** count, not the descriptor count. These are 2 very different things when it comes to immutable samplers\n\n\u003e since we\u0027ll just keep getting back VK_ERROR_OUT_OF_POOL_MEMORY every time the pool is exhausted\n\nnot sure i understand this, \"VK_ERROR_OUT_OF_POOL_MEMORY\" just says the current pool cannot allocate the set being requested. It says nothing about a new pool. Can you elaborate a bit more?",
      "parentUuid": "6887febf_c72ea45f",
      "revId": "7d1912da521ed989e6b56a5a1500e00b7cf993f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}