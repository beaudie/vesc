{
  "comments": [
    {
      "key": {
        "uuid": "6a80cc6f_21f0f4ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "nit: you can add the bug tag for the DrawElements optimization again\n\nBug: angleproject:2966",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 3
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a34710_4cdb8368",
        "filename": "src/common/PackedEnums.h",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "clever! (BTW you can wrap your comments to 100 chars. git cl format will auto-wrap)",
      "range": {
        "startLine": 286,
        "startChar": 0,
        "endLine": 289,
        "endChar": 26
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef1238e3_fbf0bd6e",
        "filename": "src/common/PackedEnums.h",
        "patchSetId": 1
      },
      "lineNbr": 298,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "you can remove this - it\u0027s on a function closing brace.",
      "range": {
        "startLine": 298,
        "startChar": 3,
        "endLine": 298,
        "endChar": 18
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3600f04b_52892ed1",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 1
      },
      "lineNbr": 145,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "can you change this to\n\nif (mCachedBasicDrawStatesError !\u003d kInvalidPointer)\n{\n   return true;\n}\n\nreturn getBasicDrawStatesErrorImpl(context) !\u003d 0;",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 145,
        "endChar": 9
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bcabb41_660e6e57",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "nit: you can remove this. it\u0027s actually a class closing brace.",
      "range": {
        "startLine": 252,
        "startChar": 4,
        "endLine": 252,
        "endChar": 19
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2aaec0e_ce3cfe7b",
        "filename": "src/libANGLE/Context.h",
        "patchSetId": 1
      },
      "lineNbr": 1710,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "you can probably omit this for now. I\u0027ll handle fixing the indirection in a follow-up.",
      "range": {
        "startLine": 1710,
        "startChar": 0,
        "endLine": 1710,
        "endChar": 82
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4299024d_843a5018",
        "filename": "src/libANGLE/formatutils.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "this seems identical to the function below. is it necessary?",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f3f2a2_28212277",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3012,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2018-12-30T14:46:30Z",
      "side": 1,
      "message": "This is a big hotspot due to a double indirection context-\u003eextension-\u003ewebglCompatibility. getExtensions() returns a reference to an extensions struct. It\u0027d be great if we have the Extension struct as copy inside the context instead of having a reference. A first quick try replacing the reference by an instance failed and I haven\u0027t investigated why.\n\nAlso, there are \u003e64 extension booleans which results in \u003e64 bytes of storage which is more than one cache line. If we\u0027d use a bitfield instead all booleans would fit into a single cache line.\n\nUsing booleans requires some more changes since there\u0027s a class passing pointers to the boolean member variables to a map. The code would have to be rewritten to an bit-index instead.",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e07fdc3a_51185b0d",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3012,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "OK, let me try handling this. Merging gl::ContextState and g::State was something we planned but never had a motivation to do.\n\nWe could use a bitset to handle the extensions array if you think that would improve things too. That can be done as a separate change. Agree with what you propose about the bit index. Would you like me to look at that too?",
      "parentUuid": "24f3f2a2_28212277",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f56990_e33beec3",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3074,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2018-12-30T14:46:30Z",
      "side": 1,
      "message": "This should do the same overflow check, but can reuse the addition used to compute elementDataSizeWithOffset. If there\u0027s an 64-bit overflow elementDataSizeWithOffset will be smaller than the previous value elementDataSizeNoOffset.",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec29a8d_f0e0dd2c",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3074,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "11f56990_e33beec3",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01fd8c14_57e86a16",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3090,
      "author": {
        "id": 1309155
      },
      "writtenOn": "2018-12-30T14:46:30Z",
      "side": 1,
      "message": "IndexRange initializes all member variables to zero by default. This is not necessary in this case because vao-\u003egetIndexRange will for sure set the values.",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44c1f295_80552812",
        "filename": "src/libANGLE/validationES.cpp",
        "patchSetId": 1
      },
      "lineNbr": 3090,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-12-30T19:22:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "01fd8c14_57e86a16",
      "revId": "8b3651860ff2117324916acd42b6dff37fc692a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}