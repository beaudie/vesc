{
  "comments": [
    {
      "key": {
        "uuid": "47862cf2_e1acb7c3",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 20
      },
      "lineNbr": 795,
      "author": {
        "id": 1172235
      },
      "writtenOn": "2018-10-26T01:53:30Z",
      "side": 1,
      "message": "Does this break if the application tries to use a uniform called angle_DrawID? (Or is the mappedName enough to prevent that?) Either way, tests would be good if you don\u0027t have any for this. (Maybe one using angle_DrawID as a uniform name with the extension enabled, and one without?)",
      "revId": "423919fac28b0f2e92b357926eabf37f84825335",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9d64ff9_f41795fb",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 20
      },
      "lineNbr": 795,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2018-10-26T11:43:32Z",
      "side": 1,
      "message": "If the variable is \"AngleInternal\" it should use a different namespace than the user\u0027s variables. Due to the decoration.",
      "parentUuid": "47862cf2_e1acb7c3",
      "revId": "423919fac28b0f2e92b357926eabf37f84825335",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f62a203_69e488bf",
        "filename": "src/compiler/translator/Compiler.cpp",
        "patchSetId": 20
      },
      "lineNbr": 795,
      "author": {
        "id": 1306173
      },
      "writtenOn": "2018-10-26T16:55:45Z",
      "side": 1,
      "message": "Yes, any user-defined \"angle_DrawID\" should be decorated and have a different mappedName.\nI added a test to check this.",
      "parentUuid": "c9d64ff9_f41795fb",
      "revId": "423919fac28b0f2e92b357926eabf37f84825335",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56579aa0_8fd31119",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 20
      },
      "lineNbr": 142,
      "author": {
        "id": 1172235
      },
      "writtenOn": "2018-10-26T01:53:30Z",
      "side": 1,
      "message": "Looking at the diff from base to here, is this change necessary? If not, may as well change it back to how it was.",
      "revId": "423919fac28b0f2e92b357926eabf37f84825335",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5a103cc_ce627d43",
        "filename": "src/compiler/translator/TranslatorVulkan.cpp",
        "patchSetId": 20
      },
      "lineNbr": 142,
      "author": {
        "id": 1306173
      },
      "writtenOn": "2018-10-26T16:55:45Z",
      "side": 1,
      "message": "This change is indeed necessary. This code here is creating the uniform blocks at the top of the Vulkan shader.\nTranslatorVulkan uses OutputGLSLBase::visitSymbol to translate the shader body.\n\nOutputGLSLBase hashes the Symbol, so I\u0027ve changed it here to hash the Symbol as well instead of the name.\n\nThe hash function for Symbols works differently for UserDefined and AngleInternal variables.",
      "parentUuid": "56579aa0_8fd31119",
      "revId": "423919fac28b0f2e92b357926eabf37f84825335",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}