{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9d3aad6d_04e38669",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 573,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T21:24:01Z",
      "side": 1,
      "message": "maybe define a type in the above existing #ifdef that like PreferredBitSet and use that.",
      "range": {
        "startLine": 567,
        "startChar": 1,
        "endLine": 573,
        "endChar": 39
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a77d738_b6da40d8",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 574,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T18:34:14Z",
      "side": 1,
      "message": "nit: can remove this \"k\"",
      "range": {
        "startLine": 574,
        "startChar": 40,
        "endLine": 574,
        "endChar": 41
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c66ea6ab_5e351ec8",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T18:34:14Z",
      "side": 1,
      "message": "If it\u0027s going to use for loops, how is this any different from std::bitset? My impressions was that the point of reimplementing this was so that the loops are unrolled and constants are used as much as possible. Note that ANGLE is built with -Os, so loop unrolling is not automatic (usually doesn\u0027t happen with -O2 either AFAIK)\n\nAny perf test you could write for this would be highly useful in determining what works best.",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e227e16e_2c77236e",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T18:37:22Z",
      "side": 1,
      "message": "Note also that in the end we really only need 2-word and 3-word variants. 2-word variant for 64-bit bitsets on 32-bit systems + 96-bit bitsets for 64-bit systems. 3-word variant for 96-bit bitsets on 32-bit systems.\n\nIf the implementation cannot be generic enough to support both 2- and 3-word implementations without incurring overheads, then I think it\u0027s fine to do only 2-word and let 32-bit systems continue using std::bitset. That said, a couple of constexpr `if`s should take care of the 2- and 3-word implementation differences.",
      "parentUuid": "c66ea6ab_5e351ec8",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fac4755_98f8f7a2",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-01T20:53:30Z",
      "side": 1,
      "message": "\u003e My impressions was that the point of reimplementing this was so that the loops are unrolled and constants are used as much as possible.\n\nI did not look into how std::bitset implements the container. All i was aiming for was that all iterations and set/get operations happen on 64bit values all the time which the new class achieves. I am fine with renaming the class to BitSet128 and removing all for loops\n\n\u003e Any perf test you could write for this would be highly useful in determining what works best.\n\ni used the existing texture perf test for measurements. I posted perf data on the next change that actually uses this class but pasting here as well -\n\ntexture perf test on local machine gave this result -\n\nwithout patch -\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from TexturesBenchmark\n[ RUN      ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 1152.3734264549 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 3396 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 16804 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 1166.2437196270 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 3396 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 20200 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 1147.5633097704 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 3396 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 23596 count\n[       OK ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips (7128 ms)\n[----------] 1 test from TexturesBenchmark (7128 ms total)\n\nwith patch -\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from TexturesBenchmark\n[ RUN      ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 835.8876610760 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4734 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 23513 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 831.6839452489 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4734 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 28247 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 820.6383508962 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4734 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 32981 count\n[       OK ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips (7084 ms)\n[----------] 1 test from TexturesBenchmark (7086 ms total)",
      "parentUuid": "e227e16e_2c77236e",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8bbae18_eee3ea8a",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T21:08:52Z",
      "side": 1,
      "message": "Interesting, glad to know there\u0027s a perf test that can measure this. Let\u0027s wait and see what Jamie thinks about this too.\n\nThat said, without having looked at std::bitset\u0027s implementation myself, I\u0027m surprised there\u0027s any difference. I would have expected std::bitset to have a similar implementation (like how else can you do this?).",
      "parentUuid": "3fac4755_98f8f7a2",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e638db6e_7ed81063",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T21:10:18Z",
      "side": 1,
      "message": "What platform did you run your test on?",
      "parentUuid": "f8bbae18_eee3ea8a",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73908a4c_9ee53338",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-01T21:13:42Z",
      "side": 1,
      "message": "windows + intel CPU + AMD 5700, i guess gpu doesnt matter since it ran \"vulkan_null\" backend.\nit wasn\u0027t a thorough perf eval, i just ran this test 3 times with and without my change, no clock locking or anything fancy",
      "parentUuid": "e638db6e_7ed81063",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d5298bd_06545910",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T21:24:01Z",
      "side": 1,
      "message": "Hey Mohan, I\u0027m a bit surprised you went with the N words approach instead of the two words approach. What I did when optimizing this class is look at the machine code generated by the iterator used with the bitset class. Does the fixed size \"2\" get unrolled in the loops or does it stay as a loop? We want the machine instructions to be unrolled in this case. If the compiler can\u0027t do it for whatever reason we will have to do it manually.\n\nAlso look at BitSetIteratorPerf.cpp. It won\u0027t be as \"real world\" as the TexturesBenchmark but it will make small differences more noticeable.",
      "parentUuid": "73908a4c_9ee53338",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a205b22_6c3d72d1",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-01T21:52:07Z",
      "side": 1,
      "message": "\u003e I\u0027m a bit surprised you went with the N words approach instead of the two words approach\n\n128 today, maybe 256 later, went ahead with flexibility.\n\n\u003e We want the machine instructions to be unrolled in this case. If the compiler can\u0027t do it for whatever reason we will have to do it manually\n\ndidn\u0027t dig into machine code, took the perf test numbers at face value\n\n\u003e Does the fixed size \"2\" get unrolled in the loops or does it stay as a loop?\n\nyou looked at this machine code using what tool?\n\n\u003e If the compiler can\u0027t do it for whatever reason we will have to do it manually.\n\nas mentioned earlier, i can just make this a BitSet128 for now and worry about generic case later\n\n\u003e Also look at BitSetIteratorPerf.cpp\n\nshould i be using this as the perf test to tune implementation?",
      "parentUuid": "6d5298bd_06545910",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bbebf32_e17ecd27",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1300114
      },
      "writtenOn": "2021-02-01T22:21:08Z",
      "side": 1,
      "message": "Or rather BitSet96? I don\u0027t know how much we care about supporting 32-bit.",
      "parentUuid": "0a205b22_6c3d72d1",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af452eb6_c0ad4030",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T22:24:52Z",
      "side": 1,
      "message": "Mohan, you can use the BitSetIteratorPerf in conjunction with the other perf tests. The Texture one you picked out is good.\n\nI look at the machine code with VTune (good) and MSVS 2019 (works, but it is a bit more peculiar).\n\nI\u0027m fine with a generic solution if it\u0027s light-speed. Just want our fast path to be supported with the fastest code. This is definitely an improvement over ToT, but how fast is it compared to BitSet64?",
      "parentUuid": "9bbebf32_e17ecd27",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22c3202d_cab9f2a5",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 591,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-02T01:35:14Z",
      "side": 1,
      "message": "\u003e Or rather BitSet96?\n\nthat would be a composition of BitSet64 and BitSet32, but i thought we prefer 64bit on CPUs that can support 64? hence made the suggestion of BitSet128, also gives us enough of a buffer to not worry about expanding dirty bit\n\nThese are the numbers i get with BitSet128 with explicit BitSet64[2] container (better but not by that much) -\n\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from TexturesBenchmark\n[ RUN      ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 828.9386153575 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4707 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 23457 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 824.1093716902 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4707 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 28164 count\n*RESULT Textures_vulkan_null.wall_time: 8_textures_5_rebind_3_state_8_mips\u003d 820.2500929396 ns\nRESULT Textures_vulkan_null.trial_steps: 8_textures_5_rebind_3_state_8_mips\u003d 4707 count\nRESULT Textures_vulkan_null.total_steps: 8_textures_5_rebind_3_state_8_mips\u003d 32871 count\n[       OK ] TexturesBenchmark.Run/vulkan_null_8_textures_5_rebind_3_state_8_mips (7066 ms)\n[----------] 1 test from TexturesBenchmark (7067 ms total)\n\n[----------] Global test environment tear-down\n[\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] 1 test from 1 test suite ran. (7069 ms total)\n[  PASSED  ] 1 test.",
      "parentUuid": "9bbebf32_e17ecd27",
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e4d5081_7fa7165c",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 734,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T21:24:01Z",
      "side": 1,
      "message": "please use a range-for when possible.",
      "range": {
        "startLine": 733,
        "startChar": 8,
        "endLine": 734,
        "endChar": 9
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e8d062_b38d1362",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 734,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-01T21:52:07Z",
      "side": 1,
      "message": "cant use range-for because of - \"// The last BaseBitSet needs special handling\"",
      "parentUuid": "1e4d5081_7fa7165c",
      "range": {
        "startLine": 733,
        "startChar": 8,
        "endLine": 734,
        "endChar": 9
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da6b12ee_7e0b22ae",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T21:24:01Z",
      "side": 1,
      "message": "We don\u0027t define an intersects() function on bitsets.",
      "range": {
        "startLine": 793,
        "startChar": 8,
        "endLine": 793,
        "endChar": 74
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18377a0a_76556b2e",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 793,
      "author": {
        "id": 1340649
      },
      "writtenOn": "2021-02-01T21:52:07Z",
      "side": 1,
      "message": "why? sets and intersection go hand-in-hand, no?\n\nAlso, this was a replacement for the \"(BitSetT \u0026 BitSetT).none()\" pattern where it would create a new temp object and call \"none()\" on it, looked wasteful.",
      "parentUuid": "da6b12ee_7e0b22ae",
      "range": {
        "startLine": 793,
        "startChar": 8,
        "endLine": 793,
        "endChar": 74
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c79f25c_93aa061c",
        "filename": "src/common/bitset_utils.h",
        "patchSetId": 1
      },
      "lineNbr": 801,
      "author": {
        "id": 1329751
      },
      "writtenOn": "2021-02-01T21:24:01Z",
      "side": 1,
      "message": "for all of these can you use the out-of-line style we use for the other bitset classes to be consistent?",
      "range": {
        "startLine": 791,
        "startChar": 0,
        "endLine": 801,
        "endChar": 5
      },
      "revId": "f7af129a19b68e63ad187240028fe21520add627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}