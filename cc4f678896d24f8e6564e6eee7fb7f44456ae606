{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ad86120b_e27a7e63",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-11-01T00:47:05Z",
      "side": 1,
      "message": "GetInternalFormatInfo *should* always return a sized format if internalFormat is sized. I think this can be avoided but it looks like it was probably the result of some debugging so maybe not?",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8956c8e4_86c24308",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 3603174
      },
      "writtenOn": "2024-11-01T03:17:43Z",
      "side": 1,
      "message": "Yes, with both OES_required_internalformat and EXT_texture_type_2_10_10_10_REV extension, APP may pass GL_RGB10_EXT, GL_RGB8_OES or GL_RGB565_OES sized internal format when call glTexImage2d, we add a patch here to make the combination acceptable. \nAnd since it is sized format, we will call GetSizedInternalFormatInfo to get the formatInfo.",
      "parentUuid": "ad86120b_e27a7e63",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cce544fc_b4326cbd",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-11-01T16:01:51Z",
      "side": 1,
      "message": "Right, what I mean is `GetInternalFormatInfo(\u003csized internal format\u003e, \u003ctype\u003e)` is equivalent to `GetSizedInternalFormat(\u003csized internal format\u003e)` so I was unsure why we can\u0027t always call `GetInternalFormatInfo`.",
      "parentUuid": "8956c8e4_86c24308",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d32290f_72df2718",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 3603174
      },
      "writtenOn": "2024-11-04T03:01:19Z",
      "side": 1,
      "message": "I got your point, GetInternalFormatInfo is used for unsized format, format + type to specify the internal format, and we can only use internalformat to get the size format, A bit convoluted, I will give a example.\nglTexImage2D(internalFormat\u003dGL_RGB,format\u003d GL_RGB,type\u003dGL_UNSIGNED_BYTE) specify a GL_RGB8 internal format.\nglTexImage2D(internalFormat\u003dGL_RGB8,format\u003dGL_RGB,type\u003dGL_UNSIGNED_INT_2_10_10_10_REV_EXT) also specify a GL_RGB8 internal format.\nThey have a different type but produce same internal format texture, it is used for this case, we just want to get GL_RGB8 formateInfo.\nInternalFormatInfoMap is a two-dimension map, and if cause duplicate key if we add this case into this map table, so we add a patch outside the GetInternalFormatInfo.\nmap[GL_NONE][GL_NONE] \u003d InternalFormat();",
      "parentUuid": "cce544fc_b4326cbd",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56f5902d_b05ee9d8",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 3603174
      },
      "writtenOn": "2024-11-05T09:04:19Z",
      "side": 1,
      "message": "@Geoff Lang, not sure if I make it clearï¼Œ can we start to test this patch.",
      "parentUuid": "4d32290f_72df2718",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b603e20_48735c92",
        "filename": "src/libANGLE/validationES3.cpp",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2024-11-05T14:47:33Z",
      "side": 1,
      "message": "There are already many cases where `internalFormat` is sized at this point in the code for other formats. If you look at the implementation of `GetInternalFormatInfo`:\n\n```\nconst InternalFormat \u0026GetInternalFormatInfo(GLenum internalFormat, GLenum type)\n{\n    static const InternalFormat defaultInternalFormat;\n    const InternalFormatInfoMap \u0026formatMap \u003d GetInternalFormatMap();\n\n    auto internalFormatIter \u003d formatMap.find(internalFormat);\n    if (internalFormatIter \u003d\u003d formatMap.end())\n    {\n        return defaultInternalFormat;\n    }\n\n    // If the internal format is sized, simply return it without the type check.\n    if (internalFormatIter-\u003esecond.size() \u003d\u003d 1 \u0026\u0026 internalFormatIter-\u003esecond.begin()-\u003esecond.sized)\n    {\n        return internalFormatIter-\u003esecond.begin()-\u003esecond;\n    }\n    ...\n ```\n \n It returns the sized internal format info if the provided `internalFormat` is sized without looking at the type parameter which is equivalent to calling `GetSizedInternalFormatInfo`. What goes wrong when you remove this code block in the validation?",
      "parentUuid": "56f5902d_b05ee9d8",
      "range": {
        "startLine": 370,
        "startChar": 4,
        "endLine": 381,
        "endChar": 5
      },
      "revId": "cc4f678896d24f8e6564e6eee7fb7f44456ae606",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba"
    }
  ]
}